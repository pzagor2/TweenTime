(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("signals"), require("d3"), require("file-saver"), require("jquery"));
	else if(typeof define === 'function' && define.amd)
		define(["signals", "d3", "file-saver", "jquery"], factory);
	else if(typeof exports === 'object')
		exports["Editor"] = factory(require("signals"), require("d3"), require("file-saver"), require("jquery"));
	else
		root["TweenTime"] = root["TweenTime"] || {}, root["TweenTime"]["Editor"] = factory(root["signals"], root["d3"], root["saveAs"], root["$"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_16__, __WEBPACK_EXTERNAL_MODULE_26__, __WEBPACK_EXTERNAL_MODULE_31__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Timeline = __webpack_require__(14);\n\nvar _Timeline2 = _interopRequireDefault(_Timeline);\n\nvar _EditorMenu = __webpack_require__(25);\n\nvar _EditorMenu2 = _interopRequireDefault(_EditorMenu);\n\nvar _EditorControls = __webpack_require__(27);\n\nvar _EditorControls2 = _interopRequireDefault(_EditorControls);\n\nvar _SelectionManager = __webpack_require__(28);\n\nvar _SelectionManager2 = _interopRequireDefault(_SelectionManager);\n\nvar _Exporter = __webpack_require__(29);\n\nvar _Exporter2 = _interopRequireDefault(_Exporter);\n\nvar _UndoManager = __webpack_require__(30);\n\nvar _UndoManager2 = _interopRequireDefault(_UndoManager);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar tpl_timeline = __webpack_require__(32);\n// import PropertiesEditor from './editor/PropertiesEditor';\n\nvar Signals = __webpack_require__(6);\n\nvar Editor = function () {\n  function Editor(tweenTime) {\n    var _this = this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Editor);\n\n    this.tweenTime = tweenTime;\n    this.options = options;\n    this.timer = this.tweenTime.timer;\n    this.lastTime = -1;\n    this.curveEditEnabled = false;\n\n    this.onKeyAdded = this.onKeyAdded.bind(this);\n    this.onKeyRemoved = this.onKeyRemoved.bind(this);\n\n    this.forceItemsRender = this.forceItemsRender.bind(this);\n\n    var el = options.el || $('body');\n    this.el = el;\n    this.$timeline = $(tpl_timeline());\n    el.append(this.$timeline);\n    el.addClass('has-editor');\n\n    this.selectionManager = new _SelectionManager2.default(this.tweenTime);\n    this.exporter = new _Exporter2.default(this);\n    this.timeline = new _Timeline2.default(this, options);\n\n    // this.propertiesEditor = new PropertiesEditor(this, this.selectionManager);\n    // this.propertiesEditor.keyAdded.add(this.onKeyAdded);\n    // this.propertiesEditor.keyRemoved.add(this.onKeyRemoved);\n\n    this.menu = new _EditorMenu2.default(this.tweenTime, this.$timeline, this);\n    if (this.options.onMenuCreated !== undefined) {\n      this.options.onMenuCreated(this.$timeline.find('.timeline__menu'), this);\n    }\n\n    this.controls = new _EditorControls2.default(this.tweenTime, this.$timeline);\n    this.undoManager = new _UndoManager2.default(this);\n\n    // Public events.\n    this.onSelect = new Signals.Signal();\n    var self = this;\n    this.selectionManager.onSelect.add(function (selection, addToSelection) {\n      // Propagate the event.\n      self.onSelect.dispatch(selection, addToSelection);\n    });\n\n    // Will help resize the canvas to correct size (minus sidebar and timeline)\n    window.editorEnabled = true;\n    window.dispatchEvent(new Event('resize'));\n    window.requestAnimationFrame(function () {\n      return _this.update();\n    });\n  }\n\n  // player functions\n\n\n  _createClass(Editor, [{\n    key: 'playPause',\n    value: function playPause() {\n      this.controls.playPause();\n    }\n  }, {\n    key: 'backward',\n    value: function backward() {\n      this.controls.backward();\n    }\n  }, {\n    key: 'forward',\n    value: function forward() {\n      this.controls.forward();\n    }\n  }, {\n    key: 'setPlaybackTime',\n    value: function setPlaybackTime(time) {\n      this.timer.seek([time * 1000]);\n    }\n  }, {\n    key: 'changeTime',\n    value: function changeTime(seconds) {\n      this.controls.changeTime(seconds);\n    }\n  }, {\n    key: 'addOnSelectListener',\n    value: function addOnSelectListener(listener) {\n      this.selectionManager.addOnSelectListener(listener);\n    }\n  }, {\n    key: 'removeOnSelectListner',\n    value: function removeOnSelectListner(listener) {\n      this.selectionManager.removeOnSelectListener(listener);\n    }\n  }, {\n    key: 'forceItemsRender',\n    value: function forceItemsRender() {\n      this.timeline._isDirty = true;\n    }\n  }, {\n    key: 'select',\n    value: function select(item) {\n      var addToSelection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      this.selectionManager.select(item, addToSelection);\n    }\n  }, {\n    key: 'setHeaderEndTime',\n    value: function setHeaderEndTime(seconds) {\n      var miliseconds = seconds * 1000;\n      this.timeline.setHeaderDomain([0, miliseconds]);\n    }\n  }, {\n    key: 'addHeaderEndTimeChangeListener',\n    value: function addHeaderEndTimeChangeListener(listener) {\n      this.timeline.addHeaderDomainChangeListener(listener);\n    }\n  }, {\n    key: 'removeHeaderEndTimeChangeListener',\n    value: function removeHeaderEndTimeChangeListener(listener) {\n      this.timeline.removeHeaderDomainChangeListener(listener);\n    }\n  }, {\n    key: 'getEndTime',\n    value: function getEndTime() {\n      return this.timeline.getHeaderDomain()[1];\n    }\n  }, {\n    key: 'getSelection',\n    value: function getSelection() {\n      return this.selectionManager.getSelection();\n    }\n  }, {\n    key: 'resetSelection',\n    value: function resetSelection() {\n      this.selectionManager.reset();\n    }\n  }, {\n    key: 'onKeyAdded',\n    value: function onKeyAdded() {\n      this.undoManager.addState();\n      this.render(false, false, true);\n    }\n  }, {\n    key: 'onKeyRemoved',\n    value: function onKeyRemoved(id) {\n      this.selectionManager.removeItem(id);\n      this.undoManager.addState();\n      if (this.selectionManager.selection.length) {\n        this.selectionManager.triggerSelect();\n      }\n      this.render(false, false, true);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var time_changed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      var time2 = time;\n      if (time2 === false) {\n        time2 = this.timer.time[0];\n      }\n      if (force) {\n        this.timeline._isDirty = true;\n      }\n      this.timeline.render(time2, time_changed);\n      this.controls.render(time2, time_changed);\n      // this.propertiesEditor.render(time2, time_changed);\n    }\n  }, {\n    key: 'update',\n    value: function update() {\n      var _this2 = this;\n\n      var time = this.timer.time[0];\n      var time_changed = this.lastTime === time ? false : true;\n\n      this.render(time, time_changed);\n      this.lastTime = this.timer.time[0];\n      window.requestAnimationFrame(function () {\n        return _this2.update();\n      });\n    }\n  }]);\n\n  return Editor;\n}();\n\nmodule.exports = Editor;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9FZGl0b3IuanM/ZmY5NiJdLCJuYW1lcyI6WyJ0cGxfdGltZWxpbmUiLCJyZXF1aXJlIiwiU2lnbmFscyIsIkVkaXRvciIsInR3ZWVuVGltZSIsIm9wdGlvbnMiLCJ0aW1lciIsImxhc3RUaW1lIiwiY3VydmVFZGl0RW5hYmxlZCIsIm9uS2V5QWRkZWQiLCJiaW5kIiwib25LZXlSZW1vdmVkIiwiZm9yY2VJdGVtc1JlbmRlciIsImVsIiwiJCIsIiR0aW1lbGluZSIsImFwcGVuZCIsImFkZENsYXNzIiwic2VsZWN0aW9uTWFuYWdlciIsImV4cG9ydGVyIiwidGltZWxpbmUiLCJtZW51Iiwib25NZW51Q3JlYXRlZCIsInVuZGVmaW5lZCIsImZpbmQiLCJjb250cm9scyIsInVuZG9NYW5hZ2VyIiwib25TZWxlY3QiLCJTaWduYWwiLCJzZWxmIiwiYWRkIiwic2VsZWN0aW9uIiwiYWRkVG9TZWxlY3Rpb24iLCJkaXNwYXRjaCIsIndpbmRvdyIsImVkaXRvckVuYWJsZWQiLCJkaXNwYXRjaEV2ZW50IiwiRXZlbnQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ1cGRhdGUiLCJwbGF5UGF1c2UiLCJiYWNrd2FyZCIsImZvcndhcmQiLCJ0aW1lIiwic2VlayIsInNlY29uZHMiLCJjaGFuZ2VUaW1lIiwibGlzdGVuZXIiLCJhZGRPblNlbGVjdExpc3RlbmVyIiwicmVtb3ZlT25TZWxlY3RMaXN0ZW5lciIsIl9pc0RpcnR5IiwiaXRlbSIsInNlbGVjdCIsIm1pbGlzZWNvbmRzIiwic2V0SGVhZGVyRG9tYWluIiwiYWRkSGVhZGVyRG9tYWluQ2hhbmdlTGlzdGVuZXIiLCJyZW1vdmVIZWFkZXJEb21haW5DaGFuZ2VMaXN0ZW5lciIsImdldEhlYWRlckRvbWFpbiIsImdldFNlbGVjdGlvbiIsInJlc2V0IiwiYWRkU3RhdGUiLCJyZW5kZXIiLCJpZCIsInJlbW92ZUl0ZW0iLCJsZW5ndGgiLCJ0cmlnZ2VyU2VsZWN0IiwidGltZV9jaGFuZ2VkIiwiZm9yY2UiLCJ0aW1lMiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7Ozs7O0FBUEEsSUFBSUEsZUFBZSxtQkFBQUMsQ0FBUSxFQUFSLENBQW5CO0FBRUE7O0FBTUEsSUFBSUMsVUFBVSxtQkFBQUQsQ0FBUSxDQUFSLENBQWQ7O0lBRU1FLE07QUFDSixrQkFBWUMsU0FBWixFQUFxQztBQUFBOztBQUFBLFFBQWRDLE9BQWMsdUVBQUosRUFBSTs7QUFBQTs7QUFDbkMsU0FBS0QsU0FBTCxHQUFpQkEsU0FBakI7QUFDQSxTQUFLQyxPQUFMLEdBQWVBLE9BQWY7QUFDQSxTQUFLQyxLQUFMLEdBQWEsS0FBS0YsU0FBTCxDQUFlRSxLQUE1QjtBQUNBLFNBQUtDLFFBQUwsR0FBZ0IsQ0FBQyxDQUFqQjtBQUNBLFNBQUtDLGdCQUFMLEdBQXdCLEtBQXhCOztBQUVBLFNBQUtDLFVBQUwsR0FBa0IsS0FBS0EsVUFBTCxDQUFnQkMsSUFBaEIsQ0FBcUIsSUFBckIsQ0FBbEI7QUFDQSxTQUFLQyxZQUFMLEdBQW9CLEtBQUtBLFlBQUwsQ0FBa0JELElBQWxCLENBQXVCLElBQXZCLENBQXBCOztBQUVBLFNBQUtFLGdCQUFMLEdBQXdCLEtBQUtBLGdCQUFMLENBQXNCRixJQUF0QixDQUEyQixJQUEzQixDQUF4Qjs7QUFFQSxRQUFJRyxLQUFLUixRQUFRUSxFQUFSLElBQWNDLEVBQUUsTUFBRixDQUF2QjtBQUNBLFNBQUtELEVBQUwsR0FBVUEsRUFBVjtBQUNBLFNBQUtFLFNBQUwsR0FBaUJELEVBQUVkLGNBQUYsQ0FBakI7QUFDQWEsT0FBR0csTUFBSCxDQUFVLEtBQUtELFNBQWY7QUFDQUYsT0FBR0ksUUFBSCxDQUFZLFlBQVo7O0FBRUEsU0FBS0MsZ0JBQUwsR0FBd0IsK0JBQXFCLEtBQUtkLFNBQTFCLENBQXhCO0FBQ0EsU0FBS2UsUUFBTCxHQUFnQix1QkFBYSxJQUFiLENBQWhCO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQix1QkFBYSxJQUFiLEVBQW1CZixPQUFuQixDQUFoQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsU0FBS2dCLElBQUwsR0FBWSx5QkFBZSxLQUFLakIsU0FBcEIsRUFBK0IsS0FBS1csU0FBcEMsRUFBK0MsSUFBL0MsQ0FBWjtBQUNBLFFBQUksS0FBS1YsT0FBTCxDQUFhaUIsYUFBYixLQUErQkMsU0FBbkMsRUFBOEM7QUFDNUMsV0FBS2xCLE9BQUwsQ0FBYWlCLGFBQWIsQ0FBMkIsS0FBS1AsU0FBTCxDQUFlUyxJQUFmLENBQW9CLGlCQUFwQixDQUEzQixFQUFtRSxJQUFuRTtBQUNEOztBQUVELFNBQUtDLFFBQUwsR0FBZ0IsNkJBQW1CLEtBQUtyQixTQUF4QixFQUFtQyxLQUFLVyxTQUF4QyxDQUFoQjtBQUNBLFNBQUtXLFdBQUwsR0FBbUIsMEJBQWdCLElBQWhCLENBQW5COztBQUVBO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQixJQUFJekIsUUFBUTBCLE1BQVosRUFBaEI7QUFDQSxRQUFJQyxPQUFPLElBQVg7QUFDQSxTQUFLWCxnQkFBTCxDQUFzQlMsUUFBdEIsQ0FBK0JHLEdBQS9CLENBQW1DLFVBQVNDLFNBQVQsRUFBb0JDLGNBQXBCLEVBQW9DO0FBQ3JFO0FBQ0FILFdBQUtGLFFBQUwsQ0FBY00sUUFBZCxDQUF1QkYsU0FBdkIsRUFBa0NDLGNBQWxDO0FBQ0QsS0FIRDs7QUFLQTtBQUNBRSxXQUFPQyxhQUFQLEdBQXVCLElBQXZCO0FBQ0FELFdBQU9FLGFBQVAsQ0FBcUIsSUFBSUMsS0FBSixDQUFVLFFBQVYsQ0FBckI7QUFDQUgsV0FBT0kscUJBQVAsQ0FBNkI7QUFBQSxhQUFNLE1BQUtDLE1BQUwsRUFBTjtBQUFBLEtBQTdCO0FBQ0Q7O0FBRUQ7Ozs7O2dDQUNZO0FBQ1YsV0FBS2QsUUFBTCxDQUFjZSxTQUFkO0FBQ0Q7OzsrQkFFVTtBQUNULFdBQUtmLFFBQUwsQ0FBY2dCLFFBQWQ7QUFDRDs7OzhCQUVTO0FBQ1IsV0FBS2hCLFFBQUwsQ0FBY2lCLE9BQWQ7QUFDRDs7O29DQUVlQyxJLEVBQU07QUFDcEIsV0FBS3JDLEtBQUwsQ0FBV3NDLElBQVgsQ0FBZ0IsQ0FBQ0QsT0FBTyxJQUFSLENBQWhCO0FBQ0Q7OzsrQkFFVUUsTyxFQUFTO0FBQ2xCLFdBQUtwQixRQUFMLENBQWNxQixVQUFkLENBQXlCRCxPQUF6QjtBQUNEOzs7d0NBRW1CRSxRLEVBQVU7QUFDNUIsV0FBSzdCLGdCQUFMLENBQXNCOEIsbUJBQXRCLENBQTBDRCxRQUExQztBQUNEOzs7MENBQ3FCQSxRLEVBQVU7QUFDOUIsV0FBSzdCLGdCQUFMLENBQXNCK0Isc0JBQXRCLENBQTZDRixRQUE3QztBQUNEOzs7dUNBRWtCO0FBQ2pCLFdBQUszQixRQUFMLENBQWM4QixRQUFkLEdBQXlCLElBQXpCO0FBQ0Q7OzsyQkFFTUMsSSxFQUE4QjtBQUFBLFVBQXhCbkIsY0FBd0IsdUVBQVAsS0FBTzs7QUFDbkMsV0FBS2QsZ0JBQUwsQ0FBc0JrQyxNQUF0QixDQUE2QkQsSUFBN0IsRUFBbUNuQixjQUFuQztBQUNEOzs7cUNBRWdCYSxPLEVBQVM7QUFDeEIsVUFBSVEsY0FBY1IsVUFBVSxJQUE1QjtBQUNBLFdBQUt6QixRQUFMLENBQWNrQyxlQUFkLENBQThCLENBQUMsQ0FBRCxFQUFJRCxXQUFKLENBQTlCO0FBQ0Q7OzttREFFOEJOLFEsRUFBVTtBQUN2QyxXQUFLM0IsUUFBTCxDQUFjbUMsNkJBQWQsQ0FBNENSLFFBQTVDO0FBQ0Q7OztzREFFaUNBLFEsRUFBVTtBQUMxQyxXQUFLM0IsUUFBTCxDQUFjb0MsZ0NBQWQsQ0FBK0NULFFBQS9DO0FBQ0Q7OztpQ0FFWTtBQUNYLGFBQU8sS0FBSzNCLFFBQUwsQ0FBY3FDLGVBQWQsR0FBZ0MsQ0FBaEMsQ0FBUDtBQUNEOzs7bUNBRWM7QUFDYixhQUFPLEtBQUt2QyxnQkFBTCxDQUFzQndDLFlBQXRCLEVBQVA7QUFDRDs7O3FDQUVnQjtBQUNmLFdBQUt4QyxnQkFBTCxDQUFzQnlDLEtBQXRCO0FBQ0Q7OztpQ0FFWTtBQUNYLFdBQUtqQyxXQUFMLENBQWlCa0MsUUFBakI7QUFDQSxXQUFLQyxNQUFMLENBQVksS0FBWixFQUFtQixLQUFuQixFQUEwQixJQUExQjtBQUNEOzs7aUNBRVlDLEUsRUFBSTtBQUNmLFdBQUs1QyxnQkFBTCxDQUFzQjZDLFVBQXRCLENBQWlDRCxFQUFqQztBQUNBLFdBQUtwQyxXQUFMLENBQWlCa0MsUUFBakI7QUFDQSxVQUFJLEtBQUsxQyxnQkFBTCxDQUFzQmEsU0FBdEIsQ0FBZ0NpQyxNQUFwQyxFQUE0QztBQUMxQyxhQUFLOUMsZ0JBQUwsQ0FBc0IrQyxhQUF0QjtBQUNEO0FBQ0QsV0FBS0osTUFBTCxDQUFZLEtBQVosRUFBbUIsS0FBbkIsRUFBMEIsSUFBMUI7QUFDRDs7OzZCQUV5RDtBQUFBLFVBQW5EbEIsSUFBbUQsdUVBQTVDLEtBQTRDO0FBQUEsVUFBckN1QixZQUFxQyx1RUFBdEIsS0FBc0I7QUFBQSxVQUFmQyxLQUFlLHVFQUFQLEtBQU87O0FBQ3hELFVBQUlDLFFBQVF6QixJQUFaO0FBQ0EsVUFBSXlCLFVBQVUsS0FBZCxFQUFxQjtBQUNuQkEsZ0JBQVEsS0FBSzlELEtBQUwsQ0FBV3FDLElBQVgsQ0FBZ0IsQ0FBaEIsQ0FBUjtBQUNEO0FBQ0QsVUFBSXdCLEtBQUosRUFBVztBQUNULGFBQUsvQyxRQUFMLENBQWM4QixRQUFkLEdBQXlCLElBQXpCO0FBQ0Q7QUFDRCxXQUFLOUIsUUFBTCxDQUFjeUMsTUFBZCxDQUFxQk8sS0FBckIsRUFBNEJGLFlBQTVCO0FBQ0EsV0FBS3pDLFFBQUwsQ0FBY29DLE1BQWQsQ0FBcUJPLEtBQXJCLEVBQTRCRixZQUE1QjtBQUNBO0FBQ0Q7Ozs2QkFFUTtBQUFBOztBQUNQLFVBQUl2QixPQUFPLEtBQUtyQyxLQUFMLENBQVdxQyxJQUFYLENBQWdCLENBQWhCLENBQVg7QUFDQSxVQUFJdUIsZUFBZSxLQUFLM0QsUUFBTCxLQUFrQm9DLElBQWxCLEdBQXlCLEtBQXpCLEdBQWlDLElBQXBEOztBQUVBLFdBQUtrQixNQUFMLENBQVlsQixJQUFaLEVBQWtCdUIsWUFBbEI7QUFDQSxXQUFLM0QsUUFBTCxHQUFnQixLQUFLRCxLQUFMLENBQVdxQyxJQUFYLENBQWdCLENBQWhCLENBQWhCO0FBQ0FULGFBQU9JLHFCQUFQLENBQTZCO0FBQUEsZUFBTSxPQUFLQyxNQUFMLEVBQU47QUFBQSxPQUE3QjtBQUNEOzs7Ozs7QUFHSDhCLE9BQU9DLE9BQVAsR0FBaUJuRSxNQUFqQiIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHRwbF90aW1lbGluZSA9IHJlcXVpcmUoJy4vdGVtcGxhdGVzL3RpbWVsaW5lLnRwbC5odG1sJyk7XG5pbXBvcnQgVGltZWxpbmUgZnJvbSAnLi9ncmFwaC9UaW1lbGluZSc7XG4vLyBpbXBvcnQgUHJvcGVydGllc0VkaXRvciBmcm9tICcuL2VkaXRvci9Qcm9wZXJ0aWVzRWRpdG9yJztcbmltcG9ydCBFZGl0b3JNZW51IGZyb20gJy4vZWRpdG9yL0VkaXRvck1lbnUnO1xuaW1wb3J0IEVkaXRvckNvbnRyb2xzIGZyb20gJy4vZWRpdG9yL0VkaXRvckNvbnRyb2xzJztcbmltcG9ydCBTZWxlY3Rpb25NYW5hZ2VyIGZyb20gJy4vZWRpdG9yL1NlbGVjdGlvbk1hbmFnZXInO1xuaW1wb3J0IEV4cG9ydGVyIGZyb20gJy4vZWRpdG9yL0V4cG9ydGVyJztcbmltcG9ydCBVbmRvTWFuYWdlciBmcm9tICcuL2VkaXRvci9VbmRvTWFuYWdlcic7XG5sZXQgU2lnbmFscyA9IHJlcXVpcmUoJ2pzLXNpZ25hbHMnKTtcblxuY2xhc3MgRWRpdG9yIHtcbiAgY29uc3RydWN0b3IodHdlZW5UaW1lLCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLnR3ZWVuVGltZSA9IHR3ZWVuVGltZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMudGltZXIgPSB0aGlzLnR3ZWVuVGltZS50aW1lcjtcbiAgICB0aGlzLmxhc3RUaW1lID0gLTE7XG4gICAgdGhpcy5jdXJ2ZUVkaXRFbmFibGVkID0gZmFsc2U7XG5cbiAgICB0aGlzLm9uS2V5QWRkZWQgPSB0aGlzLm9uS2V5QWRkZWQuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uS2V5UmVtb3ZlZCA9IHRoaXMub25LZXlSZW1vdmVkLmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLmZvcmNlSXRlbXNSZW5kZXIgPSB0aGlzLmZvcmNlSXRlbXNSZW5kZXIuYmluZCh0aGlzKTtcblxuICAgIHZhciBlbCA9IG9wdGlvbnMuZWwgfHwgJCgnYm9keScpO1xuICAgIHRoaXMuZWwgPSBlbDtcbiAgICB0aGlzLiR0aW1lbGluZSA9ICQodHBsX3RpbWVsaW5lKCkpO1xuICAgIGVsLmFwcGVuZCh0aGlzLiR0aW1lbGluZSk7XG4gICAgZWwuYWRkQ2xhc3MoJ2hhcy1lZGl0b3InKTtcblxuICAgIHRoaXMuc2VsZWN0aW9uTWFuYWdlciA9IG5ldyBTZWxlY3Rpb25NYW5hZ2VyKHRoaXMudHdlZW5UaW1lKTtcbiAgICB0aGlzLmV4cG9ydGVyID0gbmV3IEV4cG9ydGVyKHRoaXMpO1xuICAgIHRoaXMudGltZWxpbmUgPSBuZXcgVGltZWxpbmUodGhpcywgb3B0aW9ucyk7XG5cbiAgICAvLyB0aGlzLnByb3BlcnRpZXNFZGl0b3IgPSBuZXcgUHJvcGVydGllc0VkaXRvcih0aGlzLCB0aGlzLnNlbGVjdGlvbk1hbmFnZXIpO1xuICAgIC8vIHRoaXMucHJvcGVydGllc0VkaXRvci5rZXlBZGRlZC5hZGQodGhpcy5vbktleUFkZGVkKTtcbiAgICAvLyB0aGlzLnByb3BlcnRpZXNFZGl0b3Iua2V5UmVtb3ZlZC5hZGQodGhpcy5vbktleVJlbW92ZWQpO1xuXG4gICAgdGhpcy5tZW51ID0gbmV3IEVkaXRvck1lbnUodGhpcy50d2VlblRpbWUsIHRoaXMuJHRpbWVsaW5lLCB0aGlzKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLm9uTWVudUNyZWF0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5vcHRpb25zLm9uTWVudUNyZWF0ZWQodGhpcy4kdGltZWxpbmUuZmluZCgnLnRpbWVsaW5lX19tZW51JyksIHRoaXMpO1xuICAgIH1cblxuICAgIHRoaXMuY29udHJvbHMgPSBuZXcgRWRpdG9yQ29udHJvbHModGhpcy50d2VlblRpbWUsIHRoaXMuJHRpbWVsaW5lKTtcbiAgICB0aGlzLnVuZG9NYW5hZ2VyID0gbmV3IFVuZG9NYW5hZ2VyKHRoaXMpO1xuXG4gICAgLy8gUHVibGljIGV2ZW50cy5cbiAgICB0aGlzLm9uU2VsZWN0ID0gbmV3IFNpZ25hbHMuU2lnbmFsKCk7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuc2VsZWN0aW9uTWFuYWdlci5vblNlbGVjdC5hZGQoZnVuY3Rpb24oc2VsZWN0aW9uLCBhZGRUb1NlbGVjdGlvbikge1xuICAgICAgLy8gUHJvcGFnYXRlIHRoZSBldmVudC5cbiAgICAgIHNlbGYub25TZWxlY3QuZGlzcGF0Y2goc2VsZWN0aW9uLCBhZGRUb1NlbGVjdGlvbik7XG4gICAgfSk7XG5cbiAgICAvLyBXaWxsIGhlbHAgcmVzaXplIHRoZSBjYW52YXMgdG8gY29ycmVjdCBzaXplIChtaW51cyBzaWRlYmFyIGFuZCB0aW1lbGluZSlcbiAgICB3aW5kb3cuZWRpdG9yRW5hYmxlZCA9IHRydWU7XG4gICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdyZXNpemUnKSk7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLnVwZGF0ZSgpKTtcbiAgfVxuXG4gIC8vIHBsYXllciBmdW5jdGlvbnNcbiAgcGxheVBhdXNlKCkge1xuICAgIHRoaXMuY29udHJvbHMucGxheVBhdXNlKCk7XG4gIH1cblxuICBiYWNrd2FyZCgpIHtcbiAgICB0aGlzLmNvbnRyb2xzLmJhY2t3YXJkKCk7XG4gIH1cblxuICBmb3J3YXJkKCkge1xuICAgIHRoaXMuY29udHJvbHMuZm9yd2FyZCgpO1xuICB9XG5cbiAgc2V0UGxheWJhY2tUaW1lKHRpbWUpIHtcbiAgICB0aGlzLnRpbWVyLnNlZWsoW3RpbWUgKiAxMDAwXSk7XG4gIH1cblxuICBjaGFuZ2VUaW1lKHNlY29uZHMpIHtcbiAgICB0aGlzLmNvbnRyb2xzLmNoYW5nZVRpbWUoc2Vjb25kcyk7XG4gIH1cblxuICBhZGRPblNlbGVjdExpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgdGhpcy5zZWxlY3Rpb25NYW5hZ2VyLmFkZE9uU2VsZWN0TGlzdGVuZXIobGlzdGVuZXIpO1xuICB9XG4gIHJlbW92ZU9uU2VsZWN0TGlzdG5lcihsaXN0ZW5lcikge1xuICAgIHRoaXMuc2VsZWN0aW9uTWFuYWdlci5yZW1vdmVPblNlbGVjdExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIGZvcmNlSXRlbXNSZW5kZXIoKSB7XG4gICAgdGhpcy50aW1lbGluZS5faXNEaXJ0eSA9IHRydWU7XG4gIH1cblxuICBzZWxlY3QoaXRlbSwgYWRkVG9TZWxlY3Rpb24gPSBmYWxzZSkge1xuICAgIHRoaXMuc2VsZWN0aW9uTWFuYWdlci5zZWxlY3QoaXRlbSwgYWRkVG9TZWxlY3Rpb24pO1xuICB9XG5cbiAgc2V0SGVhZGVyRW5kVGltZShzZWNvbmRzKSB7XG4gICAgdmFyIG1pbGlzZWNvbmRzID0gc2Vjb25kcyAqIDEwMDA7XG4gICAgdGhpcy50aW1lbGluZS5zZXRIZWFkZXJEb21haW4oWzAsIG1pbGlzZWNvbmRzXSk7XG4gIH1cblxuICBhZGRIZWFkZXJFbmRUaW1lQ2hhbmdlTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRpbWVsaW5lLmFkZEhlYWRlckRvbWFpbkNoYW5nZUxpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHJlbW92ZUhlYWRlckVuZFRpbWVDaGFuZ2VMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgIHRoaXMudGltZWxpbmUucmVtb3ZlSGVhZGVyRG9tYWluQ2hhbmdlTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9XG5cbiAgZ2V0RW5kVGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy50aW1lbGluZS5nZXRIZWFkZXJEb21haW4oKVsxXTtcbiAgfVxuXG4gIGdldFNlbGVjdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb25NYW5hZ2VyLmdldFNlbGVjdGlvbigpO1xuICB9XG5cbiAgcmVzZXRTZWxlY3Rpb24oKSB7XG4gICAgdGhpcy5zZWxlY3Rpb25NYW5hZ2VyLnJlc2V0KCk7XG4gIH1cblxuICBvbktleUFkZGVkKCkge1xuICAgIHRoaXMudW5kb01hbmFnZXIuYWRkU3RhdGUoKTtcbiAgICB0aGlzLnJlbmRlcihmYWxzZSwgZmFsc2UsIHRydWUpO1xuICB9XG5cbiAgb25LZXlSZW1vdmVkKGlkKSB7XG4gICAgdGhpcy5zZWxlY3Rpb25NYW5hZ2VyLnJlbW92ZUl0ZW0oaWQpO1xuICAgIHRoaXMudW5kb01hbmFnZXIuYWRkU3RhdGUoKTtcbiAgICBpZiAodGhpcy5zZWxlY3Rpb25NYW5hZ2VyLnNlbGVjdGlvbi5sZW5ndGgpIHtcbiAgICAgIHRoaXMuc2VsZWN0aW9uTWFuYWdlci50cmlnZ2VyU2VsZWN0KCk7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyKGZhbHNlLCBmYWxzZSwgdHJ1ZSk7XG4gIH1cblxuICByZW5kZXIodGltZSA9IGZhbHNlLCB0aW1lX2NoYW5nZWQgPSBmYWxzZSwgZm9yY2UgPSBmYWxzZSkge1xuICAgIGxldCB0aW1lMiA9IHRpbWU7XG4gICAgaWYgKHRpbWUyID09PSBmYWxzZSkge1xuICAgICAgdGltZTIgPSB0aGlzLnRpbWVyLnRpbWVbMF07XG4gICAgfVxuICAgIGlmIChmb3JjZSkge1xuICAgICAgdGhpcy50aW1lbGluZS5faXNEaXJ0eSA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMudGltZWxpbmUucmVuZGVyKHRpbWUyLCB0aW1lX2NoYW5nZWQpO1xuICAgIHRoaXMuY29udHJvbHMucmVuZGVyKHRpbWUyLCB0aW1lX2NoYW5nZWQpO1xuICAgIC8vIHRoaXMucHJvcGVydGllc0VkaXRvci5yZW5kZXIodGltZTIsIHRpbWVfY2hhbmdlZCk7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgdmFyIHRpbWUgPSB0aGlzLnRpbWVyLnRpbWVbMF07XG4gICAgdmFyIHRpbWVfY2hhbmdlZCA9IHRoaXMubGFzdFRpbWUgPT09IHRpbWUgPyBmYWxzZSA6IHRydWU7XG5cbiAgICB0aGlzLnJlbmRlcih0aW1lLCB0aW1lX2NoYW5nZWQpO1xuICAgIHRoaXMubGFzdFRpbWUgPSB0aGlzLnRpbWVyLnRpbWVbMF07XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLnVwZGF0ZSgpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVkaXRvcjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL0VkaXRvci5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar EASE_POINTS = {\n  'Linear.easeNone': [0.250, 0.250, 0.750, 0.750],\n  'Quad.easeIn': [0.550, 0.085, 0.680, 0.530],\n  'Quad.easeOut': [0.250, 0.460, 0.450, 0.940],\n  'Quad.easeInOut': [0.455, 0.030, 0.515, 0.955],\n  'Cubic.easeIn': [0.550, 0.055, 0.675, 0.190],\n  'Cubic.easeOut': [0.215, 0.610, 0.355, 1.000],\n  'Cubic.easeInOut': [0.645, 0.045, 0.355, 1.000],\n  'Quart.easeIn': [0.895, 0.030, 0.685, 0.220],\n  'Quart.easeOut': [0.165, 0.840, 0.440, 1.000],\n  'Quart.easeInOut': [0.770, 0.000, 0.175, 1.000],\n  'Quint.easeIn': [0.755, 0.050, 0.855, 0.060],\n  'Quint.easeOut': [0.230, 1.000, 0.320, 1.000],\n  'Quint.easeInOut': [0.860, 0.000, 0.070, 1.000]\n};\n\nvar Utils = function () {\n  function Utils() {\n    _classCallCheck(this, Utils);\n  }\n\n  _createClass(Utils, null, [{\n    key: 'formatMinutes',\n    value: function formatMinutes(d) {\n      // convert milliseconds to seconds\n      var seconds = d / 1000;\n      var hours = Math.floor(seconds / 3600);\n      var minutes = Math.floor((seconds - hours * 3600) / 60);\n      seconds = seconds - minutes * 60;\n      var output = seconds + 's';\n      if (minutes) {\n        output = minutes + 'm ' + output;\n      }\n      if (hours) {\n        output = hours + 'h ' + output;\n      }\n      return output;\n    }\n  }, {\n    key: 'getClosestTime',\n    value: function getClosestTime(data, time) {\n      var objectId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var property_name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var timer = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var tolerance = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0.1;\n\n      if (timer) {\n        var timer_time = timer.getCurrentTime() / 1000;\n        if (Math.abs(timer_time - time) <= tolerance) {\n          return timer_time;\n        }\n      }\n\n      if (objectId || property_name) {\n        for (var i = 0; i < data.length; i++) {\n          var item = data[i];\n          // Don't match item with itself, but allow property to match item start/end.\n          if (item.id !== objectId || property_name) {\n            // First check start & end.\n            if (Math.abs(item.start - time) <= tolerance) {\n              return item.start;\n            }\n\n            if (Math.abs(item.end - time) <= tolerance) {\n              return item.end;\n            }\n          }\n\n          // Test properties keys\n          for (var j = 0; j < item.properties.length; j++) {\n            var prop = item.properties[j];\n\n            // Don't match property with itself.\n            if (prop.keys && (item.id !== objectId || prop.name !== property_name)) {\n              for (var k = 0; k < prop.keys.length; k++) {\n                var key = prop.keys[k];\n                if (Math.abs(key.time - time) <= tolerance) {\n                  return key.time;\n                }\n              }\n            }\n          }\n        }\n      }\n      return false;\n    }\n  }, {\n    key: 'getPreviousKey',\n    value: function getPreviousKey(keys, time) {\n      var prevKey = false;\n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        if (key.time < time) {\n          prevKey = key;\n        } else {\n          return prevKey;\n        }\n      }\n      return prevKey;\n    }\n  }, {\n    key: 'sortKeys',\n    value: function sortKeys(keys) {\n      var compare = function compare(a, b) {\n        if (a.time < b.time) {\n          return -1;\n        }\n        if (a.time > b.time) {\n          return 1;\n        }\n        return 0;\n      };\n      return keys.sort(compare);\n    }\n  }, {\n    key: 'guid',\n    value: function guid() {\n      var s4 = function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      };\n      return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n    }\n  }, {\n    key: 'getEasingPoints',\n    value: function getEasingPoints(ease) {\n      // If already an array then return it directly.\n      if (Array.isArray(ease)) {\n        return ease;\n      }\n      // Return the points but clone the array first ; )\n      if (EASE_POINTS[ease]) {\n        return EASE_POINTS[ease].slice(0);\n      }\n      return EASE_POINTS['Quad.easeInOut'].slice(0);\n    }\n  }, {\n    key: 'getValueFromKey',\n    value: function getValueFromKey(key) {\n      if (!key || key.value === '') {\n        return 'initial';\n      }\n      var result = key.value;\n\n      if (key.unit && key.value !== 'auto') {\n        result = result + key.unit;\n      }\n\n      return result;\n    }\n  }, {\n    key: 'groupArray',\n    value: function groupArray(xs, key) {\n      return xs.reduce(function (rv, x) {\n        var v = key instanceof Function ? key(x) : x[key];\n        var el = rv.find(function (r) {\n          return r && r.key === v;\n        });\n        if (el) {\n          el.values.push(x);\n        } else {\n          rv.push({\n            key: v,\n            values: [x]\n          });\n        }\n        return rv;\n      }, []);\n    }\n  }, {\n    key: 'roundTimeFloat',\n    value: function roundTimeFloat(time) {\n      return Math.round(time * 10) / 10;\n    }\n  }]);\n\n  return Utils;\n}();\n\nexports.default = Utils;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */
/***/ (function(module, exports) {

	eval("module.exports = __WEBPACK_EXTERNAL_MODULE_6__;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwge1wicm9vdFwiOlwic2lnbmFsc1wiLFwiY29tbW9uanNcIjpcInNpZ25hbHNcIixcImNvbW1vbmpzMlwiOlwic2lnbmFsc1wiLFwiYW1kXCI6XCJzaWduYWxzXCJ9PzkwMzgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV82X187XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwge1wicm9vdFwiOlwic2lnbmFsc1wiLFwiY29tbW9uanNcIjpcInNpZ25hbHNcIixcImNvbW1vbmpzMlwiOlwic2lnbmFsc1wiLFwiYW1kXCI6XCJzaWduYWxzXCJ9XG4vLyBtb2R1bGUgaWQgPSA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**\n * @license\n * lodash 3.10.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern -d -o ./index.js`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '3.10.1';\n\n  /** Used to compose bitmasks for wrapper metadata. */\n  var BIND_FLAG = 1,\n      BIND_KEY_FLAG = 2,\n      CURRY_BOUND_FLAG = 4,\n      CURRY_FLAG = 8,\n      CURRY_RIGHT_FLAG = 16,\n      PARTIAL_FLAG = 32,\n      PARTIAL_RIGHT_FLAG = 64,\n      ARY_FLAG = 128,\n      REARG_FLAG = 256;\n\n  /** Used as default options for `_.trunc`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect when a function becomes hot. */\n  var HOT_COUNT = 150,\n      HOT_SPAN = 16;\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2;\n\n  /** Used as the `TypeError` message for \"Functions\" methods. */\n  var FUNC_ERROR_TEXT = 'Expected a function';\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      objectTag = '[object Object]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      weakMapTag = '[object WeakMap]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,\n      reUnescapedHtml = /[&<>\"'`]/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\n\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\n\\\\]|\\\\.)*?)\\2)\\]/g;\n\n  /**\n   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)\n   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).\n   */\n  var reRegExpChars = /^[:!,]|[\\\\^$.*+?()[\\]{}|\\/]|(^[0-9a-fA-Fnrtuvx])|([\\n\\r\\u2028\\u2029])/g,\n      reHasRegExpChars = RegExp(reRegExpChars.source);\n\n  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */\n  var reComboMark = /[\\u0300-\\u036f\\ufe20-\\ufe23]/g;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect hexadecimal string values. */\n  var reHasHexPrefix = /^0[xX]/;\n\n  /** Used to detect host constructors (Safari > 5). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^\\d+$/;\n\n  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */\n  var reLatin1 = /[\\xc0-\\xd6\\xd8-\\xde\\xdf-\\xf6\\xf8-\\xff]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to match words to create compound words. */\n  var reWords = (function() {\n    var upper = '[A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde]',\n        lower = '[a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff]+';\n\n    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');\n  }());\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',\n    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',\n    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dateTag] = typedArrayTags[errorTag] =\n  typedArrayTags[funcTag] = typedArrayTags[mapTag] =\n  typedArrayTags[numberTag] = typedArrayTags[objectTag] =\n  typedArrayTags[regexpTag] = typedArrayTags[setTag] =\n  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =\n  cloneableTags[dateTag] = cloneableTags[float32Tag] =\n  cloneableTags[float64Tag] = cloneableTags[int8Tag] =\n  cloneableTags[int16Tag] = cloneableTags[int32Tag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[stringTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[mapTag] = cloneableTags[setTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map latin-1 supplementary letters to basic latin letters. */\n  var deburredLetters = {\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcC': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xeC': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '`': '&#96;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\",\n    '&#96;': '`'\n  };\n\n  /** Used to determine if values are of the language type `Object`. */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Used to escape characters for inclusion in compiled regexes. */\n  var regexpEscapes = {\n    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',\n    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',\n    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',\n    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',\n    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Detect free variable `exports`. */\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = objectTypes[typeof self] && self && self.Object && self;\n\n  /** Detect free variable `window`. */\n  var freeWindow = objectTypes[typeof window] && window && window.Object && window;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;\n\n  /**\n   * Used as a reference to the global object.\n   *\n   * The `this` value is used if it's the global object to avoid Greasemonkey's\n   * restricted `window` object, otherwise the `window` object is used.\n   */\n  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * The base implementation of `compareAscending` which compares values and\n   * sorts them in ascending order without guaranteeing a stable sort.\n   *\n   * @private\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @returns {number} Returns the sort order indicator for `value`.\n   */\n  function baseCompareAscending(value, other) {\n    if (value !== other) {\n      var valIsNull = value === null,\n          valIsUndef = value === undefined,\n          valIsReflexive = value === value;\n\n      var othIsNull = other === null,\n          othIsUndef = other === undefined,\n          othIsReflexive = other === other;\n\n      if ((value > other && !othIsNull) || !valIsReflexive ||\n          (valIsNull && !othIsUndef && othIsReflexive) ||\n          (valIsUndef && othIsReflexive)) {\n        return 1;\n      }\n      if ((value < other && !valIsNull) || !othIsReflexive ||\n          (othIsNull && !valIsUndef && valIsReflexive) ||\n          (othIsUndef && valIsReflexive)) {\n        return -1;\n      }\n    }\n    return 0;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for callback shorthands and `this` binding.\n   *\n   * @private\n   * @param {Array} array The array to search.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromRight) {\n    var length = array.length,\n        index = fromRight ? length : -1;\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without support for binary searches.\n   *\n   * @private\n   * @param {Array} array The array to search.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    if (value !== value) {\n      return indexOfNaN(array, fromIndex);\n    }\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isFunction` without support for environments\n   * with incorrect `typeof` results.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n   */\n  function baseIsFunction(value) {\n    // Avoid a Chakra JIT bug in compatibility modes of IE 11.\n    // See https://github.com/jashkenas/underscore/issues/1621 for more details.\n    return typeof value == 'function' || false;\n  }\n\n  /**\n   * Converts `value` to a string if it's not one. An empty string is returned\n   * for `null` or `undefined` values.\n   *\n   * @private\n   * @param {*} value The value to process.\n   * @returns {string} Returns the string.\n   */\n  function baseToString(value) {\n    return value == null ? '' : (value + '');\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimLeft` to get the index of the first character\n   * of `string` that is not found in `chars`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @param {string} chars The characters to find.\n   * @returns {number} Returns the index of the first character not found in `chars`.\n   */\n  function charsLeftIndex(string, chars) {\n    var index = -1,\n        length = string.length;\n\n    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimRight` to get the index of the last character\n   * of `string` that is not found in `chars`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @param {string} chars The characters to find.\n   * @returns {number} Returns the index of the last character not found in `chars`.\n   */\n  function charsRightIndex(string, chars) {\n    var index = string.length;\n\n    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.sortBy` to compare transformed elements of a collection and stable\n   * sort them in ascending order.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @returns {number} Returns the sort order indicator for `object`.\n   */\n  function compareAscending(object, other) {\n    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);\n  }\n\n  /**\n   * Used by `_.sortByOrder` to compare multiple properties of a value to another\n   * and stable sort them.\n   *\n   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,\n   * a value is sorted in ascending order if its corresponding order is \"asc\", and\n   * descending if \"desc\".\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {boolean[]} orders The order to sort by for each property.\n   * @returns {number} Returns the sort order indicator for `object`.\n   */\n  function compareMultiple(object, other, orders) {\n    var index = -1,\n        objCriteria = object.criteria,\n        othCriteria = other.criteria,\n        length = objCriteria.length,\n        ordersLength = orders.length;\n\n    while (++index < length) {\n      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);\n      if (result) {\n        if (index >= ordersLength) {\n          return result;\n        }\n        var order = orders[index];\n        return result * ((order === 'asc' || order === true) ? 1 : -1);\n      }\n    }\n    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n    // that causes it, under certain circumstances, to provide the same value for\n    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n    // for more details.\n    //\n    // This also ensures a stable sort in V8 and other engines.\n    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.\n    return object.index - other.index;\n  }\n\n  /**\n   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  function deburrLetter(letter) {\n    return deburredLetters[letter];\n  }\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeHtmlChar(chr) {\n    return htmlEscapes[chr];\n  }\n\n  /**\n   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @param {string} leadingChar The capture group for a leading character.\n   * @param {string} whitespaceChar The capture group for a whitespace character.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {\n    if (leadingChar) {\n      chr = regexpEscapes[chr];\n    } else if (whitespaceChar) {\n      chr = stringEscapes[chr];\n    }\n    return '\\\\' + chr;\n  }\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the index at which the first occurrence of `NaN` is found in `array`.\n   *\n   * @private\n   * @param {Array} array The array to search.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched `NaN`, else `-1`.\n   */\n  function indexOfNaN(array, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 0 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      var other = array[index];\n      if (other !== other) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Checks if `value` is object-like.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   */\n  function isObjectLike(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  /**\n   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a\n   * character code is whitespace.\n   *\n   * @private\n   * @param {number} charCode The character code to inspect.\n   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.\n   */\n  function isSpace(charCode) {\n    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||\n      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = -1,\n        result = [];\n\n    while (++index < length) {\n      if (array[index] === placeholder) {\n        array[index] = PLACEHOLDER;\n        result[++resIndex] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * An implementation of `_.uniq` optimized for sorted arrays without support\n   * for callback shorthands and `this` binding.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} [iteratee] The function invoked per iteration.\n   * @returns {Array} Returns the new duplicate-value-free array.\n   */\n  function sortedUniq(array, iteratee) {\n    var seen,\n        index = -1,\n        length = array.length,\n        resIndex = -1,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index],\n          computed = iteratee ? iteratee(value, index, array) : value;\n\n      if (!index || seen !== computed) {\n        seen = computed;\n        result[++resIndex] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace\n   * character of `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the index of the first non-whitespace character.\n   */\n  function trimmedLeftIndex(string) {\n    var index = -1,\n        length = string.length;\n\n    while (++index < length && isSpace(string.charCodeAt(index))) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace\n   * character of `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the index of the last non-whitespace character.\n   */\n  function trimmedRightIndex(string) {\n    var index = string.length;\n\n    while (index-- && isSpace(string.charCodeAt(index))) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  function unescapeHtmlChar(chr) {\n    return htmlUnescapes[chr];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the given `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @category Utility\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // using `context` to mock `Date#getTime` use in `_.now`\n   * var mock = _.runInContext({\n   *   'Date': function() {\n   *     return { 'getTime': getTimeMock };\n   *   }\n   * });\n   *\n   * // or creating a suped-up `defer` in Node.js\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  function runInContext(context) {\n    // Avoid issues with some ES3 environments that attempt to use values, named\n    // after built-in constructors like `Object`, for the creation of literals.\n    // ES5 clears this up by stating that literals must use built-in constructors.\n    // See https://es5.github.io/#x11.1.5 for more details.\n    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;\n\n    /** Native constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Number = context.Number,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /** Used for native method references. */\n    var arrayProto = Array.prototype,\n        objectProto = Object.prototype,\n        stringProto = String.prototype;\n\n    /** Used to resolve the decompiled source of functions. */\n    var fnToString = Function.prototype.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /**\n     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var objToString = objectProto.toString;\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Native method references. */\n    var ArrayBuffer = context.ArrayBuffer,\n        clearTimeout = context.clearTimeout,\n        parseFloat = context.parseFloat,\n        pow = Math.pow,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        Set = getNative(context, 'Set'),\n        setTimeout = context.setTimeout,\n        splice = arrayProto.splice,\n        Uint8Array = context.Uint8Array,\n        WeakMap = getNative(context, 'WeakMap');\n\n    /* Native method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeCreate = getNative(Object, 'create'),\n        nativeFloor = Math.floor,\n        nativeIsArray = getNative(Array, 'isArray'),\n        nativeIsFinite = context.isFinite,\n        nativeKeys = getNative(Object, 'keys'),\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeNow = getNative(Date, 'now'),\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random;\n\n    /** Used as references for `-Infinity` and `Infinity`. */\n    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,\n        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;\n\n    /** Used as references for the maximum length and index of an array. */\n    var MAX_ARRAY_LENGTH = 4294967295,\n        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n    /**\n     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n     * of an array-like value.\n     */\n    var MAX_SAFE_INTEGER = 9007199254740991;\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit chaining.\n     * Methods that operate on and return arrays, collections, and functions can\n     * be chained together. Methods that retrieve a single value or may return a\n     * primitive value will automatically end the chain returning the unwrapped\n     * value. Explicit chaining may be enabled using `_.chain`. The execution of\n     * chained methods is lazy, that is, execution is deferred until `_#value`\n     * is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut\n     * fusion is an optimization strategy which merge iteratee calls; this can help\n     * to avoid the creation of intermediate data structures and greatly reduce the\n     * number of iteratee executions.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,\n     * `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,\n     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,\n     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,\n     * and `where`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,\n     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,\n     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,\n     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,\n     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,\n     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,\n     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,\n     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,\n     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,\n     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,\n     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,\n     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,\n     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,\n     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,\n     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,\n     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,\n     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,\n     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,\n     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,\n     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,\n     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,\n     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,\n     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,\n     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,\n     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,\n     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,\n     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,\n     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,\n     * `unescape`, `uniqueId`, `value`, and `words`\n     *\n     * The wrapper method `sample` will return a wrapped value when `n` is provided,\n     * otherwise an unwrapped value is returned.\n     *\n     * @name _\n     * @constructor\n     * @category Chain\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // returns an unwrapped value\n     * wrapped.reduce(function(total, n) {\n     *   return total + n;\n     * });\n     * // => 6\n     *\n     * // returns a wrapped value\n     * var squares = wrapped.map(function(n) {\n     *   return n * n;\n     * });\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The function whose prototype all chaining wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.\n     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.\n     */\n    function LodashWrapper(value, chainAll, actions) {\n      this.__wrapped__ = value;\n      this.__actions__ = actions || [];\n      this.__chain__ = !!chainAll;\n    }\n\n    /**\n     * An object environment feature flags.\n     *\n     * @static\n     * @memberOf _\n     * @type Object\n     */\n    var support = lodash.support = {};\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB). Change the following template settings to use\n     * alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type Object\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type RegExp\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type RegExp\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type RegExp\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type string\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type Object\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type Function\n         */\n        '_': lodash\n      }\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = POSITIVE_INFINITY;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = arrayCopy(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = arrayCopy(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = arrayCopy(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {\n        return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a cache object to store key/value pairs.\n     *\n     * @private\n     * @static\n     * @name Cache\n     * @memberOf _.memoize\n     */\n    function MapCache() {\n      this.__data__ = {};\n    }\n\n    /**\n     * Removes `key` and its value from the cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf _.memoize.Cache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.\n     */\n    function mapDelete(key) {\n      return this.has(key) && delete this.__data__[key];\n    }\n\n    /**\n     * Gets the cached value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf _.memoize.Cache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the cached value.\n     */\n    function mapGet(key) {\n      return key == '__proto__' ? undefined : this.__data__[key];\n    }\n\n    /**\n     * Checks if a cached value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf _.memoize.Cache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapHas(key) {\n      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);\n    }\n\n    /**\n     * Sets `value` to `key` of the cache.\n     *\n     * @private\n     * @name set\n     * @memberOf _.memoize.Cache\n     * @param {string} key The key of the value to cache.\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache object.\n     */\n    function mapSet(key, value) {\n      if (key != '__proto__') {\n        this.__data__[key] = value;\n      }\n      return this;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates a cache object to store unique values.\n     *\n     * @private\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var length = values ? values.length : 0;\n\n      this.data = { 'hash': nativeCreate(null), 'set': new Set };\n      while (length--) {\n        this.push(values[length]);\n      }\n    }\n\n    /**\n     * Checks if `value` is in `cache` mimicking the return signature of\n     * `_.indexOf` by returning `0` if the value is found, else `-1`.\n     *\n     * @private\n     * @param {Object} cache The cache to search.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `0` if `value` is found, else `-1`.\n     */\n    function cacheIndexOf(cache, value) {\n      var data = cache.data,\n          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];\n\n      return result ? 0 : -1;\n    }\n\n    /**\n     * Adds `value` to the cache.\n     *\n     * @private\n     * @name push\n     * @memberOf SetCache\n     * @param {*} value The value to cache.\n     */\n    function cachePush(value) {\n      var data = this.data;\n      if (typeof value == 'string' || isObject(value)) {\n        data.set.add(value);\n      } else {\n        data.hash[value] = true;\n      }\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a new array joining `array` with `other`.\n     *\n     * @private\n     * @param {Array} array The array to join.\n     * @param {Array} other The other array to join.\n     * @returns {Array} Returns the new concatenated array.\n     */\n    function arrayConcat(array, other) {\n      var index = -1,\n          length = array.length,\n          othIndex = -1,\n          othLength = other.length,\n          result = Array(length + othLength);\n\n      while (++index < length) {\n        result[index] = array[index];\n      }\n      while (++othIndex < othLength) {\n        result[index++] = other[othIndex];\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function arrayCopy(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * A specialized version of `_.forEach` for arrays without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns `array`.\n     */\n    function arrayEach(array, iteratee) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        if (iteratee(array[index], index, array) === false) {\n          break;\n        }\n      }\n      return array;\n    }\n\n    /**\n     * A specialized version of `_.forEachRight` for arrays without support for\n     * callback shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns `array`.\n     */\n    function arrayEachRight(array, iteratee) {\n      var length = array.length;\n\n      while (length--) {\n        if (iteratee(array[length], length, array) === false) {\n          break;\n        }\n      }\n      return array;\n    }\n\n    /**\n     * A specialized version of `_.every` for arrays without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     */\n    function arrayEvery(array, predicate) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        if (!predicate(array[index], index, array)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`\n     * with one argument: (value).\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} comparator The function used to compare values.\n     * @param {*} exValue The initial extremum value.\n     * @returns {*} Returns the extremum value.\n     */\n    function arrayExtremum(array, iteratee, comparator, exValue) {\n      var index = -1,\n          length = array.length,\n          computed = exValue,\n          result = computed;\n\n      while (++index < length) {\n        var value = array[index],\n            current = +iteratee(value);\n\n        if (comparator(current, computed)) {\n          computed = current;\n          result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.filter` for arrays without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function arrayFilter(array, predicate) {\n      var index = -1,\n          length = array.length,\n          resIndex = -1,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result[++resIndex] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.map` for arrays without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function arrayMap(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          result = Array(length);\n\n      while (++index < length) {\n        result[index] = iteratee(array[index], index, array);\n      }\n      return result;\n    }\n\n    /**\n     * Appends the elements of `values` to `array`.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to append.\n     * @returns {Array} Returns `array`.\n     */\n    function arrayPush(array, values) {\n      var index = -1,\n          length = values.length,\n          offset = array.length;\n\n      while (++index < length) {\n        array[offset + index] = values[index];\n      }\n      return array;\n    }\n\n    /**\n     * A specialized version of `_.reduce` for arrays without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @param {boolean} [initFromArray] Specify using the first element of `array`\n     *  as the initial value.\n     * @returns {*} Returns the accumulated value.\n     */\n    function arrayReduce(array, iteratee, accumulator, initFromArray) {\n      var index = -1,\n          length = array.length;\n\n      if (initFromArray && length) {\n        accumulator = array[++index];\n      }\n      while (++index < length) {\n        accumulator = iteratee(accumulator, array[index], index, array);\n      }\n      return accumulator;\n    }\n\n    /**\n     * A specialized version of `_.reduceRight` for arrays without support for\n     * callback shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @param {boolean} [initFromArray] Specify using the last element of `array`\n     *  as the initial value.\n     * @returns {*} Returns the accumulated value.\n     */\n    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {\n      var length = array.length;\n      if (initFromArray && length) {\n        accumulator = array[--length];\n      }\n      while (length--) {\n        accumulator = iteratee(accumulator, array[length], length, array);\n      }\n      return accumulator;\n    }\n\n    /**\n     * A specialized version of `_.some` for arrays without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function arraySome(array, predicate) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        if (predicate(array[index], index, array)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `_.sum` for arrays without support for callback\n     * shorthands and `this` binding..\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {number} Returns the sum.\n     */\n    function arraySum(array, iteratee) {\n      var length = array.length,\n          result = 0;\n\n      while (length--) {\n        result += +iteratee(array[length]) || 0;\n      }\n      return result;\n    }\n\n    /**\n     * Used by `_.defaults` to customize its `_.assign` use.\n     *\n     * @private\n     * @param {*} objectValue The destination object property value.\n     * @param {*} sourceValue The source object property value.\n     * @returns {*} Returns the value to assign to the destination object.\n     */\n    function assignDefaults(objectValue, sourceValue) {\n      return objectValue === undefined ? sourceValue : objectValue;\n    }\n\n    /**\n     * Used by `_.template` to customize its `_.assign` use.\n     *\n     * **Note:** This function is like `assignDefaults` except that it ignores\n     * inherited property values when checking if a property is `undefined`.\n     *\n     * @private\n     * @param {*} objectValue The destination object property value.\n     * @param {*} sourceValue The source object property value.\n     * @param {string} key The key associated with the object and source values.\n     * @param {Object} object The destination object.\n     * @returns {*} Returns the value to assign to the destination object.\n     */\n    function assignOwnDefaults(objectValue, sourceValue, key, object) {\n      return (objectValue === undefined || !hasOwnProperty.call(object, key))\n        ? sourceValue\n        : objectValue;\n    }\n\n    /**\n     * A specialized version of `_.assign` for customizing assigned values without\n     * support for argument juggling, multiple sources, and `this` binding `customizer`\n     * functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     */\n    function assignWith(object, source, customizer) {\n      var index = -1,\n          props = keys(source),\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index],\n            value = object[key],\n            result = customizer(value, source[key], key, object, source);\n\n        if ((result === result ? (result !== value) : (value === value)) ||\n            (value === undefined && !(key in object))) {\n          object[key] = result;\n        }\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for argument juggling,\n     * multiple sources, and `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return source == null\n        ? object\n        : baseCopy(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `_.at` without support for string collections\n     * and individual key arguments.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {number[]|string[]} props The property names or indexes of elements to pick.\n     * @returns {Array} Returns the new array of picked elements.\n     */\n    function baseAt(collection, props) {\n      var index = -1,\n          isNil = collection == null,\n          isArr = !isNil && isArrayLike(collection),\n          length = isArr ? collection.length : 0,\n          propsLength = props.length,\n          result = Array(propsLength);\n\n      while(++index < propsLength) {\n        var key = props[index];\n        if (isArr) {\n          result[index] = isIndex(key, length) ? collection[key] : undefined;\n        } else {\n          result[index] = isNil ? undefined : collection[key];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property names to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @returns {Object} Returns `object`.\n     */\n    function baseCopy(source, props, object) {\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n        object[key] = source[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `_.callback` which supports specifying the\n     * number of arguments to provide to `func`.\n     *\n     * @private\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {number} [argCount] The number of arguments to provide to `func`.\n     * @returns {Function} Returns the callback.\n     */\n    function baseCallback(func, thisArg, argCount) {\n      var type = typeof func;\n      if (type == 'function') {\n        return thisArg === undefined\n          ? func\n          : bindCallback(func, thisArg, argCount);\n      }\n      if (func == null) {\n        return identity;\n      }\n      if (type == 'object') {\n        return baseMatches(func);\n      }\n      return thisArg === undefined\n        ? property(func)\n        : baseMatchesProperty(func, thisArg);\n    }\n\n    /**\n     * The base implementation of `_.clone` without support for argument juggling\n     * and `this` binding `customizer` functions.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @param {Function} [customizer] The function to customize cloning values.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The object `value` belongs to.\n     * @param {Array} [stackA=[]] Tracks traversed source objects.\n     * @param {Array} [stackB=[]] Associates clones with source counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {\n      var result;\n      if (customizer) {\n        result = object ? customizer(value, key, object) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return arrayCopy(value, result);\n        }\n      } else {\n        var tag = objToString.call(value),\n            isFunc = tag == funcTag;\n\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          result = initCloneObject(isFunc ? {} : value);\n          if (!isDeep) {\n            return baseAssign(result, value);\n          }\n        } else {\n          return cloneableTags[tag]\n            ? initCloneByTag(value, tag, isDeep)\n            : (object ? value : {});\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stackA || (stackA = []);\n      stackB || (stackB = []);\n\n      var length = stackA.length;\n      while (length--) {\n        if (stackA[length] == value) {\n          return stackB[length];\n        }\n      }\n      // Add the source value to the stack of traversed objects and associate it with its clone.\n      stackA.push(value);\n      stackB.push(result);\n\n      // Recursively populate clone (susceptible to call stack limits).\n      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {\n        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} prototype The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    var baseCreate = (function() {\n      function object() {}\n      return function(prototype) {\n        if (isObject(prototype)) {\n          object.prototype = prototype;\n          var result = new object;\n          object.prototype = undefined;\n        }\n        return result || {};\n      };\n    }());\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts an index\n     * of where to slice the arguments to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Object} args The arguments provide to `func`.\n     * @returns {number} Returns the timer id.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of `_.difference` which accepts a single array\n     * of values to exclude.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values) {\n      var length = array ? array.length : 0,\n          result = [];\n\n      if (!length) {\n        return result;\n      }\n      var index = -1,\n          indexOf = getIndexOf(),\n          isCommon = indexOf == baseIndexOf,\n          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,\n          valuesLength = values.length;\n\n      if (cache) {\n        indexOf = cacheIndexOf;\n        isCommon = false;\n        values = cache;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index];\n\n        if (isCommon && value === value) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === value) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (indexOf(values, value, 0) < 0) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object|string} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object|string} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * Gets the extremum value of `collection` invoking `iteratee` for each value\n     * in `collection` to generate the criterion by which the value is ranked.\n     * The `iteratee` is invoked with three arguments: (value, index|key, collection).\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} comparator The function used to compare values.\n     * @param {*} exValue The initial extremum value.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(collection, iteratee, comparator, exValue) {\n      var computed = exValue,\n          result = computed;\n\n      baseEach(collection, function(value, index, collection) {\n        var current = +iteratee(value, index, collection);\n        if (comparator(current, computed) || (current === exValue && current === result)) {\n          computed = current;\n          result = value;\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = start == null ? 0 : (+start || 0);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : (+end || 0);\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : (end >>> 0);\n      start >>>= 0;\n\n      while (start < length) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,\n     * without support for callback shorthands and `this` binding, which iterates\n     * over `collection` using the provided `eachFunc`.\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to search.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {Function} eachFunc The function to iterate over `collection`.\n     * @param {boolean} [retKey] Specify returning the key of the found element\n     *  instead of the element itself.\n     * @returns {*} Returns the found element or its key, else `undefined`.\n     */\n    function baseFind(collection, predicate, eachFunc, retKey) {\n      var result;\n      eachFunc(collection, function(value, key, collection) {\n        if (predicate(value, key, collection)) {\n          result = retKey ? key : value;\n          return false;\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with added support for restricting\n     * flattening and specifying the start index.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {boolean} [isDeep] Specify a deep flatten.\n     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, isDeep, isStrict, result) {\n      result || (result = []);\n\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index];\n        if (isObjectLike(value) && isArrayLike(value) &&\n            (isStrict || isArray(value) || isArguments(value))) {\n          if (isDeep) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, isDeep, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForIn` and `baseForOwn` which iterates\n     * over `object` properties returned by `keysFunc` invoking `iteratee` for\n     * each property. Iteratee functions may exit iteration early by explicitly\n     * returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forIn` without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForIn(object, iteratee) {\n      return baseFor(object, iteratee, keysIn);\n    }\n\n    /**\n     * The base implementation of `_.forOwn` without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from those provided.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the new array of filtered property names.\n     */\n    function baseFunctions(object, props) {\n      var index = -1,\n          length = props.length,\n          resIndex = -1,\n          result = [];\n\n      while (++index < length) {\n        var key = props[index];\n        if (isFunction(object[key])) {\n          result[++resIndex] = key;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `get` without support for string paths\n     * and default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path of the property to get.\n     * @param {string} [pathKey] The key representation of path.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path, pathKey) {\n      if (object == null) {\n        return;\n      }\n      if (pathKey !== undefined && pathKey in toObject(object)) {\n        path = [pathKey];\n      }\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[path[index++]];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` without support for `this` binding\n     * `customizer` functions.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparing values.\n     * @param {boolean} [isLoose] Specify performing partial comparisons.\n     * @param {Array} [stackA] Tracks traversed `value` objects.\n     * @param {Array} [stackB] Tracks traversed `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} [customizer] The function to customize comparing objects.\n     * @param {boolean} [isLoose] Specify performing partial comparisons.\n     * @param {Array} [stackA=[]] Tracks traversed `value` objects.\n     * @param {Array} [stackB=[]] Tracks traversed `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = arrayTag,\n          othTag = arrayTag;\n\n      if (!objIsArr) {\n        objTag = objToString.call(object);\n        if (objTag == argsTag) {\n          objTag = objectTag;\n        } else if (objTag != objectTag) {\n          objIsArr = isTypedArray(object);\n        }\n      }\n      if (!othIsArr) {\n        othTag = objToString.call(other);\n        if (othTag == argsTag) {\n          othTag = objectTag;\n        } else if (othTag != objectTag) {\n          othIsArr = isTypedArray(other);\n        }\n      }\n      var objIsObj = objTag == objectTag,\n          othIsObj = othTag == objectTag,\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && !(objIsArr || objIsObj)) {\n        return equalByTag(object, other, objTag);\n      }\n      if (!isLoose) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      // For more information on detecting circular references see https://es5.github.io/#JO.\n      stackA || (stackA = []);\n      stackB || (stackB = []);\n\n      var length = stackA.length;\n      while (length--) {\n        if (stackA[length] == object) {\n          return stackB[length] == other;\n        }\n      }\n      // Add `object` and `other` to the stack of traversed objects.\n      stackA.push(object);\n      stackB.push(other);\n\n      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);\n\n      stackA.pop();\n      stackB.pop();\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for callback\n     * shorthands and `this` binding.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} matchData The propery names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparing objects.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = toObject(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var result = customizer ? customizer(objValue, srcValue, key) : undefined;\n          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for callback shorthands\n     * and `this` binding.\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which does not clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        var key = matchData[0][0],\n            value = matchData[0][1];\n\n        return function(object) {\n          if (object == null) {\n            return false;\n          }\n          return object[key] === value && (value !== undefined || (key in toObject(object)));\n        };\n      }\n      return function(object) {\n        return baseIsMatch(object, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to compare.\n     * @returns {Function} Returns the new function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      var isArr = isArray(path),\n          isCommon = isKey(path) && isStrictComparable(srcValue),\n          pathKey = (path + '');\n\n      path = toPath(path);\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        var key = pathKey;\n        object = toObject(object);\n        if ((isArr || !isCommon) && !(key in object)) {\n          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n          if (object == null) {\n            return false;\n          }\n          key = last(path);\n          object = toObject(object);\n        }\n        return object[key] === srcValue\n          ? (srcValue !== undefined || (key in object))\n          : baseIsEqual(srcValue, object[key], undefined, true);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for argument juggling,\n     * multiple sources, and `this` binding `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Array} [stackA=[]] Tracks traversed source objects.\n     * @param {Array} [stackB=[]] Associates values with source counterparts.\n     * @returns {Object} Returns `object`.\n     */\n    function baseMerge(object, source, customizer, stackA, stackB) {\n      if (!isObject(object)) {\n        return object;\n      }\n      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),\n          props = isSrcArr ? undefined : keys(source);\n\n      arrayEach(props || source, function(srcValue, key) {\n        if (props) {\n          key = srcValue;\n          srcValue = source[key];\n        }\n        if (isObjectLike(srcValue)) {\n          stackA || (stackA = []);\n          stackB || (stackB = []);\n          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);\n        }\n        else {\n          var value = object[key],\n              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,\n              isCommon = result === undefined;\n\n          if (isCommon) {\n            result = srcValue;\n          }\n          if ((result !== undefined || (isSrcArr && !(key in object))) &&\n              (isCommon || (result === result ? (result !== value) : (value === value)))) {\n            object[key] = result;\n          }\n        }\n      });\n      return object;\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Array} [stackA=[]] Tracks traversed source objects.\n     * @param {Array} [stackB=[]] Associates values with source counterparts.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {\n      var length = stackA.length,\n          srcValue = source[key];\n\n      while (length--) {\n        if (stackA[length] == srcValue) {\n          object[key] = stackB[length];\n          return;\n        }\n      }\n      var value = object[key],\n          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,\n          isCommon = result === undefined;\n\n      if (isCommon) {\n        result = srcValue;\n        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {\n          result = isArray(value)\n            ? value\n            : (isArrayLike(value) ? arrayCopy(value) : []);\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          result = isArguments(value)\n            ? toPlainObject(value)\n            : (isPlainObject(value) ? value : {});\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      // Add the source value to the stack of traversed objects and associate\n      // it with its merged value.\n      stackA.push(srcValue);\n      stackB.push(result);\n\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);\n      } else if (result === result ? (result !== value) : (value === value)) {\n        object[key] = result;\n      }\n    }\n\n    /**\n     * The base implementation of `_.property` without support for deep paths.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @returns {Function} Returns the new function.\n     */\n    function baseProperty(key) {\n      return function(object) {\n        return object == null ? undefined : object[key];\n      };\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new function.\n     */\n    function basePropertyDeep(path) {\n      var pathKey = (path + '');\n      path = toPath(path);\n      return function(object) {\n        return baseGet(object, path, pathKey);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * index arguments and capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0;\n      while (length--) {\n        var index = indexes[length];\n        if (index != previous && isIndex(index)) {\n          var previous = index;\n          splice.call(array, index, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for argument juggling\n     * and returning floating-point numbers.\n     *\n     * @private\n     * @param {number} min The minimum possible value.\n     * @param {number} max The maximum possible value.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(min, max) {\n      return min + nativeFloor(nativeRandom() * (max - min + 1));\n    }\n\n    /**\n     * The base implementation of `_.reduce` and `_.reduceRight` without support\n     * for callback shorthands and `this` binding, which iterates over `collection`\n     * using the provided `eachFunc`.\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {*} accumulator The initial value.\n     * @param {boolean} initFromCollection Specify using the first or last element\n     *  of `collection` as the initial value.\n     * @param {Function} eachFunc The function to iterate over `collection`.\n     * @returns {*} Returns the accumulated value.\n     */\n    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {\n      eachFunc(collection, function(value, index, collection) {\n        accumulator = initFromCollection\n          ? (initFromCollection = false, value)\n          : iteratee(accumulator, value, index, collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop detection.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      start = start == null ? 0 : (+start || 0);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : (+end || 0);\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for callback shorthands\n     * and `this` binding.\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortBy` which uses `comparer` to define\n     * the sort order of `array` and replaces criteria objects with their\n     * corresponding values.\n     *\n     * @private\n     * @param {Array} array The array to sort.\n     * @param {Function} comparer The function to define sort order.\n     * @returns {Array} Returns `array`.\n     */\n    function baseSortBy(array, comparer) {\n      var length = array.length;\n\n      array.sort(comparer);\n      while (length--) {\n        array[length] = array[length].value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.sortByOrder` without param guards.\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {boolean[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseSortByOrder(collection, iteratees, orders) {\n      var callback = getCallback(),\n          index = -1;\n\n      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });\n\n      var result = baseMap(collection, function(value) {\n        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.sum` without support for callback shorthands\n     * and `this` binding.\n     *\n     * @private\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {number} Returns the sum.\n     */\n    function baseSum(collection, iteratee) {\n      var result = 0;\n      baseEach(collection, function(value, index, collection) {\n        result += +iteratee(value, index, collection) || 0;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.uniq` without support for callback shorthands\n     * and `this` binding.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The function invoked per iteration.\n     * @returns {Array} Returns the new duplicate-value-free array.\n     */\n    function baseUniq(array, iteratee) {\n      var index = -1,\n          indexOf = getIndexOf(),\n          length = array.length,\n          isCommon = indexOf == baseIndexOf,\n          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,\n          seen = isLarge ? createCache() : null,\n          result = [];\n\n      if (seen) {\n        indexOf = cacheIndexOf;\n        isCommon = false;\n      } else {\n        isLarge = false;\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value, index, array) : value;\n\n        if (isCommon && value === value) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (indexOf(seen, computed, 0) < 0) {\n          if (iteratee || isLarge) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.values` and `_.valuesIn` which creates an\n     * array of `object` property values corresponding to the property names\n     * of `props`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} props The property names to get values for.\n     * @returns {Object} Returns the array of property values.\n     */\n    function baseValues(object, props) {\n      var index = -1,\n          length = props.length,\n          result = Array(length);\n\n      while (++index < length) {\n        result[index] = object[props[index]];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,\n     * and `_.takeWhile` without support for callback shorthands and `this` binding.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to peform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      var index = -1,\n          length = actions.length;\n\n      while (++index < length) {\n        var action = actions[index];\n        result = action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }\n      return result;\n    }\n\n    /**\n     * Performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function binaryIndex(array, value, retHighest) {\n      var low = 0,\n          high = array ? array.length : low;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return binaryIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * This function is like `binaryIndex` except that it invokes `iteratee` for\n     * `value` and each element of `array` to compute their sort ranking. The\n     * iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function binaryIndexBy(array, value, iteratee, retHighest) {\n      value = iteratee(value);\n\n      var low = 0,\n          high = array ? array.length : 0,\n          valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsUndef = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            isDef = computed !== undefined,\n            isReflexive = computed === computed;\n\n        if (valIsNaN) {\n          var setLow = isReflexive || retHighest;\n        } else if (valIsNull) {\n          setLow = isReflexive && isDef && (retHighest || computed != null);\n        } else if (valIsUndef) {\n          setLow = isReflexive && (retHighest || isDef);\n        } else if (computed == null) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * A specialized version of `baseCallback` which only supports `this` binding\n     * and specifying the number of arguments to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {number} [argCount] The number of arguments to provide to `func`.\n     * @returns {Function} Returns the callback.\n     */\n    function bindCallback(func, thisArg, argCount) {\n      if (typeof func != 'function') {\n        return identity;\n      }\n      if (thisArg === undefined) {\n        return func;\n      }\n      switch (argCount) {\n        case 1: return function(value) {\n          return func.call(thisArg, value);\n        };\n        case 3: return function(value, index, collection) {\n          return func.call(thisArg, value, index, collection);\n        };\n        case 4: return function(accumulator, value, index, collection) {\n          return func.call(thisArg, accumulator, value, index, collection);\n        };\n        case 5: return function(value, other, key, object, source) {\n          return func.call(thisArg, value, other, key, object, source);\n        };\n      }\n      return function() {\n        return func.apply(thisArg, arguments);\n      };\n    }\n\n    /**\n     * Creates a clone of the given array buffer.\n     *\n     * @private\n     * @param {ArrayBuffer} buffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function bufferClone(buffer) {\n      var result = new ArrayBuffer(buffer.byteLength),\n          view = new Uint8Array(result);\n\n      view.set(new Uint8Array(buffer));\n      return result;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array|Object} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders) {\n      var holdersLength = holders.length,\n          argsIndex = -1,\n          argsLength = nativeMax(args.length - holdersLength, 0),\n          leftIndex = -1,\n          leftLength = partials.length,\n          result = Array(leftLength + argsLength);\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        result[holders[argsIndex]] = args[argsIndex];\n      }\n      while (argsLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array|Object} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders) {\n      var holdersIndex = -1,\n          holdersLength = holders.length,\n          argsIndex = -1,\n          argsLength = nativeMax(args.length - holdersLength, 0),\n          rightIndex = -1,\n          rightLength = partials.length,\n          result = Array(argsLength + rightLength);\n\n      while (++argsIndex < argsLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        result[offset + holders[holdersIndex]] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.\n     *\n     * @private\n     * @param {Function} setter The function to set keys and values of the accumulator object.\n     * @param {Function} [initializer] The function to initialize the accumulator object.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee, thisArg) {\n        var result = initializer ? initializer() : {};\n        iteratee = getCallback(iteratee, thisArg, 3);\n\n        if (isArray(collection)) {\n          var index = -1,\n              length = collection.length;\n\n          while (++index < length) {\n            var value = collection[index];\n            setter(result, value, iteratee(value, index, collection), collection);\n          }\n        } else {\n          baseEach(collection, function(value, key, collection) {\n            setter(result, value, iteratee(value, key, collection), collection);\n          });\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return restParam(function(object, sources) {\n        var index = -1,\n            length = object == null ? 0 : sources.length,\n            customizer = length > 2 ? sources[length - 2] : undefined,\n            guard = length > 2 ? sources[2] : undefined,\n            thisArg = length > 1 ? sources[length - 1] : undefined;\n\n        if (typeof customizer == 'function') {\n          customizer = bindCallback(customizer, thisArg, 5);\n          length -= 2;\n        } else {\n          customizer = typeof thisArg == 'function' ? thisArg : undefined;\n          length -= (customizer ? 1 : 0);\n        }\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        var length = collection ? getLength(collection) : 0;\n        if (!isLength(length)) {\n          return eachFunc(collection, iteratee);\n        }\n        var index = fromRight ? length : -1,\n            iterable = toObject(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for `_.forIn` or `_.forInRight`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var iterable = toObject(object),\n            props = keysFunc(object),\n            length = props.length,\n            index = fromRight ? length : -1;\n\n        while ((fromRight ? index-- : ++index < length)) {\n          var key = props[index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` and invokes it with the `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to bind.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new bound function.\n     */\n    function createBindWrapper(func, thisArg) {\n      var Ctor = createCtorWrapper(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(thisArg, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `Set` cache object to optimize linear searches of large arrays.\n     *\n     * @private\n     * @param {Array} [values] The values to cache.\n     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.\n     */\n    function createCache(values) {\n      return (nativeCreate && Set) ? new SetCache(values) : null;\n    }\n\n    /**\n     * Creates a function that produces compound words out of the words in a\n     * given string.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        var index = -1,\n            array = words(deburr(string)),\n            length = array.length,\n            result = '';\n\n        while (++index < length) {\n          result = callback(result, array[index], index);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtorWrapper(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors.\n        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a `_.curry` or `_.curryRight` function.\n     *\n     * @private\n     * @param {boolean} flag The curry bit flag.\n     * @returns {Function} Returns the new curry function.\n     */\n    function createCurry(flag) {\n      function curryFunc(func, arity, guard) {\n        if (guard && isIterateeCall(func, arity, guard)) {\n          arity = undefined;\n        }\n        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);\n        result.placeholder = curryFunc.placeholder;\n        return result;\n      }\n      return curryFunc;\n    }\n\n    /**\n     * Creates a `_.defaults` or `_.defaultsDeep` function.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Function} Returns the new defaults function.\n     */\n    function createDefaults(assigner, customizer) {\n      return restParam(function(args) {\n        var object = args[0];\n        if (object == null) {\n          return object;\n        }\n        args.push(customizer);\n        return assigner.apply(undefined, args);\n      });\n    }\n\n    /**\n     * Creates a `_.max` or `_.min` function.\n     *\n     * @private\n     * @param {Function} comparator The function used to compare values.\n     * @param {*} exValue The initial extremum value.\n     * @returns {Function} Returns the new extremum function.\n     */\n    function createExtremum(comparator, exValue) {\n      return function(collection, iteratee, thisArg) {\n        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {\n          iteratee = undefined;\n        }\n        iteratee = getCallback(iteratee, thisArg, 3);\n        if (iteratee.length == 1) {\n          collection = isArray(collection) ? collection : toIterable(collection);\n          var result = arrayExtremum(collection, iteratee, comparator, exValue);\n          if (!(collection.length && result === exValue)) {\n            return result;\n          }\n        }\n        return baseExtremum(collection, iteratee, comparator, exValue);\n      };\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(eachFunc, fromRight) {\n      return function(collection, predicate, thisArg) {\n        predicate = getCallback(predicate, thisArg, 3);\n        if (isArray(collection)) {\n          var index = baseFindIndex(collection, predicate, fromRight);\n          return index > -1 ? collection[index] : undefined;\n        }\n        return baseFind(collection, predicate, eachFunc);\n      };\n    }\n\n    /**\n     * Creates a `_.findIndex` or `_.findLastIndex` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFindIndex(fromRight) {\n      return function(array, predicate, thisArg) {\n        if (!(array && array.length)) {\n          return -1;\n        }\n        predicate = getCallback(predicate, thisArg, 3);\n        return baseFindIndex(array, predicate, fromRight);\n      };\n    }\n\n    /**\n     * Creates a `_.findKey` or `_.findLastKey` function.\n     *\n     * @private\n     * @param {Function} objectFunc The function to iterate over an object.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFindKey(objectFunc) {\n      return function(object, predicate, thisArg) {\n        predicate = getCallback(predicate, thisArg, 3);\n        return baseFind(object, predicate, objectFunc, true);\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return function() {\n        var wrapper,\n            length = arguments.length,\n            index = fromRight ? length : -1,\n            leftIndex = 0,\n            funcs = Array(length);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          var func = funcs[leftIndex++] = arguments[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {\n            wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? -1 : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      };\n    }\n\n    /**\n     * Creates a function for `_.forEach` or `_.forEachRight`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over an array.\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @returns {Function} Returns the new each function.\n     */\n    function createForEach(arrayFunc, eachFunc) {\n      return function(collection, iteratee, thisArg) {\n        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))\n          ? arrayFunc(collection, iteratee)\n          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));\n      };\n    }\n\n    /**\n     * Creates a function for `_.forIn` or `_.forInRight`.\n     *\n     * @private\n     * @param {Function} objectFunc The function to iterate over an object.\n     * @returns {Function} Returns the new each function.\n     */\n    function createForIn(objectFunc) {\n      return function(object, iteratee, thisArg) {\n        if (typeof iteratee != 'function' || thisArg !== undefined) {\n          iteratee = bindCallback(iteratee, thisArg, 3);\n        }\n        return objectFunc(object, iteratee, keysIn);\n      };\n    }\n\n    /**\n     * Creates a function for `_.forOwn` or `_.forOwnRight`.\n     *\n     * @private\n     * @param {Function} objectFunc The function to iterate over an object.\n     * @returns {Function} Returns the new each function.\n     */\n    function createForOwn(objectFunc) {\n      return function(object, iteratee, thisArg) {\n        if (typeof iteratee != 'function' || thisArg !== undefined) {\n          iteratee = bindCallback(iteratee, thisArg, 3);\n        }\n        return objectFunc(object, iteratee);\n      };\n    }\n\n    /**\n     * Creates a function for `_.mapKeys` or `_.mapValues`.\n     *\n     * @private\n     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.\n     * @returns {Function} Returns the new map function.\n     */\n    function createObjectMapper(isMapKeys) {\n      return function(object, iteratee, thisArg) {\n        var result = {};\n        iteratee = getCallback(iteratee, thisArg, 3);\n\n        baseForOwn(object, function(value, key, object) {\n          var mapped = iteratee(value, key, object);\n          key = isMapKeys ? mapped : key;\n          value = isMapKeys ? value : mapped;\n          result[key] = value;\n        });\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function for `_.padLeft` or `_.padRight`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify padding from the right.\n     * @returns {Function} Returns the new pad function.\n     */\n    function createPadDir(fromRight) {\n      return function(string, length, chars) {\n        string = baseToString(string);\n        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);\n      };\n    }\n\n    /**\n     * Creates a `_.partial` or `_.partialRight` function.\n     *\n     * @private\n     * @param {boolean} flag The partial bit flag.\n     * @returns {Function} Returns the new partial function.\n     */\n    function createPartial(flag) {\n      var partialFunc = restParam(function(func, partials) {\n        var holders = replaceHolders(partials, partialFunc.placeholder);\n        return createWrapper(func, flag, undefined, partials, holders);\n      });\n      return partialFunc;\n    }\n\n    /**\n     * Creates a function for `_.reduce` or `_.reduceRight`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over an array.\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @returns {Function} Returns the new each function.\n     */\n    function createReduce(arrayFunc, eachFunc) {\n      return function(collection, iteratee, accumulator, thisArg) {\n        var initFromArray = arguments.length < 3;\n        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))\n          ? arrayFunc(collection, iteratee, accumulator, initFromArray)\n          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` and invokes it with optional `this`\n     * binding of, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to reference.\n     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & ARY_FLAG,\n          isBind = bitmask & BIND_FLAG,\n          isBindKey = bitmask & BIND_KEY_FLAG,\n          isCurry = bitmask & CURRY_FLAG,\n          isCurryBound = bitmask & CURRY_BOUND_FLAG,\n          isCurryRight = bitmask & CURRY_RIGHT_FLAG,\n          Ctor = isBindKey ? undefined : createCtorWrapper(func);\n\n      function wrapper() {\n        // Avoid `arguments` object use disqualifying optimizations by\n        // converting it to an array before providing it to other functions.\n        var length = arguments.length,\n            index = length,\n            args = Array(length);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight);\n        }\n        if (isCurry || isCurryRight) {\n          var placeholder = wrapper.placeholder,\n              argsHolders = replaceHolders(args, placeholder);\n\n          length -= argsHolders.length;\n          if (length < arity) {\n            var newArgPos = argPos ? arrayCopy(argPos) : undefined,\n                newArity = nativeMax(arity - length, 0),\n                newsHolders = isCurry ? argsHolders : undefined,\n                newHoldersRight = isCurry ? undefined : argsHolders,\n                newPartials = isCurry ? args : undefined,\n                newPartialsRight = isCurry ? undefined : args;\n\n            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);\n            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);\n\n            if (!isCurryBound) {\n              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);\n            }\n            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],\n                result = createHybridWrapper.apply(undefined, newData);\n\n            if (isLaziable(func)) {\n              setData(result, newData);\n            }\n            result.placeholder = placeholder;\n            return result;\n          }\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        if (argPos) {\n          args = reorder(args, argPos);\n        }\n        if (isAry && ary < args.length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtorWrapper(func);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates the padding required for `string` based on the given `length`.\n     * The `chars` string is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {string} string The string to create padding for.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the pad for `string`.\n     */\n    function createPadding(string, length, chars) {\n      var strLength = string.length;\n      length = +length;\n\n      if (strLength >= length || !nativeIsFinite(length)) {\n        return '';\n      }\n      var padLength = length - strLength;\n      chars = chars == null ? ' ' : (chars + '');\n      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);\n    }\n\n    /**\n     * Creates a function that wraps `func` and invokes it with the optional `this`\n     * binding of `thisArg` and the `partials` prepended to those provided to\n     * the wrapper.\n     *\n     * @private\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to the new function.\n     * @returns {Function} Returns the new bound function.\n     */\n    function createPartialWrapper(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & BIND_FLAG,\n          Ctor = createCtorWrapper(func);\n\n      function wrapper() {\n        // Avoid `arguments` object use disqualifying optimizations by\n        // converting it to an array before providing it `func`.\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength);\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.ceil`, `_.floor`, or `_.round` function.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        precision = precision === undefined ? 0 : (+precision || 0);\n        if (precision) {\n          precision = pow(10, precision);\n          return func(number * precision) / precision;\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.\n     *\n     * @private\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {Function} Returns the new index function.\n     */\n    function createSortedIndex(retHighest) {\n      return function(array, value, iteratee, thisArg) {\n        var callback = getCallback(iteratee);\n        return (iteratee == null && callback === baseCallback)\n          ? binaryIndex(array, value, retHighest)\n          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to reference.\n     * @param {number} bitmask The bitmask of flags.\n     *  The bitmask may be composed of the following flags:\n     *     1 - `_.bind`\n     *     2 - `_.bindKey`\n     *     4 - `_.curry` or `_.curryRight` of a bound function\n     *     8 - `_.curry`\n     *    16 - `_.curryRight`\n     *    32 - `_.partial`\n     *    64 - `_.partialRight`\n     *   128 - `_.rearg`\n     *   256 - `_.ary`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      length -= (holders ? holders.length : 0);\n      if (bitmask & PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func),\n          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];\n\n      if (data) {\n        mergeData(newData, data);\n        bitmask = newData[1];\n        arity = newData[9];\n      }\n      newData[9] = arity == null\n        ? (isBindKey ? 0 : func.length)\n        : (nativeMax(arity - length, 0) || 0);\n\n      if (bitmask == BIND_FLAG) {\n        var result = createBindWrapper(newData[0], newData[2]);\n      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {\n        result = createPartialWrapper.apply(undefined, newData);\n      } else {\n        result = createHybridWrapper.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setter(result, newData);\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} [customizer] The function to customize comparing arrays.\n     * @param {boolean} [isLoose] Specify performing partial comparisons.\n     * @param {Array} [stackA] Tracks traversed `value` objects.\n     * @param {Array} [stackB] Tracks traversed `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {\n      var index = -1,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {\n        return false;\n      }\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index],\n            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;\n\n        if (result !== undefined) {\n          if (result) {\n            continue;\n          }\n          return false;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (isLoose) {\n          if (!arraySome(other, function(othValue) {\n                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);\n              })) {\n            return false;\n          }\n        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag) {\n      switch (tag) {\n        case boolTag:\n        case dateTag:\n          // Coerce dates and booleans to numbers, dates to milliseconds and booleans\n          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.\n          return +object == +other;\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case numberTag:\n          // Treat `NaN` vs. `NaN` as equal.\n          return (object != +object)\n            ? other != +other\n            : object == +other;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings primitives and string\n          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.\n          return object == (other + '');\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Function} [customizer] The function to customize comparing values.\n     * @param {boolean} [isLoose] Specify performing partial comparisons.\n     * @param {Array} [stackA] Tracks traversed `value` objects.\n     * @param {Array} [stackB] Tracks traversed `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {\n      var objProps = keys(object),\n          objLength = objProps.length,\n          othProps = keys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isLoose) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      var skipCtor = isLoose;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key],\n            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;\n\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {\n          return false;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (!skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Gets the appropriate \"callback\" function. If the `_.callback` method is\n     * customized this function returns the custom method, otherwise it returns\n     * the `baseCallback` function. If arguments are provided the chosen function\n     * is invoked with them and its result is returned.\n     *\n     * @private\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getCallback(func, thisArg, argCount) {\n      var result = lodash.callback || callback;\n      result = result === callback ? baseCallback : result;\n      return argCount ? result(func, thisArg, argCount) : result;\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = func.name,\n          array = realNames[result],\n          length = array ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the appropriate \"indexOf\" function. If the `_.indexOf` method is\n     * customized this function returns the custom method, otherwise it returns\n     * the `baseIndexOf` function. If arguments are provided the chosen function\n     * is invoked with them and its result is returned.\n     *\n     * @private\n     * @returns {Function|number} Returns the chosen function or its result.\n     */\n    function getIndexOf(collection, target, fromIndex) {\n      var result = lodash.indexOf || indexOf;\n      result = result === indexOf ? baseIndexOf : result;\n      return collection ? result(collection, target, fromIndex) : result;\n    }\n\n    /**\n     * Gets the \"length\" property value of `object`.\n     *\n     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n     * that affects Safari on at least iOS 8.1-8.3 ARM64.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {*} Returns the \"length\" value.\n     */\n    var getLength = baseProperty('length');\n\n    /**\n     * Gets the propery names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = pairs(object),\n          length = result.length;\n\n      while (length--) {\n        result[length][2] = isStrictComparable(result[length][1]);\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = object == null ? undefined : object[key];\n      return isNative(value) ? value : undefined;\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = new array.constructor(length);\n\n      // Add array properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      var Ctor = object.constructor;\n      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {\n        Ctor = Object;\n      }\n      return new Ctor;\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return bufferClone(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          var buffer = object.buffer;\n          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          var result = new Ctor(object.source, reFlags.exec(object));\n          result.lastIndex = object.lastIndex;\n      }\n      return result;\n    }\n\n    /**\n     * Invokes the method at `path` on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function invokePath(object, path, args) {\n      if (object != null && !isKey(path, object)) {\n        path = toPath(path);\n        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n        path = last(path);\n      }\n      var func = object == null ? object : object[path];\n      return func == null ? undefined : func.apply(object, args);\n    }\n\n    /**\n     * Checks if `value` is array-like.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(getLength(value));\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n      length = length == null ? MAX_SAFE_INTEGER : length;\n      return value > -1 && value % 1 == 0 && value < length;\n    }\n\n    /**\n     * Checks if the provided arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n          ? (isArrayLike(object) && isIndex(index, object.length))\n          : (type == 'string' && index in object)) {\n        var other = object[index];\n        return value === value ? (value === other) : (other !== other);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      var type = typeof value;\n      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {\n        return true;\n      }\n      if (isArray(value)) {\n        return false;\n      }\n      var result = !reIsDeepProp.test(value);\n      return result || (object != null && value in toObject(object));\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func);\n      if (!(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      var other = lodash[funcName];\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     */\n    function isLength(value) {\n      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers required to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`\n     * augment function arguments, making the order in which they are executed important,\n     * preventing the merging of metadata. However, we make an exception for a safe\n     * common case where curried functions have `_.ary` and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < ARY_FLAG;\n\n      var isCombo =\n        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||\n        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||\n        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = arrayCopy(value);\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use.\n     *\n     * @private\n     * @param {*} objectValue The destination object property value.\n     * @param {*} sourceValue The source object property value.\n     * @returns {*} Returns the value to assign to the destination object.\n     */\n    function mergeDefaults(objectValue, sourceValue) {\n      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);\n    }\n\n    /**\n     * A specialized version of `_.pick` which picks `object` properties specified\n     * by `props`.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} props The property names to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function pickByArray(object, props) {\n      object = toObject(object);\n\n      var index = -1,\n          length = props.length,\n          result = {};\n\n      while (++index < length) {\n        var key = props[index];\n        if (key in object) {\n          result[key] = object[key];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.pick` which picks `object` properties `predicate`\n     * returns truthy for.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Object} Returns the new object.\n     */\n    function pickByCallback(object, predicate) {\n      var result = {};\n      baseForIn(object, function(value, key, object) {\n        if (predicate(value, key, object)) {\n          result[key] = value;\n        }\n      });\n      return result;\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = arrayCopy(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity function\n     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = (function() {\n      var count = 0,\n          lastCalled = 0;\n\n      return function(key, value) {\n        var stamp = now(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return key;\n          }\n        } else {\n          count = 0;\n        }\n        return baseSetData(key, value);\n      };\n    }());\n\n    /**\n     * A fallback implementation of `Object.keys` which creates an array of the\n     * own enumerable property names of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function shimKeys(object) {\n      var props = keysIn(object),\n          propsLength = props.length,\n          length = propsLength && object.length;\n\n      var allowIndexes = !!length && isLength(length) &&\n        (isArray(object) || isArguments(object));\n\n      var index = -1,\n          result = [];\n\n      while (++index < propsLength) {\n        var key = props[index];\n        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to an array-like object if it's not one.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {Array|Object} Returns the array-like object.\n     */\n    function toIterable(value) {\n      if (value == null) {\n        return [];\n      }\n      if (!isArrayLike(value)) {\n        return values(value);\n      }\n      return isObject(value) ? value : Object(value);\n    }\n\n    /**\n     * Converts `value` to an object if it's not one.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {Object} Returns the object.\n     */\n    function toObject(value) {\n      return isObject(value) ? value : Object(value);\n    }\n\n    /**\n     * Converts `value` to property path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {Array} Returns the property path array.\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return value;\n      }\n      var result = [];\n      baseToString(value).replace(rePropName, function(match, number, quote, string) {\n        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      return wrapper instanceof LazyWrapper\n        ? wrapper.clone()\n        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `collection` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Array} Returns the new array containing chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if (guard ? isIterateeCall(array, size, guard) : size == null) {\n        size = 1;\n      } else {\n        size = nativeMax(nativeFloor(size) || 1, 1);\n      }\n      var index = 0,\n          length = array ? array.length : 0,\n          resIndex = -1,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[++resIndex] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array ? array.length : 0,\n          resIndex = -1,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[++resIndex] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of unique `array` values not included in the other\n     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The arrays of values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.difference([1, 2, 3], [4, 2]);\n     * // => [1, 3]\n     */\n    var difference = restParam(function(array, values) {\n      return (isObjectLike(array) && isArrayLike(array))\n        ? baseDifference(array, baseFlatten(values, false, true))\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      if (guard ? isIterateeCall(array, n, guard) : n == null) {\n        n = 1;\n      }\n      return baseSlice(array, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      if (guard ? isIterateeCall(array, n, guard) : n == null) {\n        n = 1;\n      }\n      n = length - (+n || 0);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * bound to `thisArg` and invoked with three arguments: (value, index, array).\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that match the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRightWhile([1, 2, 3], function(n) {\n     *   return n > 1;\n     * });\n     * // => [1]\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * // using the `_.matches` callback shorthand\n     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');\n     * // => ['barney', 'fred']\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');\n     * // => ['barney']\n     *\n     * // using the `_.property` callback shorthand\n     * _.pluck(_.dropRightWhile(users, 'active'), 'user');\n     * // => ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate, thisArg) {\n      return (array && array.length)\n        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * bound to `thisArg` and invoked with three arguments: (value, index, array).\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropWhile([1, 2, 3], function(n) {\n     *   return n < 3;\n     * });\n     * // => [3]\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * // using the `_.matches` callback shorthand\n     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');\n     * // => ['fred', 'pebbles']\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.pluck(_.dropWhile(users, 'active', false), 'user');\n     * // => ['pebbles']\n     *\n     * // using the `_.property` callback shorthand\n     * _.pluck(_.dropWhile(users, 'active'), 'user');\n     * // => ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate, thisArg) {\n      return (array && array.length)\n        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8], '*', 1, 2);\n     * // => [4, '*', 8]\n     */\n    function fill(array, value, start, end) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to search.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(chr) {\n     *   return chr.user == 'barney';\n     * });\n     * // => 0\n     *\n     * // using the `_.matches` callback shorthand\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.findIndex(users, 'active', false);\n     * // => 0\n     *\n     * // using the `_.property` callback shorthand\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    var findIndex = createFindIndex();\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to search.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(chr) {\n     *   return chr.user == 'pebbles';\n     * });\n     * // => 2\n     *\n     * // using the `_.matches` callback shorthand\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.findLastIndex(users, 'active', false);\n     * // => 2\n     *\n     * // using the `_.property` callback shorthand\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    var findLastIndex = createFindIndex(true);\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @alias head\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.first([1, 2, 3]);\n     * // => 1\n     *\n     * _.first([]);\n     * // => undefined\n     */\n    function first(array) {\n      return array ? array[0] : undefined;\n    }\n\n    /**\n     * Flattens a nested array. If `isDeep` is `true` the array is recursively\n     * flattened, otherwise it is only flattened a single level.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {boolean} [isDeep] Specify a deep flatten.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, 3, [4]]]);\n     * // => [1, 2, 3, [4]]\n     *\n     * // using `isDeep`\n     * _.flatten([1, [2, 3, [4]]], true);\n     * // => [1, 2, 3, 4]\n     */\n    function flatten(array, isDeep, guard) {\n      var length = array ? array.length : 0;\n      if (guard && isIterateeCall(array, isDeep, guard)) {\n        isDeep = false;\n      }\n      return length ? baseFlatten(array, isDeep) : [];\n    }\n\n    /**\n     * Recursively flattens a nested array.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to recursively flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, 3, [4]]]);\n     * // => [1, 2, 3, 4]\n     */\n    function flattenDeep(array) {\n      var length = array ? array.length : 0;\n      return length ? baseFlatten(array, true) : [];\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it is used as the offset\n     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`\n     * performs a faster binary search.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to search.\n     * @param {*} value The value to search for.\n     * @param {boolean|number} [fromIndex=0] The index to search from or `true`\n     *  to perform a binary search on a sorted array.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // using `fromIndex`\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     *\n     * // performing a binary search\n     * _.indexOf([1, 1, 2, 2], 2, true);\n     * // => 2\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return -1;\n      }\n      if (typeof fromIndex == 'number') {\n        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;\n      } else if (fromIndex) {\n        var index = binaryIndex(array, value);\n        if (index < length &&\n            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {\n          return index;\n        }\n        return -1;\n      }\n      return baseIndexOf(array, value, fromIndex || 0);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      return dropRight(array, 1);\n    }\n\n    /**\n     * Creates an array of unique values that are included in all of the provided\n     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of shared values.\n     * @example\n     * _.intersection([1, 2], [4, 2], [2, 1]);\n     * // => [2]\n     */\n    var intersection = restParam(function(arrays) {\n      var othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(length),\n          indexOf = getIndexOf(),\n          isCommon = indexOf == baseIndexOf,\n          result = [];\n\n      while (othIndex--) {\n        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];\n        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;\n      }\n      var array = arrays[0],\n          index = -1,\n          length = array ? array.length : 0,\n          seen = caches[0];\n\n      outer:\n      while (++index < length) {\n        value = array[index];\n        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {\n          var othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(value);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    });\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array ? array.length : 0;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to search.\n     * @param {*} value The value to search for.\n     * @param {boolean|number} [fromIndex=array.length-1] The index to search from\n     *  or `true` to perform a binary search on a sorted array.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // using `fromIndex`\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     *\n     * // performing a binary search\n     * _.lastIndexOf([1, 1, 2, 2], 2, true);\n     * // => 3\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (typeof fromIndex == 'number') {\n        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;\n      } else if (fromIndex) {\n        index = binaryIndex(array, value, true) - 1;\n        var other = array[index];\n        if (value === value ? (value === other) : (other !== other)) {\n          return index;\n        }\n        return -1;\n      }\n      if (value !== value) {\n        return indexOfNaN(array, index, true);\n      }\n      while (index--) {\n        if (array[index] === value) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Removes all provided values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3, 1, 2, 3];\n     *\n     * _.pull(array, 2, 3);\n     * console.log(array);\n     * // => [1, 1]\n     */\n    function pull() {\n      var args = arguments,\n          array = args[0];\n\n      if (!(array && array.length)) {\n        return array;\n      }\n      var index = 0,\n          indexOf = getIndexOf(),\n          length = args.length;\n\n      while (++index < length) {\n        var fromIndex = 0,\n            value = args[index];\n\n        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to the given indexes and returns\n     * an array of the removed elements. Indexes may be specified as an array of\n     * indexes or as individual arguments.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove,\n     *  specified as individual indexes or arrays of indexes.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [5, 10, 15, 20];\n     * var evens = _.pullAt(array, 1, 3);\n     *\n     * console.log(array);\n     * // => [5, 15]\n     *\n     * console.log(evens);\n     * // => [10, 20]\n     */\n    var pullAt = restParam(function(array, indexes) {\n      indexes = baseFlatten(indexes);\n\n      var result = baseAt(array, indexes);\n      basePullAt(array, indexes.sort(baseCompareAscending));\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is bound to\n     * `thisArg` and invoked with three arguments: (value, index, array).\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate, thisArg) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getCallback(predicate, thisArg, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @alias tail\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.rest([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function rest(array) {\n      return drop(array, 1);\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of `Array#slice` to support node\n     * lists in IE < 9 and to ensure dense arrays are returned.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value` should\n     * be inserted into `array` in order to maintain its sort order. If an iteratee\n     * function is provided it is invoked for `value` and each element of `array`\n     * to compute their sort ranking. The iteratee is bound to `thisArg` and\n     * invoked with one argument; (value).\n     *\n     * If a property name is provided for `iteratee` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `iteratee` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     *\n     * _.sortedIndex([4, 4, 5, 5], 5);\n     * // => 2\n     *\n     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };\n     *\n     * // using an iteratee function\n     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {\n     *   return this.data[word];\n     * }, dict);\n     * // => 1\n     *\n     * // using the `_.property` callback shorthand\n     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');\n     * // => 1\n     */\n    var sortedIndex = createSortedIndex();\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 4, 5, 5], 5);\n     * // => 4\n     */\n    var sortedLastIndex = createSortedIndex(true);\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      if (guard ? isIterateeCall(array, n, guard) : n == null) {\n        n = 1;\n      }\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      if (guard ? isIterateeCall(array, n, guard) : n == null) {\n        n = 1;\n      }\n      n = length - (+n || 0);\n      return baseSlice(array, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`\n     * and invoked with three arguments: (value, index, array).\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRightWhile([1, 2, 3], function(n) {\n     *   return n > 1;\n     * });\n     * // => [2, 3]\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * // using the `_.matches` callback shorthand\n     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');\n     * // => ['pebbles']\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');\n     * // => ['fred', 'pebbles']\n     *\n     * // using the `_.property` callback shorthand\n     * _.pluck(_.takeRightWhile(users, 'active'), 'user');\n     * // => []\n     */\n    function takeRightWhile(array, predicate, thisArg) {\n      return (array && array.length)\n        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is bound to\n     * `thisArg` and invoked with three arguments: (value, index, array).\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeWhile([1, 2, 3], function(n) {\n     *   return n < 3;\n     * });\n     * // => [1, 2]\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false},\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * // using the `_.matches` callback shorthand\n     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');\n     * // => ['barney']\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.pluck(_.takeWhile(users, 'active', false), 'user');\n     * // => ['barney', 'fred']\n     *\n     * // using the `_.property` callback shorthand\n     * _.pluck(_.takeWhile(users, 'active'), 'user');\n     * // => []\n     */\n    function takeWhile(array, predicate, thisArg) {\n      return (array && array.length)\n        ? baseWhile(array, getCallback(predicate, thisArg, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all of the provided arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([1, 2], [4, 2], [2, 1]);\n     * // => [1, 2, 4]\n     */\n    var union = restParam(function(arrays) {\n      return baseUniq(baseFlatten(arrays, false, true));\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurence of each element\n     * is kept. Providing `true` for `isSorted` performs a faster search algorithm\n     * for sorted arrays. If an iteratee function is provided it is invoked for\n     * each element in the array to generate the criterion by which uniqueness\n     * is computed. The `iteratee` is bound to `thisArg` and invoked with three\n     * arguments: (value, index, array).\n     *\n     * If a property name is provided for `iteratee` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `iteratee` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias unique\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {boolean} [isSorted] Specify the array is sorted.\n     * @param {Function|Object|string} [iteratee] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Array} Returns the new duplicate-value-free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     *\n     * // using `isSorted`\n     * _.uniq([1, 1, 2], true);\n     * // => [1, 2]\n     *\n     * // using an iteratee function\n     * _.uniq([1, 2.5, 1.5, 2], function(n) {\n     *   return this.floor(n);\n     * }, Math);\n     * // => [1, 2.5]\n     *\n     * // using the `_.property` callback shorthand\n     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniq(array, isSorted, iteratee, thisArg) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      if (isSorted != null && typeof isSorted != 'boolean') {\n        thisArg = iteratee;\n        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;\n        isSorted = false;\n      }\n      var callback = getCallback();\n      if (!(iteratee == null && callback === baseCallback)) {\n        iteratee = callback(iteratee, thisArg, 3);\n      }\n      return (isSorted && getIndexOf() == baseIndexOf)\n        ? sortedUniq(array, iteratee)\n        : baseUniq(array, iteratee);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);\n     * // => [['fred', 30, true], ['barney', 40, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['fred', 'barney'], [30, 40], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var index = -1,\n          length = 0;\n\n      array = arrayFilter(array, function(group) {\n        if (isArrayLike(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = arrayMap(array, baseProperty(index));\n      }\n      return result;\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts an iteratee to specify\n     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`\n     * and invoked with four arguments: (accumulator, value, index, group).\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee] The function to combine regrouped values.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee, thisArg) {\n      var length = array ? array.length : 0;\n      if (!length) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      iteratee = bindCallback(iteratee, thisArg, 4);\n      return arrayMap(result, function(group) {\n        return arrayReduce(group, iteratee, undefined, true);\n      });\n    }\n\n    /**\n     * Creates an array excluding all provided values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {Array} array The array to filter.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.without([1, 2, 1, 3], 1, 2);\n     * // => [3]\n     */\n    var without = restParam(function(array, values) {\n      return isArrayLike(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the provided arrays.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of values.\n     * @example\n     *\n     * _.xor([1, 2], [4, 2]);\n     * // => [1, 4]\n     */\n    function xor() {\n      var index = -1,\n          length = arguments.length;\n\n      while (++index < length) {\n        var array = arguments[index];\n        if (isArrayLike(array)) {\n          var result = result\n            ? arrayPush(baseDifference(result, array), baseDifference(array, result))\n            : array;\n        }\n      }\n      return result ? baseUniq(result) : [];\n    }\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the first\n     * elements of the given arrays, the second of which contains the second elements\n     * of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['fred', 'barney'], [30, 40], [true, false]);\n     * // => [['fred', 30, true], ['barney', 40, false]]\n     */\n    var zip = restParam(unzip);\n\n    /**\n     * The inverse of `_.pairs`; this method returns an object composed from arrays\n     * of property names and values. Provide either a single two dimensional array,\n     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names\n     * and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @alias object\n     * @category Array\n     * @param {Array} props The property names.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject([['fred', 30], ['barney', 40]]);\n     * // => { 'fred': 30, 'barney': 40 }\n     *\n     * _.zipObject(['fred', 'barney'], [30, 40]);\n     * // => { 'fred': 30, 'barney': 40 }\n     */\n    function zipObject(props, values) {\n      var index = -1,\n          length = props ? props.length : 0,\n          result = {};\n\n      if (length && !values && !isArray(props[0])) {\n        values = [];\n      }\n      while (++index < length) {\n        var key = props[index];\n        if (values) {\n          result[key] = values[index];\n        } else if (key) {\n          result[key[0]] = key[1];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an iteratee to specify\n     * how grouped values should be combined. The `iteratee` is bound to `thisArg`\n     * and invoked with four arguments: (accumulator, value, index, group).\n     *\n     * @static\n     * @memberOf _\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee] The function to combine grouped values.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);\n     * // => [111, 222]\n     */\n    var zipWith = restParam(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 2 ? arrays[length - 2] : undefined,\n          thisArg = length > 1 ? arrays[length - 1] : undefined;\n\n      if (length > 2 && typeof iteratee == 'function') {\n        length -= 2;\n      } else {\n        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;\n        thisArg = undefined;\n      }\n      arrays.length = length;\n      return unzipWith(arrays, iteratee, thisArg);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object that wraps `value` with explicit method\n     * chaining enabled.\n     *\n     * @static\n     * @memberOf _\n     * @category Chain\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _.chain(users)\n     *   .sortBy('age')\n     *   .map(function(chr) {\n     *     return chr.user + ' is ' + chr.age;\n     *   })\n     *   .first()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor is\n     * bound to `thisArg` and invoked with one argument; (value). The purpose of\n     * this method is to \"tap into\" a method chain in order to perform operations\n     * on intermediate results within the chain.\n     *\n     * @static\n     * @memberOf _\n     * @category Chain\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @param {*} [thisArg] The `this` binding of `interceptor`.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor, thisArg) {\n      interceptor.call(thisArg, value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     *\n     * @static\n     * @memberOf _\n     * @category Chain\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @param {*} [thisArg] The `this` binding of `interceptor`.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor, thisArg) {\n      return interceptor.call(thisArg, value);\n    }\n\n    /**\n     * Enables explicit method chaining on the wrapper object.\n     *\n     * @name chain\n     * @memberOf _\n     * @category Chain\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // without explicit chaining\n     * _(users).first();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // with explicit chaining\n     * _(users).chain()\n     *   .first()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chained sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @category Chain\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Creates a new array joining a wrapped array with any additional arrays\n     * and/or values.\n     *\n     * @name concat\n     * @memberOf _\n     * @category Chain\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var wrapped = _(array).concat(2, [3], [[4]]);\n     *\n     * console.log(wrapped.value());\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    var wrapperConcat = restParam(function(values) {\n      values = baseFlatten(values);\n      return this.thru(function(array) {\n        return arrayConcat(isArray(array) ? array : [toObject(array)], values);\n      });\n    });\n\n    /**\n     * Creates a clone of the chained sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @category Chain\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).map(function(value) {\n     *   return Math.pow(value, 2);\n     * });\n     *\n     * var other = [3, 4];\n     * var otherWrapped = wrapped.plant(other);\n     *\n     * otherWrapped.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * Reverses the wrapped array so the first element becomes the last, the\n     * second element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @category Chain\n     * @returns {Object} Returns the new reversed `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n\n      var interceptor = function(value) {\n        return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();\n      };\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(interceptor);\n    }\n\n    /**\n     * Produces the result of coercing the unwrapped value to a string.\n     *\n     * @name toString\n     * @memberOf _\n     * @category Chain\n     * @returns {string} Returns the coerced string value.\n     * @example\n     *\n     * _([1, 2, 3]).toString();\n     * // => '1,2,3'\n     */\n    function wrapperToString() {\n      return (this.value() + '');\n    }\n\n    /**\n     * Executes the chained sequence to extract the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @alias run, toJSON, valueOf\n     * @category Chain\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements corresponding to the given keys, or indexes,\n     * of `collection`. Keys may be specified as individual arguments or as arrays\n     * of keys.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {...(number|number[]|string|string[])} [props] The property names\n     *  or indexes of elements to pick, specified individually or in arrays.\n     * @returns {Array} Returns the new array of picked elements.\n     * @example\n     *\n     * _.at(['a', 'b', 'c'], [0, 2]);\n     * // => ['a', 'c']\n     *\n     * _.at(['barney', 'fred', 'pebbles'], 0, 2);\n     * // => ['barney', 'pebbles']\n     */\n    var at = restParam(function(collection, props) {\n      return baseAt(collection, baseFlatten(props));\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` through `iteratee`. The corresponding value\n     * of each key is the number of times the key was returned by `iteratee`.\n     * The `iteratee` is bound to `thisArg` and invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * If a property name is provided for `iteratee` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `iteratee` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([4.3, 6.1, 6.4], function(n) {\n     *   return Math.floor(n);\n     * });\n     * // => { '4': 1, '6': 2 }\n     *\n     * _.countBy([4.3, 6.1, 6.4], function(n) {\n     *   return this.floor(n);\n     * }, Math);\n     * // => { '4': 1, '6': 2 }\n     *\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * The predicate is bound to `thisArg` and invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias all\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': false },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // using the `_.matches` callback shorthand\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.every(users, 'active', false);\n     * // => true\n     *\n     * // using the `_.property` callback shorthand\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, thisArg) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {\n        predicate = undefined;\n      }\n      if (typeof predicate != 'function' || thisArg !== undefined) {\n        predicate = getCallback(predicate, thisArg, 3);\n      }\n      return func(collection, predicate);\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is bound to `thisArg` and\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias select\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {Array} Returns the new filtered array.\n     * @example\n     *\n     * _.filter([4, 5, 6], function(n) {\n     *   return n % 2 == 0;\n     * });\n     * // => [4, 6]\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // using the `_.matches` callback shorthand\n     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');\n     * // => ['barney']\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.pluck(_.filter(users, 'active', false), 'user');\n     * // => ['fred']\n     *\n     * // using the `_.property` callback shorthand\n     * _.pluck(_.filter(users, 'active'), 'user');\n     * // => ['barney']\n     */\n    function filter(collection, predicate, thisArg) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      predicate = getCallback(predicate, thisArg, 3);\n      return func(collection, predicate);\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is bound to `thisArg` and\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias detect\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to search.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.result(_.find(users, function(chr) {\n     *   return chr.age < 40;\n     * }), 'user');\n     * // => 'barney'\n     *\n     * // using the `_.matches` callback shorthand\n     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');\n     * // => 'pebbles'\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.result(_.find(users, 'active', false), 'user');\n     * // => 'fred'\n     *\n     * // using the `_.property` callback shorthand\n     * _.result(_.find(users, 'active'), 'user');\n     * // => 'barney'\n     */\n    var find = createFind(baseEach);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to search.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(baseEachRight, true);\n\n    /**\n     * Performs a deep comparison between each element in `collection` and the\n     * source object, returning the first element that has equivalent property\n     * values.\n     *\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by\n     * their own, not inherited, enumerable properties. For comparing a single\n     * own or inherited property value see `_.matchesProperty`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to search.\n     * @param {Object} source The object of property values to match.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');\n     * // => 'barney'\n     *\n     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');\n     * // => 'fred'\n     */\n    function findWhere(collection, source) {\n      return find(collection, baseMatches(source));\n    }\n\n    /**\n     * Iterates over elements of `collection` invoking `iteratee` for each element.\n     * The `iteratee` is bound to `thisArg` and invoked with three arguments:\n     * (value, index|key, collection). Iteratee functions may exit iteration early\n     * by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\" property\n     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`\n     * may be used for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @alias each\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Array|Object|string} Returns `collection`.\n     * @example\n     *\n     * _([1, 2]).forEach(function(n) {\n     *   console.log(n);\n     * }).value();\n     * // => logs each value from left to right and returns the array\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {\n     *   console.log(n, key);\n     * });\n     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)\n     */\n    var forEach = createForEach(arrayEach, baseEach);\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Array|Object|string} Returns `collection`.\n     * @example\n     *\n     * _([1, 2]).forEachRight(function(n) {\n     *   console.log(n);\n     * }).value();\n     * // => logs each value from right to left and returns the array\n     */\n    var forEachRight = createForEach(arrayEachRight, baseEachRight);\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` through `iteratee`. The corresponding value\n     * of each key is an array of the elements responsible for generating the key.\n     * The `iteratee` is bound to `thisArg` and invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * If a property name is provided for `iteratee` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `iteratee` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([4.2, 6.1, 6.4], function(n) {\n     *   return Math.floor(n);\n     * });\n     * // => { '4': [4.2], '6': [6.1, 6.4] }\n     *\n     * _.groupBy([4.2, 6.1, 6.4], function(n) {\n     *   return this.floor(n);\n     * }, Math);\n     * // => { '4': [4.2], '6': [6.1, 6.4] }\n     *\n     * // using the `_.property` callback shorthand\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        result[key] = [value];\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it is used as the offset\n     * from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @alias contains, include\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to search.\n     * @param {*} target The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.\n     * @returns {boolean} Returns `true` if a matching element is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');\n     * // => true\n     *\n     * _.includes('pebbles', 'eb');\n     * // => true\n     */\n    function includes(collection, target, fromIndex, guard) {\n      var length = collection ? getLength(collection) : 0;\n      if (!isLength(length)) {\n        collection = values(collection);\n        length = collection.length;\n      }\n      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {\n        fromIndex = 0;\n      } else {\n        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);\n      }\n      return (typeof collection == 'string' || !isArray(collection) && isString(collection))\n        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)\n        : (!!length && getIndexOf(collection, target, fromIndex) > -1);\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` through `iteratee`. The corresponding value\n     * of each key is the last element responsible for generating the key. The\n     * iteratee function is bound to `thisArg` and invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * If a property name is provided for `iteratee` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `iteratee` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var keyData = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.indexBy(keyData, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.indexBy(keyData, function(object) {\n     *   return String.fromCharCode(object.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.indexBy(keyData, function(object) {\n     *   return this.fromCharCode(object.code);\n     * }, String);\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     */\n    var indexBy = createAggregator(function(result, value, key) {\n      result[key] = value;\n    });\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `methodName` is a function it is\n     * invoked for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invoke([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invoke = restParam(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          isProp = isKey(path),\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);\n        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` through\n     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * If a property name is provided for `iteratee` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `iteratee` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,\n     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,\n     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,\n     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,\n     * `sum`, `uniq`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @alias collect\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function timesThree(n) {\n     *   return n * 3;\n     * }\n     *\n     * _.map([1, 2], timesThree);\n     * // => [3, 6]\n     *\n     * _.map({ 'a': 1, 'b': 2 }, timesThree);\n     * // => [3, 6] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // using the `_.property` callback shorthand\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee, thisArg) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      iteratee = getCallback(iteratee, thisArg, 3);\n      return func(collection, iteratee);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, while the second of which\n     * contains elements `predicate` returns falsey for. The predicate is bound\n     * to `thisArg` and invoked with three arguments: (value, index|key, collection).\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * _.partition([1, 2, 3], function(n) {\n     *   return n % 2;\n     * });\n     * // => [[1, 3], [2]]\n     *\n     * _.partition([1.2, 2.3, 3.4], function(n) {\n     *   return this.floor(n) % 2;\n     * }, Math);\n     * // => [[1.2, 3.4], [2.3]]\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * var mapper = function(array) {\n     *   return _.pluck(array, 'user');\n     * };\n     *\n     * // using the `_.matches` callback shorthand\n     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);\n     * // => [['pebbles'], ['barney', 'fred']]\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.map(_.partition(users, 'active', false), mapper);\n     * // => [['barney', 'pebbles'], ['fred']]\n     *\n     * // using the `_.property` callback shorthand\n     * _.map(_.partition(users, 'active'), mapper);\n     * // => [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Gets the property value of `path` from all elements in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Array|string} path The path of the property to pluck.\n     * @returns {Array} Returns the property values.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * _.pluck(users, 'user');\n     * // => ['barney', 'fred']\n     *\n     * var userIndex = _.indexBy(users, 'user');\n     * _.pluck(userIndex, 'age');\n     * // => [36, 40] (iteration order is not guaranteed)\n     */\n    function pluck(collection, path) {\n      return map(collection, property(path));\n    }\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` through `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not provided the first element of `collection` is used as the initial\n     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,\n     * and `sortByOrder`\n     *\n     * @static\n     * @memberOf _\n     * @alias foldl, inject\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.reduce([1, 2], function(total, n) {\n     *   return total + n;\n     * });\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {\n     *   result[key] = n * 3;\n     *   return result;\n     * }, {});\n     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)\n     */\n    var reduce = createReduce(arrayReduce, baseEach);\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @alias foldr\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    var reduceRight = createReduce(arrayReduceRight, baseEachRight);\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {Array} Returns the new filtered array.\n     * @example\n     *\n     * _.reject([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 0;\n     * });\n     * // => [1, 3]\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * // using the `_.matches` callback shorthand\n     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');\n     * // => ['barney']\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.pluck(_.reject(users, 'active', false), 'user');\n     * // => ['fred']\n     *\n     * // using the `_.property` callback shorthand\n     * _.pluck(_.reject(users, 'active'), 'user');\n     * // => ['barney']\n     */\n    function reject(collection, predicate, thisArg) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      predicate = getCallback(predicate, thisArg, 3);\n      return func(collection, function(value, index, collection) {\n        return !predicate(value, index, collection);\n      });\n    }\n\n    /**\n     * Gets a random element or `n` random elements from a collection.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to sample.\n     * @param {number} [n] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {*} Returns the random sample(s).\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     *\n     * _.sample([1, 2, 3, 4], 2);\n     * // => [3, 1]\n     */\n    function sample(collection, n, guard) {\n      if (guard ? isIterateeCall(collection, n, guard) : n == null) {\n        collection = toIterable(collection);\n        var length = collection.length;\n        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;\n      }\n      var index = -1,\n          result = toArray(collection),\n          length = result.length,\n          lastIndex = length - 1;\n\n      n = nativeMin(n < 0 ? 0 : (+n || 0), length);\n      while (++index < n) {\n        var rand = baseRandom(index, lastIndex),\n            value = result[rand];\n\n        result[rand] = result[index];\n        result[index] = value;\n      }\n      result.length = n;\n      return result;\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      return sample(collection, POSITIVE_INFINITY);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the size of `collection`.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      var length = collection ? getLength(collection) : 0;\n      return isLength(length) ? length : keys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * The function returns as soon as it finds a passing value and does not iterate\n     * over the entire collection. The predicate is bound to `thisArg` and invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias any\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // using the `_.matches` callback shorthand\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.some(users, 'active', false);\n     * // => true\n     *\n     * // using the `_.property` callback shorthand\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, thisArg) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {\n        predicate = undefined;\n      }\n      if (typeof predicate != 'function' || thisArg !== undefined) {\n        predicate = getCallback(predicate, thisArg, 3);\n      }\n      return func(collection, predicate);\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection through `iteratee`. This method performs\n     * a stable sort, that is, it preserves the original sort order of equal elements.\n     * The `iteratee` is bound to `thisArg` and invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * If a property name is provided for `iteratee` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `iteratee` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * _.sortBy([1, 2, 3], function(n) {\n     *   return Math.sin(n);\n     * });\n     * // => [3, 1, 2]\n     *\n     * _.sortBy([1, 2, 3], function(n) {\n     *   return this.sin(n);\n     * }, Math);\n     * // => [3, 1, 2]\n     *\n     * var users = [\n     *   { 'user': 'fred' },\n     *   { 'user': 'pebbles' },\n     *   { 'user': 'barney' }\n     * ];\n     *\n     * // using the `_.property` callback shorthand\n     * _.pluck(_.sortBy(users, 'user'), 'user');\n     * // => ['barney', 'fred', 'pebbles']\n     */\n    function sortBy(collection, iteratee, thisArg) {\n      if (collection == null) {\n        return [];\n      }\n      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {\n        iteratee = undefined;\n      }\n      var index = -1;\n      iteratee = getCallback(iteratee, thisArg, 3);\n\n      var result = baseMap(collection, function(value, key, collection) {\n        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };\n      });\n      return baseSortBy(result, compareAscending);\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it can sort by multiple iteratees\n     * or property names.\n     *\n     * If a property name is provided for an iteratee the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If an object is provided for an iteratee the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees\n     *  The iteratees to sort by, specified as individual values or arrays of values.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 42 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.map(_.sortByAll(users, ['user', 'age']), _.values);\n     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]\n     *\n     * _.map(_.sortByAll(users, 'user', function(chr) {\n     *   return Math.floor(chr.age / 10);\n     * }), _.values);\n     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\n     */\n    var sortByAll = restParam(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var guard = iteratees[2];\n      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {\n        iteratees.length = 1;\n      }\n      return baseSortByOrder(collection, baseFlatten(iteratees), []);\n    });\n\n    /**\n     * This method is like `_.sortByAll` except that it allows specifying the\n     * sort orders of the iteratees to sort by. If `orders` is unspecified, all\n     * values are sorted in ascending order. Otherwise, a value is sorted in\n     * ascending order if its corresponding order is \"asc\", and descending if \"desc\".\n     *\n     * If a property name is provided for an iteratee the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If an object is provided for an iteratee the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {boolean[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 42 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // sort by `user` in ascending order and by `age` in descending order\n     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);\n     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\n     */\n    function sortByOrder(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (guard && isIterateeCall(iteratees, orders, guard)) {\n        orders = undefined;\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseSortByOrder(collection, iteratees, orders);\n    }\n\n    /**\n     * Performs a deep comparison between each element in `collection` and the\n     * source object, returning an array of all elements that have equivalent\n     * property values.\n     *\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by\n     * their own, not inherited, enumerable properties. For comparing a single\n     * own or inherited property value see `_.matchesProperty`.\n     *\n     * @static\n     * @memberOf _\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to search.\n     * @param {Object} source The object of property values to match.\n     * @returns {Array} Returns the new filtered array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },\n     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }\n     * ];\n     *\n     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');\n     * // => ['barney']\n     *\n     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');\n     * // => ['fred']\n     */\n    function where(collection, source) {\n      return filter(collection, baseMatches(source));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the number of milliseconds that have elapsed since the Unix epoch\n     * (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @category Date\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => logs the number of milliseconds it took for the deferred function to be invoked\n     */\n    var now = nativeNow || function() {\n      return new Date().getTime();\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it is called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => logs 'done saving!' after the two async saves have completed\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        if (typeof n == 'function') {\n          var temp = n;\n          n = func;\n          func = temp;\n        } else {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n      }\n      n = nativeIsFinite(n = +n) ? n : 0;\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that accepts up to `n` arguments ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      if (guard && isIterateeCall(func, n, guard)) {\n        n = undefined;\n      }\n      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);\n      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it is called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery('#add').on('click', _.before(5, addContactToList));\n     * // => allows adding up to 4 contacts to the list\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        if (typeof n == 'function') {\n          var temp = n;\n          n = func;\n          func = temp;\n        } else {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n      }\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and prepends any additional `_.bind` arguments to those provided to the\n     * bound function.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind` this method does not set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var greet = function(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * };\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // using placeholders\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = restParam(function(func, thisArg, partials) {\n      var bitmask = BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, bind.placeholder);\n        bitmask |= PARTIAL_FLAG;\n      }\n      return createWrapper(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method. Method names may be specified as individual arguments or as arrays\n     * of method names. If no method names are provided all enumerable function\n     * properties, own and inherited, of `object` are bound.\n     *\n     * **Note:** This method does not set the \"length\" property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} [methodNames] The object method names to bind,\n     *  specified as individual method names or arrays of method names.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'onClick': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view);\n     * jQuery('#docs').on('click', view.onClick);\n     * // => logs 'clicked docs' when the element is clicked\n     */\n    var bindAll = restParam(function(object, methodNames) {\n      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);\n\n      var index = -1,\n          length = methodNames.length;\n\n      while (++index < length) {\n        var key = methodNames[index];\n        object[key] = createWrapper(object[key], BIND_FLAG, object);\n      }\n      return object;\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` and prepends\n     * any additional `_.bindKey` arguments to those provided to the bound function.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist.\n     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Object} object The object the method belongs to.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // using placeholders\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = restParam(function(object, key, partials) {\n      var bitmask = BIND_FLAG | BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, bindKey.placeholder);\n        bitmask |= PARTIAL_FLAG;\n      }\n      return createWrapper(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts one or more arguments of `func` that when\n     * called either invokes `func` returning its result, if all `func` arguments\n     * have been provided, or returns a function that accepts one or more of the\n     * remaining `func` arguments, and so on. The arity of `func` may be specified\n     * if `func.length` is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method does not set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // using placeholders\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    var curry = createCurry(CURRY_FLAG);\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method does not set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // using placeholders\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    var curryRight = createCurry(CURRY_RIGHT_FLAG);\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed invocations. Provide an options object to indicate that `func`\n     * should be invoked on the leading and/or trailing edge of the `wait` timeout.\n     * Subsequent calls to the debounced function return the result of the last\n     * `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked\n     * on the trailing edge of the timeout only if the the debounced function is\n     * invoked more than once during the `wait` timeout.\n     *\n     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options] The options object.\n     * @param {boolean} [options.leading=false] Specify invoking on the leading\n     *  edge of the timeout.\n     * @param {number} [options.maxWait] The maximum time `func` is allowed to be\n     *  delayed before it is invoked.\n     * @param {boolean} [options.trailing=true] Specify invoking on the trailing\n     *  edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // avoid costly calculations while the window size is in flux\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls\n     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // ensure `batchLog` is invoked once after 1 second of debounced calls\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', _.debounce(batchLog, 250, {\n     *   'maxWait': 1000\n     * }));\n     *\n     * // cancel a debounced call\n     * var todoChanges = _.debounce(batchLog, 1000);\n     * Object.observe(models.todo, todoChanges);\n     *\n     * Object.observe(models, function(changes) {\n     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {\n     *     todoChanges.cancel();\n     *   }\n     * }, ['delete']);\n     *\n     * // ...at some point `models.todo` is changed\n     * models.todo.completed = true;\n     *\n     * // ...before 1 second has passed `models.todo` is deleted\n     * // which cancels the debounced `todoChanges` call\n     * delete models.todo;\n     */\n    function debounce(func, wait, options) {\n      var args,\n          maxTimeoutId,\n          result,\n          stamp,\n          thisArg,\n          timeoutId,\n          trailingCall,\n          lastCalled = 0,\n          maxWait = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = wait < 0 ? 0 : (+wait || 0);\n      if (options === true) {\n        var leading = true;\n        trailing = false;\n      } else if (isObject(options)) {\n        leading = !!options.leading;\n        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function cancel() {\n        if (timeoutId) {\n          clearTimeout(timeoutId);\n        }\n        if (maxTimeoutId) {\n          clearTimeout(maxTimeoutId);\n        }\n        lastCalled = 0;\n        maxTimeoutId = timeoutId = trailingCall = undefined;\n      }\n\n      function complete(isCalled, id) {\n        if (id) {\n          clearTimeout(id);\n        }\n        maxTimeoutId = timeoutId = trailingCall = undefined;\n        if (isCalled) {\n          lastCalled = now();\n          result = func.apply(thisArg, args);\n          if (!timeoutId && !maxTimeoutId) {\n            args = thisArg = undefined;\n          }\n        }\n      }\n\n      function delayed() {\n        var remaining = wait - (now() - stamp);\n        if (remaining <= 0 || remaining > wait) {\n          complete(trailingCall, maxTimeoutId);\n        } else {\n          timeoutId = setTimeout(delayed, remaining);\n        }\n      }\n\n      function maxDelayed() {\n        complete(trailing, timeoutId);\n      }\n\n      function debounced() {\n        args = arguments;\n        stamp = now();\n        thisArg = this;\n        trailingCall = trailing && (timeoutId || !leading);\n\n        if (maxWait === false) {\n          var leadingCall = leading && !timeoutId;\n        } else {\n          if (!maxTimeoutId && !leading) {\n            lastCalled = stamp;\n          }\n          var remaining = maxWait - (stamp - lastCalled),\n              isCalled = remaining <= 0 || remaining > maxWait;\n\n          if (isCalled) {\n            if (maxTimeoutId) {\n              maxTimeoutId = clearTimeout(maxTimeoutId);\n            }\n            lastCalled = stamp;\n            result = func.apply(thisArg, args);\n          }\n          else if (!maxTimeoutId) {\n            maxTimeoutId = setTimeout(maxDelayed, remaining);\n          }\n        }\n        if (isCalled && timeoutId) {\n          timeoutId = clearTimeout(timeoutId);\n        }\n        else if (!timeoutId && wait !== maxWait) {\n          timeoutId = setTimeout(delayed, wait);\n        }\n        if (leadingCall) {\n          isCalled = true;\n          result = func.apply(thisArg, args);\n        }\n        if (isCalled && !timeoutId && !maxTimeoutId) {\n          args = thisArg = undefined;\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it is invoked.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke the function with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // logs 'deferred' after one or more milliseconds\n     */\n    var defer = restParam(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it is invoked.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke the function with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => logs 'later' after one second\n     */\n    var delay = restParam(function(func, wait, args) {\n      return baseDelay(func, wait, args);\n    });\n\n    /**\n     * Creates a function that returns the result of invoking the provided\n     * functions with the `this` binding of the created function, where each\n     * successive invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {...Function} [funcs] Functions to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow(_.add, square);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the provided functions from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @alias backflow, compose\n     * @category Function\n     * @param {...Function} [funcs] Functions to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight(square, _.add);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is coerced to a string and used as the\n     * cache key. The `func` is invoked with the `this` binding of the memoized\n     * function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoizing function.\n     * @example\n     *\n     * var upperCase = _.memoize(function(string) {\n     *   return string.toUpperCase();\n     * });\n     *\n     * upperCase('fred');\n     * // => 'FRED'\n     *\n     * // modifying the result cache\n     * upperCase.cache.set('fred', 'BARNEY');\n     * upperCase('fred');\n     * // => 'BARNEY'\n     *\n     * // replacing `_.memoize.Cache`\n     * var object = { 'user': 'fred' };\n     * var other = { 'user': 'barney' };\n     * var identity = _.memoize(_.identity);\n     *\n     * identity(object);\n     * // => { 'user': 'fred' }\n     * identity(other);\n     * // => { 'user': 'fred' }\n     *\n     * _.memoize.Cache = WeakMap;\n     * var identity = _.memoize(_.identity);\n     *\n     * identity(object);\n     * // => { 'user': 'fred' }\n     * identity(other);\n     * // => { 'user': 'barney' }\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result);\n        return result;\n      };\n      memoized.cache = new memoize.Cache;\n      return memoized;\n    }\n\n    /**\n     * Creates a function that runs each argument through a corresponding\n     * transform function.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms] The functions to transform\n     * arguments, specified as individual functions or arrays of functions.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var modded = _.modArgs(function(x, y) {\n     *   return [x, y];\n     * }, square, doubled);\n     *\n     * modded(1, 2);\n     * // => [1, 4]\n     *\n     * modded(5, 10);\n     * // => [25, 20]\n     */\n    var modArgs = restParam(function(func, transforms) {\n      transforms = baseFlatten(transforms);\n      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = transforms.length;\n      return restParam(function(args) {\n        var index = nativeMin(args.length, length);\n        while (index--) {\n          args[index] = transforms[index](args[index]);\n        }\n        return func.apply(this, args);\n      });\n    });\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        return !predicate.apply(this, arguments);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first call. The `func` is invoked\n     * with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // `initialize` invokes `createApplication` once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with `partial` arguments prepended\n     * to those provided to the new function. This method is like `_.bind` except\n     * it does **not** alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method does not set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * var greet = function(greeting, name) {\n     *   return greeting + ' ' + name;\n     * };\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // using placeholders\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = createPartial(PARTIAL_FLAG);\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to those provided to the new function.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method does not set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * var greet = function(greeting, name) {\n     *   return greeting + ' ' + name;\n     * };\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // using placeholders\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified indexes where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes,\n     *  specified as individual indexes or arrays of indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, 2, 0, 1);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     *\n     * var map = _.rearg(_.map, [1, 0]);\n     * map(function(n) {\n     *   return n * 3;\n     * }, [1, 2, 3]);\n     * // => [3, 6, 9]\n     */\n    var rearg = restParam(function(func, indexes) {\n      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as an array.\n     *\n     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.restParam(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function restParam(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            rest = Array(length);\n\n        while (++index < length) {\n          rest[index] = args[start + index];\n        }\n        switch (start) {\n          case 0: return func.call(this, rest);\n          case 1: return func.call(this, args[0], rest);\n          case 2: return func.call(this, args[0], args[1], rest);\n        }\n        var otherArgs = Array(start + 1);\n        index = -1;\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = rest;\n        return func.apply(this, otherArgs);\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the created\n     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).\n     *\n     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * // with a Promise\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function(array) {\n        return func.apply(this, array);\n      };\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed invocations. Provide an options object to indicate\n     * that `func` should be invoked on the leading and/or trailing edge of the\n     * `wait` timeout. Subsequent calls to the throttled function return the\n     * result of the last `func` call.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked\n     * on the trailing edge of the timeout only if the the throttled function is\n     * invoked more than once during the `wait` timeout.\n     *\n     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options] The options object.\n     * @param {boolean} [options.leading=true] Specify invoking on the leading\n     *  edge of the timeout.\n     * @param {boolean} [options.trailing=true] Specify invoking on the trailing\n     *  edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // avoid excessively updating the position while scrolling\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes\n     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {\n     *   'trailing': false\n     * }));\n     *\n     * // cancel a trailing throttled call\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (options === false) {\n        leading = false;\n      } else if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });\n    }\n\n    /**\n     * Creates a function that provides `value` to the wrapper function as its\n     * first argument. Any additional arguments provided to the function are\n     * appended to those provided to the wrapper function. The wrapper is invoked\n     * with the `this` binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} wrapper The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      wrapper = wrapper == null ? identity : wrapper;\n      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,\n     * otherwise they are assigned by reference. If `customizer` is provided it is\n     * invoked to produce the cloned values. If `customizer` returns `undefined`\n     * cloning is handled by the method instead. The `customizer` is bound to\n     * `thisArg` and invoked with two argument; (value [, index|key, object]).\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).\n     * The enumerable properties of `arguments` objects and objects created by\n     * constructors other than `Object` are cloned to plain `Object` objects. An\n     * empty object is returned for uncloneable values such as functions, DOM nodes,\n     * Maps, Sets, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @param {Function} [customizer] The function to customize cloning values.\n     * @param {*} [thisArg] The `this` binding of `customizer`.\n     * @returns {*} Returns the cloned value.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * var shallow = _.clone(users);\n     * shallow[0] === users[0];\n     * // => true\n     *\n     * var deep = _.clone(users, true);\n     * deep[0] === users[0];\n     * // => false\n     *\n     * // using a customizer callback\n     * var el = _.clone(document.body, function(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * });\n     *\n     * el === document.body\n     * // => false\n     * el.nodeName\n     * // => BODY\n     * el.childNodes.length;\n     * // => 0\n     */\n    function clone(value, isDeep, customizer, thisArg) {\n      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {\n        isDeep = false;\n      }\n      else if (typeof isDeep == 'function') {\n        thisArg = customizer;\n        customizer = isDeep;\n        isDeep = false;\n      }\n      return typeof customizer == 'function'\n        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))\n        : baseClone(value, isDeep);\n    }\n\n    /**\n     * Creates a deep clone of `value`. If `customizer` is provided it is invoked\n     * to produce the cloned values. If `customizer` returns `undefined` cloning\n     * is handled by the method instead. The `customizer` is bound to `thisArg`\n     * and invoked with two argument; (value [, index|key, object]).\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).\n     * The enumerable properties of `arguments` objects and objects created by\n     * constructors other than `Object` are cloned to plain `Object` objects. An\n     * empty object is returned for uncloneable values such as functions, DOM nodes,\n     * Maps, Sets, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to deep clone.\n     * @param {Function} [customizer] The function to customize cloning values.\n     * @param {*} [thisArg] The `this` binding of `customizer`.\n     * @returns {*} Returns the deep cloned value.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * var deep = _.cloneDeep(users);\n     * deep[0] === users[0];\n     * // => false\n     *\n     * // using a customizer callback\n     * var el = _.cloneDeep(document.body, function(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * });\n     *\n     * el === document.body\n     * // => false\n     * el.nodeName\n     * // => BODY\n     * el.childNodes.length;\n     * // => 20\n     */\n    function cloneDeep(value, customizer, thisArg) {\n      return typeof customizer == 'function'\n        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))\n        : baseClone(value, true);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    function gt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    function gte(value, other) {\n      return value >= other;\n    }\n\n    /**\n     * Checks if `value` is classified as an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    function isArguments(value) {\n      return isObjectLike(value) && isArrayLike(value) &&\n        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');\n    }\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(function() { return arguments; }());\n     * // => false\n     */\n    var isArray = nativeIsArray || function(value) {\n      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;\n    };\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    function isDate(value) {\n      return isObjectLike(value) && objToString.call(value) == dateTag;\n    }\n\n    /**\n     * Checks if `value` is a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is empty. A value is considered empty unless it is an\n     * `arguments` object, array, string, or jQuery-like collection with a length\n     * greater than `0` or an object with own enumerable properties.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {Array|Object|string} value The value to inspect.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (value == null) {\n        return true;\n      }\n      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||\n          (isObjectLike(value) && isFunction(value.splice)))) {\n        return !value.length;\n      }\n      return !keys(value).length;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent. If `customizer` is provided it is invoked to compare values.\n     * If `customizer` returns `undefined` comparisons are handled by the method\n     * instead. The `customizer` is bound to `thisArg` and invoked with three\n     * arguments: (value, other [, index|key]).\n     *\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by\n     * their own, not inherited, enumerable properties. Functions and DOM nodes\n     * are **not** supported. Provide a customizer function to extend support\n     * for comparing other values.\n     *\n     * @static\n     * @memberOf _\n     * @alias eq\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize value comparisons.\n     * @param {*} [thisArg] The `this` binding of `customizer`.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'user': 'fred' };\n     * var other = { 'user': 'fred' };\n     *\n     * object == other;\n     * // => false\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * // using a customizer callback\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqual(array, other, function(value, other) {\n     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {\n     *     return true;\n     *   }\n     * });\n     * // => true\n     */\n    function isEqual(value, other, customizer, thisArg) {\n      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(10);\n     * // => true\n     *\n     * _.isFinite('10');\n     * // => false\n     *\n     * _.isFinite(true);\n     * // => false\n     *\n     * _.isFinite(Object(10));\n     * // => false\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in older versions of Chrome and Safari which return 'function' for regexes\n      // and Safari 8 equivalents which return 'object' for typed array constructors.\n      return isObject(value) && objToString.call(value) == funcTag;\n    }\n\n    /**\n     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(1);\n     * // => false\n     */\n    function isObject(value) {\n      // Avoid a V8 JIT bug in Chrome 19-20.\n      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n      var type = typeof value;\n      return !!value && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Performs a deep comparison between `object` and `source` to determine if\n     * `object` contains equivalent property values. If `customizer` is provided\n     * it is invoked to compare values. If `customizer` returns `undefined`\n     * comparisons are handled by the method instead. The `customizer` is bound\n     * to `thisArg` and invoked with three arguments: (value, other, index|key).\n     *\n     * **Note:** This method supports comparing properties of arrays, booleans,\n     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions\n     * and DOM nodes are **not** supported. Provide a customizer function to extend\n     * support for comparing other values.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize value comparisons.\n     * @param {*} [thisArg] The `this` binding of `customizer`.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'user': 'fred', 'age': 40 };\n     *\n     * _.isMatch(object, { 'age': 40 });\n     * // => true\n     *\n     * _.isMatch(object, { 'age': 36 });\n     * // => false\n     *\n     * // using a customizer callback\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatch(object, source, function(value, other) {\n     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;\n     * });\n     * // => true\n     */\n    function isMatch(object, source, customizer, thisArg) {\n      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;\n      return baseIsMatch(object, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)\n     * which returns `true` for `undefined` and other non-numeric values.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a native function.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (value == null) {\n        return false;\n      }\n      if (isFunction(value)) {\n        return reIsNative.test(fnToString.call(value));\n      }\n      return isObjectLike(value) && reIsHostCtor.test(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified\n     * as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n     * @example\n     *\n     * _.isNumber(8.4);\n     * // => true\n     *\n     * _.isNumber(NaN);\n     * // => true\n     *\n     * _.isNumber('8.4');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * **Note:** This method assumes objects created by the `Object` constructor\n     * have no inherited enumerable properties.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      var Ctor;\n\n      // Exit early for non `Object` objects.\n      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||\n          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {\n        return false;\n      }\n      // IE < 9 iterates inherited properties before own properties. If the first\n      // iterated property is an object's own property then there are no inherited\n      // enumerable properties.\n      var result;\n      // In most environments an object's own properties are iterated before\n      // its inherited properties. If the last iterated property is an object's\n      // own property then there are no inherited enumerable properties.\n      baseForIn(value, function(subValue, key) {\n        result = key;\n      });\n      return result === undefined || hasOwnProperty.call(value, result);\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    function isRegExp(value) {\n      return isObject(value) && objToString.call(value) == regexpTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    function isTypedArray(value) {\n      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];\n    }\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    function lt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    function lte(value, other) {\n      return value <= other;\n    }\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * (function() {\n     *   return _.toArray(arguments).slice(1);\n     * }(1, 2, 3));\n     * // => [2, 3]\n     */\n    function toArray(value) {\n      var length = value ? getLength(value) : 0;\n      if (!isLength(length)) {\n        return values(value);\n      }\n      if (!length) {\n        return [];\n      }\n      return arrayCopy(value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable\n     * properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return baseCopy(value, keysIn(value));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Recursively merges own enumerable properties of the source object(s), that\n     * don't resolve to `undefined` into the destination object. Subsequent sources\n     * overwrite property assignments of previous sources. If `customizer` is\n     * provided it is invoked to produce the merged values of the destination and\n     * source properties. If `customizer` returns `undefined` merging is handled\n     * by the method instead. The `customizer` is bound to `thisArg` and invoked\n     * with five arguments: (objectValue, sourceValue, key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {*} [thisArg] The `this` binding of `customizer`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var users = {\n     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]\n     * };\n     *\n     * var ages = {\n     *   'data': [{ 'age': 36 }, { 'age': 40 }]\n     * };\n     *\n     * _.merge(users, ages);\n     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }\n     *\n     * // using a customizer callback\n     * var object = {\n     *   'fruits': ['apple'],\n     *   'vegetables': ['beet']\n     * };\n     *\n     * var other = {\n     *   'fruits': ['banana'],\n     *   'vegetables': ['carrot']\n     * };\n     *\n     * _.merge(object, other, function(a, b) {\n     *   if (_.isArray(a)) {\n     *     return a.concat(b);\n     *   }\n     * });\n     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }\n     */\n    var merge = createAssigner(baseMerge);\n\n    /**\n     * Assigns own enumerable properties of source object(s) to the destination\n     * object. Subsequent sources overwrite property assignments of previous sources.\n     * If `customizer` is provided it is invoked to produce the assigned values.\n     * The `customizer` is bound to `thisArg` and invoked with five arguments:\n     * (objectValue, sourceValue, key, object, source).\n     *\n     * **Note:** This method mutates `object` and is based on\n     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).\n     *\n     * @static\n     * @memberOf _\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {*} [thisArg] The `this` binding of `customizer`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });\n     * // => { 'user': 'fred', 'age': 40 }\n     *\n     * // using a customizer callback\n     * var defaults = _.partialRight(_.assign, function(value, other) {\n     *   return _.isUndefined(value) ? other : value;\n     * });\n     *\n     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });\n     * // => { 'user': 'barney', 'age': 36 }\n     */\n    var assign = createAssigner(function(object, source, customizer) {\n      return customizer\n        ? assignWith(object, source, customizer)\n        : baseAssign(object, source);\n    });\n\n    /**\n     * Creates an object that inherits from the given `prototype` object. If a\n     * `properties` object is provided its own enumerable properties are assigned\n     * to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties, guard) {\n      var result = baseCreate(prototype);\n      if (guard && isIterateeCall(prototype, properties, guard)) {\n        properties = undefined;\n      }\n      return properties ? baseAssign(result, properties) : result;\n    }\n\n    /**\n     * Assigns own enumerable properties of source object(s) to the destination\n     * object for all destination properties that resolve to `undefined`. Once a\n     * property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });\n     * // => { 'user': 'barney', 'age': 36 }\n     */\n    var defaults = createDefaults(assign, assignDefaults);\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });\n     * // => { 'user': { 'name': 'barney', 'age': 36 } }\n     *\n     */\n    var defaultsDeep = createDefaults(merge, mergeDefaults);\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to search.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(chr) {\n     *   return chr.age < 40;\n     * });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // using the `_.matches` callback shorthand\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.findKey(users, 'active', false);\n     * // => 'fred'\n     *\n     * // using the `_.property` callback shorthand\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    var findKey = createFindKey(baseForOwn);\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * If a property name is provided for `predicate` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `predicate` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to search.\n     * @param {Function|Object|string} [predicate=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(chr) {\n     *   return chr.age < 40;\n     * });\n     * // => returns `pebbles` assuming `_.findKey` returns `barney`\n     *\n     * // using the `_.matches` callback shorthand\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // using the `_.matchesProperty` callback shorthand\n     * _.findLastKey(users, 'active', false);\n     * // => 'fred'\n     *\n     * // using the `_.property` callback shorthand\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    var findLastKey = createFindKey(baseForOwnRight);\n\n    /**\n     * Iterates over own and inherited enumerable properties of an object invoking\n     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)\n     */\n    var forIn = createForIn(baseFor);\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'\n     */\n    var forInRight = createForIn(baseForRight);\n\n    /**\n     * Iterates over own enumerable properties of an object invoking `iteratee`\n     * for each property. The `iteratee` is bound to `thisArg` and invoked with\n     * three arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => logs 'a' and 'b' (iteration order is not guaranteed)\n     */\n    var forOwn = createForOwn(baseForOwn);\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'\n     */\n    var forOwnRight = createForOwn(baseForOwnRight);\n\n    /**\n     * Creates an array of function property names from all enumerable properties,\n     * own and inherited, of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @alias methods\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the new array of property names.\n     * @example\n     *\n     * _.functions(_);\n     * // => ['after', 'ary', 'assign', ...]\n     */\n    function functions(object) {\n      return baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the property value at `path` of `object`. If the resolved value is\n     * `undefined` the `defaultValue` is used in its place.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': { 'c': 3 } } };\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b.c');\n     * // => true\n     *\n     * _.has(object, ['a', 'b', 'c']);\n     * // => true\n     */\n    function has(object, path) {\n      if (object == null) {\n        return false;\n      }\n      var result = hasOwnProperty.call(object, path);\n      if (!result && !isKey(path)) {\n        path = toPath(path);\n        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n        if (object == null) {\n          return false;\n        }\n        path = last(path);\n        result = hasOwnProperty.call(object, path);\n      }\n      return result || (isLength(object.length) && isIndex(path, object.length) &&\n        (isArray(object) || isArguments(object)));\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite property\n     * assignments of previous values unless `multiValue` is `true`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {boolean} [multiValue] Allow multiple values per key.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     *\n     * // with `multiValue`\n     * _.invert(object, true);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function invert(object, multiValue, guard) {\n      if (guard && isIterateeCall(object, multiValue, guard)) {\n        multiValue = undefined;\n      }\n      var index = -1,\n          props = keys(object),\n          length = props.length,\n          result = {};\n\n      while (++index < length) {\n        var key = props[index],\n            value = object[key];\n\n        if (multiValue) {\n          if (hasOwnProperty.call(result, value)) {\n            result[value].push(key);\n          } else {\n            result[value] = [key];\n          }\n        }\n        else {\n          result[value] = key;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    var keys = !nativeKeys ? shimKeys : function(object) {\n      var Ctor = object == null ? undefined : object.constructor;\n      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||\n          (typeof object != 'function' && isArrayLike(object))) {\n        return shimKeys(object);\n      }\n      return isObject(object) ? nativeKeys(object) : [];\n    };\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      if (object == null) {\n        return [];\n      }\n      if (!isObject(object)) {\n        object = Object(object);\n      }\n      var length = object.length;\n      length = (length && isLength(length) &&\n        (isArray(object) || isArguments(object)) && length) || 0;\n\n      var Ctor = object.constructor,\n          index = -1,\n          isProto = typeof Ctor == 'function' && Ctor.prototype === object,\n          result = Array(length),\n          skipIndexes = length > 0;\n\n      while (++index < length) {\n        result[index] = (index + '');\n      }\n      for (var key in object) {\n        if (!(skipIndexes && isIndex(key, length)) &&\n            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * property of `object` through `iteratee`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Object} Returns the new mapped object.\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    var mapKeys = createObjectMapper(true);\n\n    /**\n     * Creates an object with the same keys as `object` and values generated by\n     * running each own enumerable property of `object` through `iteratee`. The\n     * iteratee function is bound to `thisArg` and invoked with three arguments:\n     * (value, key, object).\n     *\n     * If a property name is provided for `iteratee` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `iteratee` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\n     *  per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Object} Returns the new mapped object.\n     * @example\n     *\n     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {\n     *   return n * 3;\n     * });\n     * // => { 'a': 3, 'b': 6 }\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * // using the `_.property` callback shorthand\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    var mapValues = createObjectMapper();\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable properties of `object` that are not omitted.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function|...(string|string[])} [predicate] The function invoked per\n     *  iteration or property names to omit, specified as individual property\n     *  names or arrays of property names.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'user': 'fred', 'age': 40 };\n     *\n     * _.omit(object, 'age');\n     * // => { 'user': 'fred' }\n     *\n     * _.omit(object, _.isNumber);\n     * // => { 'user': 'fred' }\n     */\n    var omit = restParam(function(object, props) {\n      if (object == null) {\n        return {};\n      }\n      if (typeof props[0] != 'function') {\n        var props = arrayMap(baseFlatten(props), String);\n        return pickByArray(object, baseDifference(keysIn(object), props));\n      }\n      var predicate = bindCallback(props[0], props[1], 3);\n      return pickByCallback(object, function(value, key, object) {\n        return !predicate(value, key, object);\n      });\n    });\n\n    /**\n     * Creates a two dimensional array of the key-value pairs for `object`,\n     * e.g. `[[key1, value1], [key2, value2]]`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the new array of key-value pairs.\n     * @example\n     *\n     * _.pairs({ 'barney': 36, 'fred': 40 });\n     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)\n     */\n    function pairs(object) {\n      object = toObject(object);\n\n      var index = -1,\n          props = keys(object),\n          length = props.length,\n          result = Array(length);\n\n      while (++index < length) {\n        var key = props[index];\n        result[index] = [key, object[key]];\n      }\n      return result;\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties. Property\n     * names may be specified as individual arguments or as arrays of property\n     * names. If `predicate` is provided it is invoked for each property of `object`\n     * picking the properties `predicate` returns truthy for. The predicate is\n     * bound to `thisArg` and invoked with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function|...(string|string[])} [predicate] The function invoked per\n     *  iteration or property names to pick, specified as individual property\n     *  names or arrays of property names.\n     * @param {*} [thisArg] The `this` binding of `predicate`.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'user': 'fred', 'age': 40 };\n     *\n     * _.pick(object, 'user');\n     * // => { 'user': 'fred' }\n     *\n     * _.pick(object, _.isString);\n     * // => { 'user': 'fred' }\n     */\n    var pick = restParam(function(object, props) {\n      if (object == null) {\n        return {};\n      }\n      return typeof props[0] == 'function'\n        ? pickByCallback(object, bindCallback(props[0], props[1], 3))\n        : pickByArray(object, baseFlatten(props));\n    });\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a function\n     * it is invoked with the `this` binding of its parent object and its result\n     * is returned.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a.b.c', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a.b.c', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      var result = object == null ? undefined : object[path];\n      if (result === undefined) {\n        if (object != null && !isKey(path, object)) {\n          path = toPath(path);\n          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n          result = object == null ? undefined : object[last(path)];\n        }\n        result = result === undefined ? defaultValue : result;\n      }\n      return isFunction(result) ? result.call(object) : result;\n    }\n\n    /**\n     * Sets the property value of `path` on `object`. If a portion of `path`\n     * does not exist it is created.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to augment.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, 'x[0].y.z', 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      if (object == null) {\n        return object;\n      }\n      var pathKey = (path + '');\n      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = path[index];\n        if (isObject(nested)) {\n          if (index == lastIndex) {\n            nested[key] = value;\n          } else if (nested[key] == null) {\n            nested[key] = isIndex(path[index + 1]) ? [] : {};\n          }\n        }\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own enumerable\n     * properties through `iteratee`, with each invocation potentially mutating\n     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked\n     * with four arguments: (accumulator, value, key, object). Iteratee functions\n     * may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Array|Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * });\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {\n     *   result[key] = n * 3;\n     * });\n     * // => { 'a': 3, 'b': 6 }\n     */\n    function transform(object, iteratee, accumulator, thisArg) {\n      var isArr = isArray(object) || isTypedArray(object);\n      iteratee = getCallback(iteratee, thisArg, 4);\n\n      if (accumulator == null) {\n        if (isArr || isObject(object)) {\n          var Ctor = object.constructor;\n          if (isArr) {\n            accumulator = isArray(object) ? new Ctor : [];\n          } else {\n            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);\n          }\n        } else {\n          accumulator = {};\n        }\n      }\n      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Creates an array of the own enumerable property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return baseValues(object, keys(object));\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property values\n     * of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Checks if `n` is between `start` and up to but not including, `end`. If\n     * `end` is not specified it is set to `start` with `start` then set to `0`.\n     *\n     * @static\n     * @memberOf _\n     * @category Number\n     * @param {number} n The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     */\n    function inRange(value, start, end) {\n      start = +start || 0;\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = +end || 0;\n      }\n      return value >= nativeMin(start, end) && value < nativeMax(start, end);\n    }\n\n    /**\n     * Produces a random number between `min` and `max` (inclusive). If only one\n     * argument is provided a number between `0` and the given number is returned.\n     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point\n     * number is returned instead of an integer.\n     *\n     * @static\n     * @memberOf _\n     * @category Number\n     * @param {number} [min=0] The minimum possible value.\n     * @param {number} [max=1] The maximum possible value.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(min, max, floating) {\n      if (floating && isIterateeCall(min, max, floating)) {\n        max = floating = undefined;\n      }\n      var noMin = min == null,\n          noMax = max == null;\n\n      if (floating == null) {\n        if (noMax && typeof min == 'boolean') {\n          floating = min;\n          min = 1;\n        }\n        else if (typeof max == 'boolean') {\n          floating = max;\n          noMax = true;\n        }\n      }\n      if (noMin && noMax) {\n        max = 1;\n        noMax = false;\n      }\n      min = +min || 0;\n      if (noMax) {\n        max = min;\n        min = 0;\n      } else {\n        max = +max || 0;\n      }\n      if (floating || min % 1 || max % 1) {\n        var rand = nativeRandom();\n        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);\n      }\n      return baseRandom(min, max);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__foo_bar__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);\n    });\n\n    /**\n     * Capitalizes the first character of `string`.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('fred');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      string = baseToString(string);\n      return string && (string.charAt(0).toUpperCase() + string.slice(1));\n    }\n\n    /**\n     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = baseToString(string);\n      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to search.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search from.\n     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = baseToString(string);\n      target = (target + '');\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : nativeMin(position < 0 ? 0 : (+position || 0), length);\n\n      position -= target.length;\n      return position >= 0 && string.indexOf(target, position) == position;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"\\`\", in `string` to\n     * their corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional characters\n     * use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value.\n     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * Backticks are escaped because in Internet Explorer < 9, they can break out\n     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),\n     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and\n     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)\n     * for more details.\n     *\n     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)\n     * to reduce XSS vectors.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      // Reset `lastIndex` because in IE < 9 `String#replace` does not.\n      string = baseToString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"\\\", \"/\", \"^\", \"$\", \".\", \"|\", \"?\",\n     * \"*\", \"+\", \"(\", \")\", \"[\", \"]\", \"{\" and \"}\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https:\\/\\/lodash\\.com\\/\\)'\n     */\n    function escapeRegExp(string) {\n      string = baseToString(string);\n      return (string && reHasRegExpChars.test(string))\n        ? string.replace(reRegExpChars, escapeRegExpChar)\n        : (string || '(?:)');\n    }\n\n    /**\n     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__foo_bar__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = baseToString(string);\n      length = +length;\n\n      var strLength = string.length;\n      if (strLength >= length || !nativeIsFinite(length)) {\n        return string;\n      }\n      var mid = (length - strLength) / 2,\n          leftLength = nativeFloor(mid),\n          rightLength = nativeCeil(mid);\n\n      chars = createPadding('', rightLength, chars);\n      return chars.slice(0, leftLength) + string + chars;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padLeft('abc', 6);\n     * // => '   abc'\n     *\n     * _.padLeft('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padLeft('abc', 3);\n     * // => 'abc'\n     */\n    var padLeft = createPadDir();\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padRight('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padRight('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padRight('abc', 3);\n     * // => 'abc'\n     */\n    var padRight = createPadDir(true);\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,\n     * in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)\n     * of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.\n      // Chrome fails to trim leading <BOM> whitespace characters.\n      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.\n      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      string = trim(string);\n      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=0] The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n) {\n      var result = '';\n      string = baseToString(string);\n      n = +n;\n      if (n < 1 || !string || !nativeIsFinite(n)) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        string += string;\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--foo-bar');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__foo_bar__');\n     * // => 'Foo Bar'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to search.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = baseToString(string);\n      position = position == null\n        ? 0\n        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);\n\n      return string.lastIndexOf(target, position) == position;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is provided it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options] The options object.\n     * @param {RegExp} [options.escape] The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate] The \"evaluate\" delimiter.\n     * @param {Object} [options.imports] An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate] The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.\n     * @param {string} [options.variable] The data object variable name.\n     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // using the \"interpolate\" delimiter to create a compiled template\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // using the HTML \"escape\" delimiter to escape data property values\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // using the \"evaluate\" delimiter to execute JavaScript and generate HTML\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // using the internal `print` function in \"evaluate\" delimiters\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // using the ES delimiter as an alternative to the default \"interpolate\" delimiter\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // using custom template delimiters\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // using backslashes to treat delimiters as plain text\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // using the `imports` option to import `jQuery` as `jq`\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // using the `sourceURL` option to specify a custom sourceURL for the template\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector\n     *\n     * // using the `variable` option to ensure a with-statement isn't used in the compiled template\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // using the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and a stack trace\n     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, otherOptions) {\n      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (otherOptions && isIterateeCall(string, options, otherOptions)) {\n        options = otherOptions = undefined;\n      }\n      string = baseToString(string);\n      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);\n\n      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      var sourceURL = '//# sourceURL=' +\n        ('sourceURL' in options\n          ? options.sourceURL\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products requires returning the `match`\n        // string in order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      var variable = options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      var value = string;\n      string = baseToString(string);\n      if (!string) {\n        return string;\n      }\n      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {\n        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);\n      }\n      chars = (chars + '');\n      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimLeft('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimLeft('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimLeft(string, chars, guard) {\n      var value = string;\n      string = baseToString(string);\n      if (!string) {\n        return string;\n      }\n      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {\n        return string.slice(trimmedLeftIndex(string));\n      }\n      return string.slice(charsLeftIndex(string, (chars + '')));\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimRight('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimRight('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimRight(string, chars, guard) {\n      var value = string;\n      string = baseToString(string);\n      if (!string) {\n        return string;\n      }\n      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {\n        return string.slice(0, trimmedRightIndex(string) + 1);\n      }\n      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object|number} [options] The options object or maximum string length.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.trunc('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.trunc('hi-diddly-ho there, neighborino', 24);\n     * // => 'hi-diddly-ho there, n...'\n     *\n     * _.trunc('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.trunc('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.trunc('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function trunc(string, options, guard) {\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (options != null) {\n        if (isObject(options)) {\n          var separator = 'separator' in options ? options.separator : separator;\n          length = 'length' in options ? (+options.length || 0) : length;\n          omission = 'omission' in options ? baseToString(options.omission) : omission;\n        } else {\n          length = +options || 0;\n        }\n      }\n      string = baseToString(string);\n      if (length >= string.length) {\n        return string;\n      }\n      var end = length - omission.length;\n      if (end < 1) {\n        return omission;\n      }\n      var result = string.slice(0, end);\n      if (separator == null) {\n        return result + omission;\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              newEnd,\n              substring = string.slice(0, end);\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            newEnd = match.index;\n          }\n          result = result.slice(0, newEnd == null ? end : newEnd);\n        }\n      } else if (string.indexOf(separator, end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their\n     * corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional HTML\n     * entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = baseToString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      if (guard && isIterateeCall(string, pattern, guard)) {\n        pattern = undefined;\n      }\n      string = baseToString(string);\n      return string.match(pattern || reWords) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it is invoked.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {Function} func The function to attempt.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // avoid throwing errors for invalid selectors\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = restParam(function(func, args) {\n      try {\n        return func.apply(undefined, args);\n      } catch(e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and arguments of the created function. If `func` is a property name the\n     * created callback returns the property value for a given element. If `func`\n     * is an object the created callback returns `true` for elements that contain\n     * the equivalent object properties, otherwise it returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @alias iteratee\n     * @category Utility\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // wrap to create custom callback shorthands\n     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {\n     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);\n     *   if (!match) {\n     *     return callback(func, thisArg);\n     *   }\n     *   return function(object) {\n     *     return match[2] == 'gt'\n     *       ? object[match[1]] > match[3]\n     *       : object[match[1]] < match[3];\n     *   };\n     * });\n     *\n     * _.filter(users, 'age__gt36');\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     */\n    function callback(func, thisArg, guard) {\n      if (guard && isIterateeCall(func, thisArg, guard)) {\n        thisArg = undefined;\n      }\n      return isObjectLike(func)\n        ? matches(func)\n        : baseCallback(func, thisArg);\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var object = { 'user': 'fred' };\n     * var getter = _.constant(object);\n     *\n     * getter() === object;\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * This method returns the first argument provided to it.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * _.identity(object) === object;\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that performs a deep comparison between a given object\n     * and `source`, returning `true` if the given object has equivalent property\n     * values, else `false`.\n     *\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by\n     * their own, not inherited, enumerable properties. For comparing a single\n     * own or inherited property value see `_.matchesProperty`.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, _.matches({ 'age': 40, 'active': false }));\n     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, true));\n    }\n\n    /**\n     * Creates a function that compares the property value of `path` on a given\n     * object to `value`.\n     *\n     * **Note:** This method supports comparing arrays, booleans, `Date` objects,\n     * numbers, `Object` objects, regexes, and strings. Objects are compared by\n     * their own, not inherited, enumerable properties.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * _.find(users, _.matchesProperty('user', 'fred'));\n     * // => { 'user': 'fred' }\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, true));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` on a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': { 'c': _.constant(2) } } },\n     *   { 'a': { 'b': { 'c': _.constant(1) } } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b.c'));\n     * // => [2, 1]\n     *\n     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');\n     * // => [1, 2]\n     */\n    var method = restParam(function(path, args) {\n      return function(object) {\n        return invokePath(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path on `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = restParam(function(object, args) {\n      return function(path) {\n        return invokePath(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable function properties of a source object to the\n     * destination object. If `object` is a function then methods are added to\n     * its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options] The options object.\n     * @param {boolean} [options.chain=true] Specify whether the functions added\n     *  are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      if (options == null) {\n        var isObj = isObject(source),\n            props = isObj ? keys(source) : undefined,\n            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;\n\n        if (!(methodNames ? methodNames.length : isObj)) {\n          methodNames = false;\n          options = source;\n          source = object;\n          object = this;\n        }\n      }\n      if (!methodNames) {\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = true,\n          index = -1,\n          isFunc = isFunction(object),\n          length = methodNames.length;\n\n      if (options === false) {\n        chain = false;\n      } else if (isObject(options) && 'chain' in options) {\n        chain = options.chain;\n      }\n      while (++index < length) {\n        var methodName = methodNames[index],\n            func = source[methodName];\n\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = (function(func) {\n            return function() {\n              var chainAll = this.__chain__;\n              if (chain || chainAll) {\n                var result = object(this.__wrapped__),\n                    actions = result.__actions__ = arrayCopy(this.__actions__);\n\n                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n                result.__chain__ = chainAll;\n                return result;\n              }\n              return func.apply(object, arrayPush([this.value()], arguments));\n            };\n          }(func));\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      root._ = oldDash;\n      return this;\n    }\n\n    /**\n     * A no-operation function that returns `undefined` regardless of the\n     * arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @example\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * _.noop(object) === undefined;\n     * // => true\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that returns the property value at `path` on a\n     * given object.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': { 'c': 2 } } },\n     *   { 'a': { 'b': { 'c': 1 } } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b.c'));\n     * // => [2, 1]\n     *\n     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the property value at a given path on `object`.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return baseGet(object, toPath(path), path + '');\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. If `end` is not specified it is\n     * set to `start` with `start` then set to `0`. If `end` is less than `start`\n     * a zero-length range is created unless a negative `step` is specified.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the new array of numbers.\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    function range(start, end, step) {\n      if (step && isIterateeCall(start, end, step)) {\n        end = step = undefined;\n      }\n      start = +start || 0;\n      step = step == null ? 1 : (+step || 0);\n\n      if (end == null) {\n        end = start;\n        start = 0;\n      } else {\n        end = +end || 0;\n      }\n      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.\n      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (++index < length) {\n        result[index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * Invokes the iteratee function `n` times, returning an array of the results\n     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with\n     * one argument; (index).\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));\n     * // => [3, 6, 4]\n     *\n     * _.times(3, function(n) {\n     *   mage.castSpell(n);\n     * });\n     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`\n     *\n     * _.times(3, function(n) {\n     *   this.cast(n);\n     * }, mage);\n     * // => also invokes `mage.castSpell(n)` three times\n     */\n    function times(n, iteratee, thisArg) {\n      n = nativeFloor(n);\n\n      // Exit early to avoid a JSC JIT bug in Safari 8\n      // where `Array(0)` is treated as `Array(1)`.\n      if (n < 1 || !nativeIsFinite(n)) {\n        return [];\n      }\n      var index = -1,\n          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));\n\n      iteratee = bindCallback(iteratee, thisArg, 1);\n      while (++index < n) {\n        if (index < MAX_ARRAY_LENGTH) {\n          result[index] = iteratee(index);\n        } else {\n          iteratee(index);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is provided the ID is appended to it.\n     *\n     * @static\n     * @memberOf _\n     * @category Utility\n     * @param {string} [prefix] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return baseToString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @category Math\n     * @param {number} augend The first number to add.\n     * @param {number} addend The second number to add.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    function add(augend, addend) {\n      return (+augend || 0) + (+addend || 0);\n    }\n\n    /**\n     * Calculates `n` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @category Math\n     * @param {number} n The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Calculates `n` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @category Math\n     * @param {number} n The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Gets the maximum value of `collection`. If `collection` is empty or falsey\n     * `-Infinity` is returned. If an iteratee function is provided it is invoked\n     * for each value in `collection` to generate the criterion by which the value\n     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three\n     * arguments: (value, index, collection).\n     *\n     * If a property name is provided for `iteratee` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `iteratee` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Math\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [iteratee] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => -Infinity\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * _.max(users, function(chr) {\n     *   return chr.age;\n     * });\n     * // => { 'user': 'fred', 'age': 40 }\n     *\n     * // using the `_.property` callback shorthand\n     * _.max(users, 'age');\n     * // => { 'user': 'fred', 'age': 40 }\n     */\n    var max = createExtremum(gt, NEGATIVE_INFINITY);\n\n    /**\n     * Gets the minimum value of `collection`. If `collection` is empty or falsey\n     * `Infinity` is returned. If an iteratee function is provided it is invoked\n     * for each value in `collection` to generate the criterion by which the value\n     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three\n     * arguments: (value, index, collection).\n     *\n     * If a property name is provided for `iteratee` the created `_.property`\n     * style callback returns the property value of the given element.\n     *\n     * If a value is also provided for `thisArg` the created `_.matchesProperty`\n     * style callback returns `true` for elements that have a matching property\n     * value, else `false`.\n     *\n     * If an object is provided for `iteratee` the created `_.matches` style\n     * callback returns `true` for elements that have the properties of the given\n     * object, else `false`.\n     *\n     * @static\n     * @memberOf _\n     * @category Math\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [iteratee] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => Infinity\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * _.min(users, function(chr) {\n     *   return chr.age;\n     * });\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // using the `_.property` callback shorthand\n     * _.min(users, 'age');\n     * // => { 'user': 'barney', 'age': 36 }\n     */\n    var min = createExtremum(lt, POSITIVE_INFINITY);\n\n    /**\n     * Calculates `n` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @category Math\n     * @param {number} n The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Gets the sum of the values in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @category Math\n     * @param {Array|Object|string} collection The collection to iterate over.\n     * @param {Function|Object|string} [iteratee] The function invoked per iteration.\n     * @param {*} [thisArg] The `this` binding of `iteratee`.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 6]);\n     * // => 10\n     *\n     * _.sum({ 'a': 4, 'b': 6 });\n     * // => 10\n     *\n     * var objects = [\n     *   { 'n': 4 },\n     *   { 'n': 6 }\n     * ];\n     *\n     * _.sum(objects, function(object) {\n     *   return object.n;\n     * });\n     * // => 10\n     *\n     * // using the `_.property` callback shorthand\n     * _.sum(objects, 'n');\n     * // => 10\n     */\n    function sum(collection, iteratee, thisArg) {\n      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {\n        iteratee = undefined;\n      }\n      iteratee = getCallback(iteratee, thisArg, 3);\n      return iteratee.length == 1\n        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)\n        : baseSum(collection, iteratee);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    // Add functions to the `Map` cache.\n    MapCache.prototype['delete'] = mapDelete;\n    MapCache.prototype.get = mapGet;\n    MapCache.prototype.has = mapHas;\n    MapCache.prototype.set = mapSet;\n\n    // Add functions to the `Set` cache.\n    SetCache.prototype.push = cachePush;\n\n    // Assign cache to `_.memoize`.\n    memoize.Cache = MapCache;\n\n    // Add functions that return wrapped values when chaining.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.callback = callback;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.functions = functions;\n    lodash.groupBy = groupBy;\n    lodash.indexBy = indexBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.invert = invert;\n    lodash.invoke = invoke;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.modArgs = modArgs;\n    lodash.negate = negate;\n    lodash.omit = omit;\n    lodash.once = once;\n    lodash.pairs = pairs;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pluck = pluck;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.restParam = restParam;\n    lodash.set = set;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortByAll = sortByAll;\n    lodash.sortByOrder = sortByOrder;\n    lodash.spread = spread;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.times = times;\n    lodash.toArray = toArray;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.union = union;\n    lodash.uniq = uniq;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.where = where;\n    lodash.without = without;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.backflow = flowRight;\n    lodash.collect = map;\n    lodash.compose = flowRight;\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.extend = assign;\n    lodash.iteratee = callback;\n    lodash.methods = functions;\n    lodash.object = zipObject;\n    lodash.select = filter;\n    lodash.tail = rest;\n    lodash.unique = uniq;\n\n    // Add functions to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add functions that return unwrapped values when chaining.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.deburr = deburr;\n    lodash.endsWith = endsWith;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.findWhere = findWhere;\n    lodash.first = first;\n    lodash.floor = floor;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isBoolean = isBoolean;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isMatch = isMatch;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isString = isString;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.min = min;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padLeft = padLeft;\n    lodash.padRight = padRight;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.sum = sum;\n    lodash.template = template;\n    lodash.trim = trim;\n    lodash.trimLeft = trimLeft;\n    lodash.trimRight = trimRight;\n    lodash.trunc = trunc;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.words = words;\n\n    // Add aliases.\n    lodash.all = every;\n    lodash.any = some;\n    lodash.contains = includes;\n    lodash.eq = isEqual;\n    lodash.detect = find;\n    lodash.foldl = reduce;\n    lodash.foldr = reduceRight;\n    lodash.head = first;\n    lodash.include = includes;\n    lodash.inject = reduce;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!lodash.prototype[methodName]) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), false);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add functions capable of returning wrapped and unwrapped values when chaining.\n    lodash.sample = sample;\n\n    lodash.prototype.sample = function(n) {\n      if (!this.__chain__ && n == null) {\n        return sample(this.value());\n      }\n      return this.thru(function(value) {\n        return sample(value, n);\n      });\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type string\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        var filtered = this.__filtered__;\n        if (filtered && !index) {\n          return new LazyWrapper(this);\n        }\n        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);\n\n        var result = this.clone();\n        if (filtered) {\n          result.__takeCount__ = nativeMin(result.__takeCount__, n);\n        } else {\n          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type != LAZY_MAP_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {\n        var result = this.clone();\n        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.first` and `_.last`.\n    arrayEach(['first', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.\n    arrayEach(['initial', 'rest'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.\n    arrayEach(['pluck', 'where'], function(methodName, index) {\n      var operationName = index ? 'filter' : 'map',\n          createCallback = index ? baseMatches : property;\n\n      LazyWrapper.prototype[methodName] = function(value) {\n        return this[operationName](createCallback(value));\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.reject = function(predicate, thisArg) {\n      predicate = getCallback(predicate, thisArg, 1);\n      return this.filter(function(value) {\n        return !predicate(value);\n      });\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = start == null ? 0 : (+start || 0);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = (+end || 0);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {\n      return this.reverse().takeWhile(predicate, thisArg).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(POSITIVE_INFINITY);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),\n          retUnwrapped = /^(?:first|last)$/.test(methodName),\n          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var args = retUnwrapped ? [1] : arguments,\n            chainAll = this.__chain__,\n            value = this.__wrapped__,\n            isHybrid = !!this.__actions__.length,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var interceptor = function(value) {\n          return (retUnwrapped && chainAll)\n            ? lodashFunc(value, 1)[0]\n            : lodashFunc.apply(undefined, arrayPush([value], args));\n        };\n\n        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },\n            onlyLazy = isLazy && !isHybrid;\n\n        if (retUnwrapped && !chainAll) {\n          if (onlyLazy) {\n            value = value.clone();\n            value.__actions__.push(action);\n            return func.call(value);\n          }\n          return lodashFunc.call(undefined, this.value())[0];\n        }\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push(action);\n          return new LodashWrapper(result, chainAll);\n        }\n        return this.thru(interceptor);\n      };\n    });\n\n    // Add `Array` and `String` methods to `lodash.prototype`.\n    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {\n      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          return func.apply(this.value(), args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(value, args);\n        });\n      };\n    });\n\n    // Map minified function names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = lodashFunc.name,\n            names = realNames[key] || (realNames[key] = []);\n\n        names.push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];\n\n    // Add functions to the lazy wrapper.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chaining functions to the `lodash` wrapper.\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.concat = wrapperConcat;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toString = wrapperToString;\n    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add function aliases to the `lodash` wrapper.\n    lodash.prototype.collect = lodash.prototype.map;\n    lodash.prototype.head = lodash.prototype.first;\n    lodash.prototype.select = lodash.prototype.filter;\n    lodash.prototype.tail = lodash.prototype.rest;\n\n    return lodash;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers like r.js check for condition patterns like the following:\n  if (true) {\n    // Expose lodash to the global object when an AMD loader is present to avoid\n    // errors in cases where lodash is loaded by a script tag and not intended\n    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for\n    // more details.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n      return _;\n    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n  else if (freeExports && freeModule) {\n    // Export for Node.js or RingoJS.\n    if (moduleExports) {\n      (freeModule.exports = _)._ = _;\n    }\n    // Export for Rhino with CommonJS support.\n    else {\n      freeExports._ = _;\n    }\n  }\n  else {\n    // Export for a browser or Rhino.\n    root._ = _;\n  }\n}.call(this));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)(module), (function() { return this; }())))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 13 */
/***/ (function(module, exports) {

	eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Utils = __webpack_require__(1);\n\nvar _Utils2 = _interopRequireDefault(_Utils);\n\nvar _Header = __webpack_require__(15);\n\nvar _Header2 = _interopRequireDefault(_Header);\n\nvar _TimeIndicator = __webpack_require__(17);\n\nvar _TimeIndicator2 = _interopRequireDefault(_TimeIndicator);\n\nvar _Items = __webpack_require__(18);\n\nvar _Items2 = _interopRequireDefault(_Items);\n\nvar _KeysPreview = __webpack_require__(19);\n\nvar _KeysPreview2 = _interopRequireDefault(_KeysPreview);\n\nvar _Properties = __webpack_require__(20);\n\nvar _Properties2 = _interopRequireDefault(_Properties);\n\nvar _PropertyCurveEdit = __webpack_require__(21);\n\nvar _PropertyCurveEdit2 = _interopRequireDefault(_PropertyCurveEdit);\n\nvar _Keys = __webpack_require__(22);\n\nvar _Keys2 = _interopRequireDefault(_Keys);\n\nvar _Errors = __webpack_require__(23);\n\nvar _Errors2 = _interopRequireDefault(_Errors);\n\nvar _Selection = __webpack_require__(24);\n\nvar _Selection2 = _interopRequireDefault(_Selection);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar d3 = __webpack_require__(16);\n\nvar Timeline = function () {\n  function Timeline(editor, options) {\n    var _this = this;\n\n    _classCallCheck(this, Timeline);\n\n    this.editor = editor;\n    this.tweenTime = this.editor.tweenTime;\n    this.timer = this.tweenTime.timer;\n    this.selectionManager = this.editor.selectionManager;\n    this.selectionManager.onSelect.add(function () {\n      // Needed to apply selection of properties/item to curves.\n      _this._isDirty = true;\n      _this.render();\n    });\n\n    this._isDirty = true;\n    this.timer = this.tweenTime.timer;\n    this.currentTime = this.timer.time; // used in timeindicator.\n\n    this.onUpdate = this.onUpdate.bind(this);\n\n    // Make the domain cover 20% of the totalDuation by default.\n    this.initialDomain = [];\n    this.initialDomain[0] = options.domainStart || 0;\n    this.initialDomain[1] = options.domainEnd || this.timer.totalDuration * 0.2;\n\n    // Adapt time to be greater or equal to domainStart.\n    if (this.initialDomain[0] > this.timer.getCurrentTime()) {\n      this.timer.time[0] = this.initialDomain[0];\n    }\n\n    var margin = { top: 6, right: 20, bottom: 0, left: 265 };\n    this.margin = margin;\n    var width = window.innerWidth - margin.left - margin.right - 270;\n    var height = 270 - margin.top - margin.bottom - 40;\n    this.lineHeight = options.lineHeight || 20;\n    this.fontSize = options.fontSize || 13;\n    this.fontFamily = options.fontFamily || 'serif';\n    this.label_position_x = -margin.left + 20;\n\n    this.x = d3.time.scale().domain(this.initialDomain).range([0, width]);\n\n    this.xAxis = d3.svg.axis().scale(this.x).orient('top').tickSize(-height, 0).tickFormat(_Utils2.default.formatMinutes);\n\n    this.svgGrid = d3.select(editor.$timeline.get(0)).select('.timeline__grid').append('svg').attr('width', width + margin.left + margin.right).attr('height', 600).attr('class', 'time-grid-container');\n\n    this.svg = d3.select(editor.$timeline.get(0)).select('.timeline__main').append('svg').attr('width', width + margin.left + margin.right).attr('height', 600).attr('class', 'lines-time-container');\n\n    this.linesContainer = this.svg.append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n    this.svgContainer = this.svgGrid.append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n    this.svgContainerTime = this.svg.append('g').attr('transform', 'translate(' + margin.left + ',0)');\n\n    this.header = new _Header2.default(editor, this.timer, this.initialDomain, this.tweenTime, width, margin);\n    this.timeIndicator = new _TimeIndicator2.default(this, this.svgContainerTime);\n\n    this.selection = new _Selection2.default(this, this.svg, margin);\n\n    this.items = new _Items2.default(this, this.linesContainer);\n    this.items.onUpdate.add(this.onUpdate);\n    this.keysPreview = new _KeysPreview2.default(this, this.linesContainer);\n\n    this.properties = new _Properties2.default(this);\n    this.properties.onKeyAdded.add(function (newKey) {\n      _this._isDirty = true;\n      // render the timeline directly so that we can directly select\n      // the new key with it's domElement.\n      _this.render(0, false);\n      _this.keys.selectNewKey(newKey);\n    });\n    this.errors = new _Errors2.default(this);\n    this.keys = new _Keys2.default(this);\n    this.keys.onKeyUpdated.add(function () {\n      _this.onUpdate();\n    });\n\n    this.curves = new _PropertyCurveEdit2.default(this, this.linesContainer);\n    this.curves.onCurveUpdated.add(function () {\n      _this._isDirty = true;\n      // render the timeline directly so that we can directly select\n      // the new key with it's domElement.\n      _this.render(0, false);\n    });\n\n    this.xAxisGrid = d3.svg.axis().scale(this.x).ticks(100).tickSize(-this.items.dy, 0).tickFormat('').orient('top');\n\n    this.xGrid = this.svgContainer.append('g').attr('class', 'x axis grid').attr('transform', 'translate(0,' + margin.top + ')').call(this.xAxisGrid);\n\n    this.xAxisElement = this.svgContainer.append('g').attr('class', 'x axis').attr('transform', 'translate(0,' + margin.top + ')').call(this.xAxis);\n\n    this.header.onBrush.add(function (extent) {\n      _this.x.domain(extent);\n      _this.xGrid.call(_this.xAxisGrid);\n      _this.xAxisElement.call(_this.xAxis);\n      _this._isDirty = true;\n    });\n\n    // First render\n    window.requestAnimationFrame(function () {\n      _this.render();\n    });\n\n    window.onresize = function (ev) {\n      // Editor marquee is triggering resize event with different target set. This makes sure we don't execute this code.\n      if (ev.target !== window) {\n        return;\n      }\n      var INNER_WIDTH = window.innerWidth - 270;\n      var width2 = INNER_WIDTH - margin.left - margin.right;\n      _this.svg.attr('width', width2 + margin.left + margin.right);\n      _this.svg.selectAll('.timeline__right-mask').attr('width', INNER_WIDTH);\n      _this.x.range([0, width2]);\n\n      _this._isDirty = true;\n      _this.header.resize(INNER_WIDTH);\n      _this.render();\n    };\n  }\n\n  _createClass(Timeline, [{\n    key: 'onUpdate',\n    value: function onUpdate() {\n      this.editor.render(false, false, true);\n    }\n  }, {\n    key: 'setHeaderDomain',\n    value: function setHeaderDomain(domain) {\n      this.header.setHeaderDomain(domain);\n    }\n  }, {\n    key: 'getHeaderDomain',\n    value: function getHeaderDomain() {\n      return this.header.getHeaderDomain();\n    }\n  }, {\n    key: 'addHeaderDomainChangeListener',\n    value: function addHeaderDomainChangeListener(listener) {\n      this.header.adOnBrushChangeListener(listener);\n    }\n  }, {\n    key: 'removeHeaderDomainChangeListener',\n    value: function removeHeaderDomainChangeListener(listener) {\n      this.header.removeOnBrushChangeListener(listener);\n    }\n  }, {\n    key: 'render',\n    value: function render(time, time_changed) {\n      if (time_changed) {\n        var domainLength;\n        // Update current domain when playing to keep time indicator in view.\n        var margin_ms = 16;\n        if (this.timer.getCurrentTime() > this.initialDomain[1]) {\n          domainLength = this.initialDomain[1] - this.initialDomain[0];\n          this.initialDomain[0] += domainLength - margin_ms;\n          this.initialDomain[1] += domainLength - margin_ms;\n          this.header.setDomain(this.initialDomain);\n        }\n        if (this.timer.getCurrentTime() < this.initialDomain[0]) {\n          domainLength = this.initialDomain[1] - this.initialDomain[0];\n          this.initialDomain[0] = this.timer.getCurrentTime();\n          this.initialDomain[1] = this.initialDomain[0] + domainLength;\n          this.header.setDomain(this.initialDomain);\n        }\n      }\n\n      if (this._isDirty || time_changed) {\n        // Render header and time indicator everytime the time changed.\n        this.header.render();\n        this.timeIndicator.render();\n      }\n\n      if (this._isDirty) {\n        // No need to call this on each frames, but only on brush, key drag, ...\n        var bar = this.items.render();\n        this.keysPreview.render(bar);\n        var properties = this.properties.render(bar);\n        this.errors.render(properties);\n        this.keys.render(properties);\n        this.curves.render(bar);\n        this._isDirty = false;\n\n        // Adapt the timeline height.\n        var height = Math.max(this.items.dy + 30, 230);\n        this.xAxis.tickSize(-height, 0);\n        this.xAxisGrid.tickSize(-height, 0);\n        this.xGrid.call(this.xAxisGrid);\n        this.xAxisElement.call(this.xAxis);\n        this.svg.attr('height', height);\n        this.svgGrid.attr('height', height);\n        this.timeIndicator.updateHeight(height);\n      }\n    }\n  }]);\n\n  return Timeline;\n}();\n\nexports.default = Timeline;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Utils = __webpack_require__(1);\n\nvar _Utils2 = _interopRequireDefault(_Utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar d3 = __webpack_require__(16);\n\nvar Signals = __webpack_require__(6);\n\nvar Header = function () {\n  function Header(editor, timer, initialDomain, tweenTime, width, margin) {\n    _classCallCheck(this, Header);\n\n    this.timer = timer;\n    this.initialDomain = initialDomain;\n    this.tweenTime = tweenTime;\n\n    this.onBrush = new Signals.Signal();\n    this.margin = { top: 10, right: 20, bottom: 0, left: margin.left };\n    this.height = 50 - this.margin.top - this.margin.bottom + 20;\n\n    this.currentTime = this.timer.time;\n    this.x = d3.time.scale().range([0, width]);\n    this.x.domain([0, this.timer.totalDuration]);\n\n    // Same as this.x from timeline\n    this.xDisplayed = d3.time.scale().range([0, width]);\n    this.xDisplayed.domain(this.initialDomain);\n\n    this.xAxis = d3.svg.axis().scale(this.x).orient('top').tickSize(-5, 0).tickFormat(_Utils2.default.formatMinutes);\n\n    this.svg = d3.select(editor.$timeline.get(0)).select('.timeline__header').append('svg').attr('width', width + this.margin.left + this.margin.right).attr('height', 56);\n\n    this.svgContainer = this.svg.append('g').attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')');\n\n    this.createBrushHandle();\n    this.createTimeHandle();\n    this.timer.durationChanged.add(this.onDurationChanged.bind(this));\n  }\n\n  _createClass(Header, [{\n    key: 'adaptDomainToDuration',\n    value: function adaptDomainToDuration(domain, seconds) {\n      var ms = seconds * 1000;\n      var new_domain = [domain[0], domain[1]];\n      // Make the domain smaller or equal to ms.\n      new_domain[0] = Math.min(new_domain[0], ms);\n      new_domain[1] = Math.min(new_domain[1], ms);\n      // Should not go below 0.\n      new_domain[0] = Math.max(new_domain[0], 0);\n\n      return new_domain;\n    }\n  }, {\n    key: 'adOnBrushChangeListener',\n    value: function adOnBrushChangeListener(listener) {\n      this.onBrush.add(listener);\n    }\n  }, {\n    key: 'removeOnBrushChangeListener',\n    value: function removeOnBrushChangeListener(listener) {\n      this.onBrush.remove(listener);\n    }\n  }, {\n    key: 'setDomain',\n    value: function setDomain() {\n      this.brush.x(this.x).extent(this.initialDomain);\n      this.svgContainer.select('.brush').call(this.brush);\n      // Same as onBrush\n      this.onBrush.dispatch(this.initialDomain);\n      this.render();\n      this.xDisplayed.domain(this.initialDomain);\n    }\n\n    // domain = [0,280070]\n\n  }, {\n    key: 'setHeaderDomain',\n    value: function setHeaderDomain(domain) {\n      this.initialDomain = domain;\n      this.setDomain(this.initialDomain);\n    }\n  }, {\n    key: 'getHeaderDomain',\n    value: function getHeaderDomain() {\n      return this.initialDomain;\n    }\n  }, {\n    key: 'onDurationChanged',\n    value: function onDurationChanged(seconds) {\n      this.x.domain([0, this.timer.totalDuration]);\n      this.xAxisElement.call(this.xAxis);\n      this.initialDomain = this.adaptDomainToDuration(this.initialDomain, seconds);\n      this.setDomain(this.initialDomain);\n    }\n  }, {\n    key: 'createBrushHandle',\n    value: function createBrushHandle() {\n      var _this = this;\n\n      this.xAxisElement = this.svgContainer.append('g').attr('class', 'x axis').attr('transform', 'translate(0,' + (this.margin.top + 7) + ')').call(this.xAxis);\n\n      var onBrush = function onBrush() {\n        var extent0 = _this.brush.extent();\n        // Get domain as milliseconds and not date.\n        var start = extent0[0].getTime();\n        var end = extent0[1].getTime();\n        // Set the initial domain.\n        _this.initialDomain[0] = start;\n        _this.initialDomain[1] = end;\n        _this.setDomain(_this.initialDomain);\n      };\n\n      this.brush = d3.svg.brush().x(this.x).extent(this.initialDomain).on('brush', onBrush);\n\n      this.gBrush = this.svgContainer.append('g').attr('class', 'brush').call(this.brush).selectAll('rect').attr('height', 20);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var timeSelection = this.svgContainer.selectAll('.time-indicator');\n      timeSelection.attr('transform', 'translate(' + this.xDisplayed(this.currentTime[0]) + ', 25)');\n    }\n  }, {\n    key: 'createTimeHandle',\n    value: function createTimeHandle() {\n      var self = this;\n\n      var dragTimeMove = function dragTimeMove() {\n        var event = d3.event.sourceEvent;\n        event.stopPropagation();\n        var tweenTime = self.tweenTime;\n        var event_x = event.x !== undefined ? event.x : event.clientX;\n        var dx = self.xDisplayed.invert(event_x - self.margin.left);\n        dx = dx.getTime();\n        dx = Math.max(0, dx);\n\n        var timeMatch = false;\n\n        // Key grid lock.(event.shiftKey)\n        var time = dx / 1000;\n        timeMatch = _Utils2.default.getClosestTime(tweenTime.data, time, '---non-existant', false, false, 0.05);\n        if (timeMatch !== false) {\n          timeMatch = timeMatch * 1000;\n        }\n\n        if (timeMatch === false) {\n          timeMatch = dx;\n        }\n        self.timer.seek([timeMatch]);\n      };\n\n      var dragTime = d3.behavior.drag().origin(function (d) {\n        return d;\n      }).on('drag', dragTimeMove);\n\n      var timeSelection = this.svgContainer.selectAll('.time-indicator').data(this.currentTime);\n\n      timeSelection.enter().append('rect').attr('x', 0).attr('y', 20).attr('width', self.xDisplayed(self.timer.totalDuration)).attr('height', 50).attr('fill-opacity', 0).on('click', function () {\n        var mouse = d3.mouse(this);\n        var dx = self.xDisplayed.invert(mouse[0]);\n        dx = dx.getTime();\n        dx = Math.max(0, dx);\n        self.timer.seek([dx]);\n      });\n\n      var timeGrp = timeSelection.enter().append('g').attr('class', 'time-indicator').attr('transform', 'translate(-0.5,' + 30 + ')').call(dragTime);\n\n      timeGrp.append('rect').attr('class', 'time-indicator__line').attr('x', -0.5).attr('y', 0).attr('width', 1).attr('height', 1000);\n\n      timeGrp.append('path').attr('class', 'time-indicator__handle').attr('d', 'M -5 -3 L -5 5 L 0 10 L 5 5 L 5 -3 L -5 -3');\n\n      // Mask time indicator\n      // todo: remove the mask.\n      this.svgContainer.append('rect').attr('class', 'graph-mask').attr('x', -self.margin.left).attr('y', -self.margin.top).attr('width', self.margin.left - 5).attr('height', self.height);\n    }\n  }, {\n    key: 'resize',\n    value: function resize(width) {\n      var width2 = width - this.margin.left - this.margin.right;\n      this.svg.attr('width', width2 + this.margin.left + this.margin.right);\n\n      this.x.range([0, width2]);\n      this.xDisplayed.range([0, width2]);\n      this.xAxisElement.call(this.xAxis);\n    }\n  }]);\n\n  return Header;\n}();\n\nexports.default = Header;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ncmFwaC9IZWFkZXIuanM/YWU2OSJdLCJuYW1lcyI6WyJkMyIsInJlcXVpcmUiLCJTaWduYWxzIiwiSGVhZGVyIiwiZWRpdG9yIiwidGltZXIiLCJpbml0aWFsRG9tYWluIiwidHdlZW5UaW1lIiwid2lkdGgiLCJtYXJnaW4iLCJvbkJydXNoIiwiU2lnbmFsIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwiaGVpZ2h0IiwiY3VycmVudFRpbWUiLCJ0aW1lIiwieCIsInNjYWxlIiwicmFuZ2UiLCJkb21haW4iLCJ0b3RhbER1cmF0aW9uIiwieERpc3BsYXllZCIsInhBeGlzIiwic3ZnIiwiYXhpcyIsIm9yaWVudCIsInRpY2tTaXplIiwidGlja0Zvcm1hdCIsImZvcm1hdE1pbnV0ZXMiLCJzZWxlY3QiLCIkdGltZWxpbmUiLCJnZXQiLCJhcHBlbmQiLCJhdHRyIiwic3ZnQ29udGFpbmVyIiwiY3JlYXRlQnJ1c2hIYW5kbGUiLCJjcmVhdGVUaW1lSGFuZGxlIiwiZHVyYXRpb25DaGFuZ2VkIiwiYWRkIiwib25EdXJhdGlvbkNoYW5nZWQiLCJiaW5kIiwic2Vjb25kcyIsIm1zIiwibmV3X2RvbWFpbiIsIk1hdGgiLCJtaW4iLCJtYXgiLCJsaXN0ZW5lciIsInJlbW92ZSIsImJydXNoIiwiZXh0ZW50IiwiY2FsbCIsImRpc3BhdGNoIiwicmVuZGVyIiwic2V0RG9tYWluIiwieEF4aXNFbGVtZW50IiwiYWRhcHREb21haW5Ub0R1cmF0aW9uIiwiZXh0ZW50MCIsInN0YXJ0IiwiZ2V0VGltZSIsImVuZCIsIm9uIiwiZ0JydXNoIiwic2VsZWN0QWxsIiwidGltZVNlbGVjdGlvbiIsInNlbGYiLCJkcmFnVGltZU1vdmUiLCJldmVudCIsInNvdXJjZUV2ZW50Iiwic3RvcFByb3BhZ2F0aW9uIiwiZXZlbnRfeCIsInVuZGVmaW5lZCIsImNsaWVudFgiLCJkeCIsImludmVydCIsInRpbWVNYXRjaCIsImdldENsb3Nlc3RUaW1lIiwiZGF0YSIsInNlZWsiLCJkcmFnVGltZSIsImJlaGF2aW9yIiwiZHJhZyIsIm9yaWdpbiIsImQiLCJlbnRlciIsIm1vdXNlIiwidGltZUdycCIsIndpZHRoMiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFHQTs7Ozs7Ozs7QUFIQSxJQUFJQSxLQUFLLG1CQUFBQyxDQUFRLEVBQVIsQ0FBVDs7QUFFQSxJQUFJQyxVQUFVLG1CQUFBRCxDQUFRLENBQVIsQ0FBZDs7SUFHcUJFLE07QUFDbkIsa0JBQVlDLE1BQVosRUFBb0JDLEtBQXBCLEVBQTJCQyxhQUEzQixFQUEwQ0MsU0FBMUMsRUFBcURDLEtBQXJELEVBQTREQyxNQUE1RCxFQUFvRTtBQUFBOztBQUNsRSxTQUFLSixLQUFMLEdBQWFBLEtBQWI7QUFDQSxTQUFLQyxhQUFMLEdBQXFCQSxhQUFyQjtBQUNBLFNBQUtDLFNBQUwsR0FBaUJBLFNBQWpCOztBQUVBLFNBQUtHLE9BQUwsR0FBZSxJQUFJUixRQUFRUyxNQUFaLEVBQWY7QUFDQSxTQUFLRixNQUFMLEdBQWMsRUFBQ0csS0FBSyxFQUFOLEVBQVVDLE9BQU8sRUFBakIsRUFBcUJDLFFBQVEsQ0FBN0IsRUFBZ0NDLE1BQU1OLE9BQU9NLElBQTdDLEVBQWQ7QUFDQSxTQUFLQyxNQUFMLEdBQWMsS0FBSyxLQUFLUCxNQUFMLENBQVlHLEdBQWpCLEdBQXVCLEtBQUtILE1BQUwsQ0FBWUssTUFBbkMsR0FBNEMsRUFBMUQ7O0FBRUEsU0FBS0csV0FBTCxHQUFtQixLQUFLWixLQUFMLENBQVdhLElBQTlCO0FBQ0EsU0FBS0MsQ0FBTCxHQUFTbkIsR0FBR2tCLElBQUgsQ0FBUUUsS0FBUixHQUFnQkMsS0FBaEIsQ0FBc0IsQ0FBQyxDQUFELEVBQUliLEtBQUosQ0FBdEIsQ0FBVDtBQUNBLFNBQUtXLENBQUwsQ0FBT0csTUFBUCxDQUFjLENBQUMsQ0FBRCxFQUFJLEtBQUtqQixLQUFMLENBQVdrQixhQUFmLENBQWQ7O0FBRUE7QUFDQSxTQUFLQyxVQUFMLEdBQWtCeEIsR0FBR2tCLElBQUgsQ0FBUUUsS0FBUixHQUFnQkMsS0FBaEIsQ0FBc0IsQ0FBQyxDQUFELEVBQUliLEtBQUosQ0FBdEIsQ0FBbEI7QUFDQSxTQUFLZ0IsVUFBTCxDQUFnQkYsTUFBaEIsQ0FBdUIsS0FBS2hCLGFBQTVCOztBQUVBLFNBQUttQixLQUFMLEdBQWF6QixHQUFHMEIsR0FBSCxDQUFPQyxJQUFQLEdBQ1ZQLEtBRFUsQ0FDSixLQUFLRCxDQURELEVBRVZTLE1BRlUsQ0FFSCxLQUZHLEVBR1ZDLFFBSFUsQ0FHRCxDQUFDLENBSEEsRUFHRyxDQUhILEVBSVZDLFVBSlUsQ0FJQyxnQkFBTUMsYUFKUCxDQUFiOztBQU1BLFNBQUtMLEdBQUwsR0FBVzFCLEdBQUdnQyxNQUFILENBQVU1QixPQUFPNkIsU0FBUCxDQUFpQkMsR0FBakIsQ0FBcUIsQ0FBckIsQ0FBVixFQUFtQ0YsTUFBbkMsQ0FBMEMsbUJBQTFDLEVBQStERyxNQUEvRCxDQUFzRSxLQUF0RSxFQUNSQyxJQURRLENBQ0gsT0FERyxFQUNNNUIsUUFBUSxLQUFLQyxNQUFMLENBQVlNLElBQXBCLEdBQTJCLEtBQUtOLE1BQUwsQ0FBWUksS0FEN0MsRUFFUnVCLElBRlEsQ0FFSCxRQUZHLEVBRU8sRUFGUCxDQUFYOztBQUlBLFNBQUtDLFlBQUwsR0FBb0IsS0FBS1gsR0FBTCxDQUFTUyxNQUFULENBQWdCLEdBQWhCLEVBQ2pCQyxJQURpQixDQUNaLFdBRFksRUFDQyxlQUFlLEtBQUszQixNQUFMLENBQVlNLElBQTNCLEdBQWtDLEdBQWxDLEdBQXdDLEtBQUtOLE1BQUwsQ0FBWUcsR0FBcEQsR0FBMEQsR0FEM0QsQ0FBcEI7O0FBR0EsU0FBSzBCLGlCQUFMO0FBQ0EsU0FBS0MsZ0JBQUw7QUFDQSxTQUFLbEMsS0FBTCxDQUFXbUMsZUFBWCxDQUEyQkMsR0FBM0IsQ0FBK0IsS0FBS0MsaUJBQUwsQ0FBdUJDLElBQXZCLENBQTRCLElBQTVCLENBQS9CO0FBQ0Q7Ozs7MENBRXFCckIsTSxFQUFRc0IsTyxFQUFTO0FBQ3JDLFVBQUlDLEtBQUtELFVBQVUsSUFBbkI7QUFDQSxVQUFJRSxhQUFhLENBQUN4QixPQUFPLENBQVAsQ0FBRCxFQUFZQSxPQUFPLENBQVAsQ0FBWixDQUFqQjtBQUNBO0FBQ0F3QixpQkFBVyxDQUFYLElBQWdCQyxLQUFLQyxHQUFMLENBQVNGLFdBQVcsQ0FBWCxDQUFULEVBQXdCRCxFQUF4QixDQUFoQjtBQUNBQyxpQkFBVyxDQUFYLElBQWdCQyxLQUFLQyxHQUFMLENBQVNGLFdBQVcsQ0FBWCxDQUFULEVBQXdCRCxFQUF4QixDQUFoQjtBQUNBO0FBQ0FDLGlCQUFXLENBQVgsSUFBZ0JDLEtBQUtFLEdBQUwsQ0FBU0gsV0FBVyxDQUFYLENBQVQsRUFBd0IsQ0FBeEIsQ0FBaEI7O0FBRUEsYUFBT0EsVUFBUDtBQUNEOzs7NENBRXVCSSxRLEVBQVU7QUFDaEMsV0FBS3hDLE9BQUwsQ0FBYStCLEdBQWIsQ0FBaUJTLFFBQWpCO0FBQ0Q7OztnREFFMkJBLFEsRUFBVTtBQUNwQyxXQUFLeEMsT0FBTCxDQUFheUMsTUFBYixDQUFvQkQsUUFBcEI7QUFDRDs7O2dDQUVXO0FBQ1YsV0FBS0UsS0FBTCxDQUFXakMsQ0FBWCxDQUFhLEtBQUtBLENBQWxCLEVBQXFCa0MsTUFBckIsQ0FBNEIsS0FBSy9DLGFBQWpDO0FBQ0EsV0FBSytCLFlBQUwsQ0FBa0JMLE1BQWxCLENBQXlCLFFBQXpCLEVBQW1Dc0IsSUFBbkMsQ0FBd0MsS0FBS0YsS0FBN0M7QUFDQTtBQUNBLFdBQUsxQyxPQUFMLENBQWE2QyxRQUFiLENBQXNCLEtBQUtqRCxhQUEzQjtBQUNBLFdBQUtrRCxNQUFMO0FBQ0EsV0FBS2hDLFVBQUwsQ0FBZ0JGLE1BQWhCLENBQXVCLEtBQUtoQixhQUE1QjtBQUNEOztBQUVEOzs7O29DQUNnQmdCLE0sRUFBUTtBQUN0QixXQUFLaEIsYUFBTCxHQUFxQmdCLE1BQXJCO0FBQ0EsV0FBS21DLFNBQUwsQ0FBZSxLQUFLbkQsYUFBcEI7QUFDRDs7O3NDQUVpQjtBQUNoQixhQUFPLEtBQUtBLGFBQVo7QUFDRDs7O3NDQUdpQnNDLE8sRUFBUztBQUN6QixXQUFLekIsQ0FBTCxDQUFPRyxNQUFQLENBQWMsQ0FBQyxDQUFELEVBQUksS0FBS2pCLEtBQUwsQ0FBV2tCLGFBQWYsQ0FBZDtBQUNBLFdBQUttQyxZQUFMLENBQWtCSixJQUFsQixDQUF1QixLQUFLN0IsS0FBNUI7QUFDQSxXQUFLbkIsYUFBTCxHQUFxQixLQUFLcUQscUJBQUwsQ0FBMkIsS0FBS3JELGFBQWhDLEVBQStDc0MsT0FBL0MsQ0FBckI7QUFDQSxXQUFLYSxTQUFMLENBQWUsS0FBS25ELGFBQXBCO0FBQ0Q7Ozt3Q0FFbUI7QUFBQTs7QUFDbEIsV0FBS29ELFlBQUwsR0FBb0IsS0FBS3JCLFlBQUwsQ0FBa0JGLE1BQWxCLENBQXlCLEdBQXpCLEVBQ2pCQyxJQURpQixDQUNaLE9BRFksRUFDSCxRQURHLEVBRWpCQSxJQUZpQixDQUVaLFdBRlksRUFFQyxrQkFBa0IsS0FBSzNCLE1BQUwsQ0FBWUcsR0FBWixHQUFrQixDQUFwQyxJQUF5QyxHQUYxQyxFQUdqQjBDLElBSGlCLENBR1osS0FBSzdCLEtBSE8sQ0FBcEI7O0FBS0EsVUFBSWYsVUFBVSxTQUFWQSxPQUFVLEdBQU07QUFDbEIsWUFBSWtELFVBQVUsTUFBS1IsS0FBTCxDQUFXQyxNQUFYLEVBQWQ7QUFDQTtBQUNBLFlBQUlRLFFBQVFELFFBQVEsQ0FBUixFQUFXRSxPQUFYLEVBQVo7QUFDQSxZQUFJQyxNQUFNSCxRQUFRLENBQVIsRUFBV0UsT0FBWCxFQUFWO0FBQ0E7QUFDQSxjQUFLeEQsYUFBTCxDQUFtQixDQUFuQixJQUF3QnVELEtBQXhCO0FBQ0EsY0FBS3ZELGFBQUwsQ0FBbUIsQ0FBbkIsSUFBd0J5RCxHQUF4QjtBQUNBLGNBQUtOLFNBQUwsQ0FBZSxNQUFLbkQsYUFBcEI7QUFDRCxPQVREOztBQVdBLFdBQUs4QyxLQUFMLEdBQWFwRCxHQUFHMEIsR0FBSCxDQUFPMEIsS0FBUCxHQUNWakMsQ0FEVSxDQUNSLEtBQUtBLENBREcsRUFFVmtDLE1BRlUsQ0FFSCxLQUFLL0MsYUFGRixFQUdWMEQsRUFIVSxDQUdQLE9BSE8sRUFHRXRELE9BSEYsQ0FBYjs7QUFLQSxXQUFLdUQsTUFBTCxHQUFjLEtBQUs1QixZQUFMLENBQWtCRixNQUFsQixDQUF5QixHQUF6QixFQUNYQyxJQURXLENBQ04sT0FETSxFQUNHLE9BREgsRUFFWGtCLElBRlcsQ0FFTixLQUFLRixLQUZDLEVBR1hjLFNBSFcsQ0FHRCxNQUhDLEVBSVg5QixJQUpXLENBSU4sUUFKTSxFQUlJLEVBSkosQ0FBZDtBQUtEOzs7NkJBRVE7QUFDUCxVQUFJK0IsZ0JBQWdCLEtBQUs5QixZQUFMLENBQWtCNkIsU0FBbEIsQ0FBNEIsaUJBQTVCLENBQXBCO0FBQ0FDLG9CQUFjL0IsSUFBZCxDQUFtQixXQUFuQixFQUFnQyxlQUFlLEtBQUtaLFVBQUwsQ0FBZ0IsS0FBS1AsV0FBTCxDQUFpQixDQUFqQixDQUFoQixDQUFmLEdBQXNELE9BQXRGO0FBQ0Q7Ozt1Q0FFa0I7QUFDakIsVUFBSW1ELE9BQU8sSUFBWDs7QUFFQSxVQUFJQyxlQUFlLFNBQWZBLFlBQWUsR0FBVztBQUM1QixZQUFJQyxRQUFRdEUsR0FBR3NFLEtBQUgsQ0FBU0MsV0FBckI7QUFDQUQsY0FBTUUsZUFBTjtBQUNBLFlBQUlqRSxZQUFZNkQsS0FBSzdELFNBQXJCO0FBQ0EsWUFBSWtFLFVBQVVILE1BQU1uRCxDQUFOLEtBQVl1RCxTQUFaLEdBQXdCSixNQUFNbkQsQ0FBOUIsR0FBa0NtRCxNQUFNSyxPQUF0RDtBQUNBLFlBQUlDLEtBQUtSLEtBQUs1QyxVQUFMLENBQWdCcUQsTUFBaEIsQ0FBdUJKLFVBQVVMLEtBQUszRCxNQUFMLENBQVlNLElBQTdDLENBQVQ7QUFDQTZELGFBQUtBLEdBQUdkLE9BQUgsRUFBTDtBQUNBYyxhQUFLN0IsS0FBS0UsR0FBTCxDQUFTLENBQVQsRUFBWTJCLEVBQVosQ0FBTDs7QUFFQSxZQUFJRSxZQUFZLEtBQWhCOztBQUVBO0FBQ0EsWUFBSTVELE9BQU8wRCxLQUFLLElBQWhCO0FBQ0FFLG9CQUFZLGdCQUFNQyxjQUFOLENBQXFCeEUsVUFBVXlFLElBQS9CLEVBQXFDOUQsSUFBckMsRUFBMkMsaUJBQTNDLEVBQThELEtBQTlELEVBQXFFLEtBQXJFLEVBQTRFLElBQTVFLENBQVo7QUFDQSxZQUFJNEQsY0FBYyxLQUFsQixFQUF5QjtBQUN2QkEsc0JBQVlBLFlBQVksSUFBeEI7QUFDRDs7QUFFRCxZQUFJQSxjQUFjLEtBQWxCLEVBQXlCO0FBQ3ZCQSxzQkFBWUYsRUFBWjtBQUNEO0FBQ0RSLGFBQUsvRCxLQUFMLENBQVc0RSxJQUFYLENBQWdCLENBQUNILFNBQUQsQ0FBaEI7QUFDRCxPQXRCRDs7QUF3QkEsVUFBSUksV0FBV2xGLEdBQUdtRixRQUFILENBQVlDLElBQVosR0FDWkMsTUFEWSxDQUNMLFVBQVNDLENBQVQsRUFBWTtBQUNsQixlQUFPQSxDQUFQO0FBQ0QsT0FIWSxFQUladEIsRUFKWSxDQUlULE1BSlMsRUFJREssWUFKQyxDQUFmOztBQU1BLFVBQUlGLGdCQUFnQixLQUFLOUIsWUFBTCxDQUFrQjZCLFNBQWxCLENBQTRCLGlCQUE1QixFQUErQ2MsSUFBL0MsQ0FBb0QsS0FBSy9ELFdBQXpELENBQXBCOztBQUVBa0Qsb0JBQWNvQixLQUFkLEdBQXNCcEQsTUFBdEIsQ0FBNkIsTUFBN0IsRUFDR0MsSUFESCxDQUNRLEdBRFIsRUFDYSxDQURiLEVBRUdBLElBRkgsQ0FFUSxHQUZSLEVBRWEsRUFGYixFQUdHQSxJQUhILENBR1EsT0FIUixFQUdpQmdDLEtBQUs1QyxVQUFMLENBQWdCNEMsS0FBSy9ELEtBQUwsQ0FBV2tCLGFBQTNCLENBSGpCLEVBSUdhLElBSkgsQ0FJUSxRQUpSLEVBSWtCLEVBSmxCLEVBS0dBLElBTEgsQ0FLUSxjQUxSLEVBS3dCLENBTHhCLEVBTUc0QixFQU5ILENBTU0sT0FOTixFQU1lLFlBQVc7QUFDdEIsWUFBSXdCLFFBQVF4RixHQUFHd0YsS0FBSCxDQUFTLElBQVQsQ0FBWjtBQUNBLFlBQUlaLEtBQUtSLEtBQUs1QyxVQUFMLENBQWdCcUQsTUFBaEIsQ0FBdUJXLE1BQU0sQ0FBTixDQUF2QixDQUFUO0FBQ0FaLGFBQUtBLEdBQUdkLE9BQUgsRUFBTDtBQUNBYyxhQUFLN0IsS0FBS0UsR0FBTCxDQUFTLENBQVQsRUFBWTJCLEVBQVosQ0FBTDtBQUNBUixhQUFLL0QsS0FBTCxDQUFXNEUsSUFBWCxDQUFnQixDQUFDTCxFQUFELENBQWhCO0FBQ0QsT0FaSDs7QUFjQSxVQUFJYSxVQUFVdEIsY0FBY29CLEtBQWQsR0FBc0JwRCxNQUF0QixDQUE2QixHQUE3QixFQUNYQyxJQURXLENBQ04sT0FETSxFQUNHLGdCQURILEVBRVhBLElBRlcsQ0FFTixXQUZNLEVBRU8sb0JBQW9CLEVBQXBCLEdBQXlCLEdBRmhDLEVBR1hrQixJQUhXLENBR040QixRQUhNLENBQWQ7O0FBS0FPLGNBQVF0RCxNQUFSLENBQWUsTUFBZixFQUNHQyxJQURILENBQ1EsT0FEUixFQUNpQixzQkFEakIsRUFFR0EsSUFGSCxDQUVRLEdBRlIsRUFFYSxDQUFDLEdBRmQsRUFHR0EsSUFISCxDQUdRLEdBSFIsRUFHYSxDQUhiLEVBSUdBLElBSkgsQ0FJUSxPQUpSLEVBSWlCLENBSmpCLEVBS0dBLElBTEgsQ0FLUSxRQUxSLEVBS2tCLElBTGxCOztBQU9BcUQsY0FBUXRELE1BQVIsQ0FBZSxNQUFmLEVBQ0dDLElBREgsQ0FDUSxPQURSLEVBQ2lCLHdCQURqQixFQUVHQSxJQUZILENBRVEsR0FGUixFQUVhLDRDQUZiOztBQUlBO0FBQ0E7QUFDQSxXQUFLQyxZQUFMLENBQWtCRixNQUFsQixDQUF5QixNQUF6QixFQUNHQyxJQURILENBQ1EsT0FEUixFQUNpQixZQURqQixFQUVHQSxJQUZILENBRVEsR0FGUixFQUVhLENBQUNnQyxLQUFLM0QsTUFBTCxDQUFZTSxJQUYxQixFQUdHcUIsSUFISCxDQUdRLEdBSFIsRUFHYSxDQUFDZ0MsS0FBSzNELE1BQUwsQ0FBWUcsR0FIMUIsRUFJR3dCLElBSkgsQ0FJUSxPQUpSLEVBSWlCZ0MsS0FBSzNELE1BQUwsQ0FBWU0sSUFBWixHQUFtQixDQUpwQyxFQUtHcUIsSUFMSCxDQUtRLFFBTFIsRUFLa0JnQyxLQUFLcEQsTUFMdkI7QUFNRDs7OzJCQUVNUixLLEVBQU87QUFDWixVQUFJa0YsU0FBU2xGLFFBQVEsS0FBS0MsTUFBTCxDQUFZTSxJQUFwQixHQUEyQixLQUFLTixNQUFMLENBQVlJLEtBQXBEO0FBQ0EsV0FBS2EsR0FBTCxDQUFTVSxJQUFULENBQWMsT0FBZCxFQUF1QnNELFNBQVMsS0FBS2pGLE1BQUwsQ0FBWU0sSUFBckIsR0FBNEIsS0FBS04sTUFBTCxDQUFZSSxLQUEvRDs7QUFFQSxXQUFLTSxDQUFMLENBQU9FLEtBQVAsQ0FBYSxDQUFDLENBQUQsRUFBSXFFLE1BQUosQ0FBYjtBQUNBLFdBQUtsRSxVQUFMLENBQWdCSCxLQUFoQixDQUFzQixDQUFDLENBQUQsRUFBSXFFLE1BQUosQ0FBdEI7QUFDQSxXQUFLaEMsWUFBTCxDQUFrQkosSUFBbEIsQ0FBdUIsS0FBSzdCLEtBQTVCO0FBQ0Q7Ozs7OztrQkF2TWtCdEIsTSIsImZpbGUiOiIxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBkMyA9IHJlcXVpcmUoJ2QzJyk7XG5cbmxldCBTaWduYWxzID0gcmVxdWlyZSgnanMtc2lnbmFscycpO1xuaW1wb3J0IFV0aWxzIGZyb20gJy4uL2NvcmUvVXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIZWFkZXIge1xuICBjb25zdHJ1Y3RvcihlZGl0b3IsIHRpbWVyLCBpbml0aWFsRG9tYWluLCB0d2VlblRpbWUsIHdpZHRoLCBtYXJnaW4pIHtcbiAgICB0aGlzLnRpbWVyID0gdGltZXI7XG4gICAgdGhpcy5pbml0aWFsRG9tYWluID0gaW5pdGlhbERvbWFpbjtcbiAgICB0aGlzLnR3ZWVuVGltZSA9IHR3ZWVuVGltZTtcblxuICAgIHRoaXMub25CcnVzaCA9IG5ldyBTaWduYWxzLlNpZ25hbCgpO1xuICAgIHRoaXMubWFyZ2luID0ge3RvcDogMTAsIHJpZ2h0OiAyMCwgYm90dG9tOiAwLCBsZWZ0OiBtYXJnaW4ubGVmdH07XG4gICAgdGhpcy5oZWlnaHQgPSA1MCAtIHRoaXMubWFyZ2luLnRvcCAtIHRoaXMubWFyZ2luLmJvdHRvbSArIDIwO1xuXG4gICAgdGhpcy5jdXJyZW50VGltZSA9IHRoaXMudGltZXIudGltZTtcbiAgICB0aGlzLnggPSBkMy50aW1lLnNjYWxlKCkucmFuZ2UoWzAsIHdpZHRoXSk7XG4gICAgdGhpcy54LmRvbWFpbihbMCwgdGhpcy50aW1lci50b3RhbER1cmF0aW9uXSk7XG5cbiAgICAvLyBTYW1lIGFzIHRoaXMueCBmcm9tIHRpbWVsaW5lXG4gICAgdGhpcy54RGlzcGxheWVkID0gZDMudGltZS5zY2FsZSgpLnJhbmdlKFswLCB3aWR0aF0pO1xuICAgIHRoaXMueERpc3BsYXllZC5kb21haW4odGhpcy5pbml0aWFsRG9tYWluKTtcblxuICAgIHRoaXMueEF4aXMgPSBkMy5zdmcuYXhpcygpXG4gICAgICAuc2NhbGUodGhpcy54KVxuICAgICAgLm9yaWVudCgndG9wJylcbiAgICAgIC50aWNrU2l6ZSgtNSwgMClcbiAgICAgIC50aWNrRm9ybWF0KFV0aWxzLmZvcm1hdE1pbnV0ZXMpO1xuXG4gICAgdGhpcy5zdmcgPSBkMy5zZWxlY3QoZWRpdG9yLiR0aW1lbGluZS5nZXQoMCkpLnNlbGVjdCgnLnRpbWVsaW5lX19oZWFkZXInKS5hcHBlbmQoJ3N2ZycpXG4gICAgICAuYXR0cignd2lkdGgnLCB3aWR0aCArIHRoaXMubWFyZ2luLmxlZnQgKyB0aGlzLm1hcmdpbi5yaWdodClcbiAgICAgIC5hdHRyKCdoZWlnaHQnLCA1Nik7XG5cbiAgICB0aGlzLnN2Z0NvbnRhaW5lciA9IHRoaXMuc3ZnLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgdGhpcy5tYXJnaW4ubGVmdCArICcsJyArIHRoaXMubWFyZ2luLnRvcCArICcpJyk7XG5cbiAgICB0aGlzLmNyZWF0ZUJydXNoSGFuZGxlKCk7XG4gICAgdGhpcy5jcmVhdGVUaW1lSGFuZGxlKCk7XG4gICAgdGhpcy50aW1lci5kdXJhdGlvbkNoYW5nZWQuYWRkKHRoaXMub25EdXJhdGlvbkNoYW5nZWQuYmluZCh0aGlzKSk7XG4gIH1cblxuICBhZGFwdERvbWFpblRvRHVyYXRpb24oZG9tYWluLCBzZWNvbmRzKSB7XG4gICAgdmFyIG1zID0gc2Vjb25kcyAqIDEwMDA7XG4gICAgdmFyIG5ld19kb21haW4gPSBbZG9tYWluWzBdLCBkb21haW5bMV1dO1xuICAgIC8vIE1ha2UgdGhlIGRvbWFpbiBzbWFsbGVyIG9yIGVxdWFsIHRvIG1zLlxuICAgIG5ld19kb21haW5bMF0gPSBNYXRoLm1pbihuZXdfZG9tYWluWzBdLCBtcyk7XG4gICAgbmV3X2RvbWFpblsxXSA9IE1hdGgubWluKG5ld19kb21haW5bMV0sIG1zKTtcbiAgICAvLyBTaG91bGQgbm90IGdvIGJlbG93IDAuXG4gICAgbmV3X2RvbWFpblswXSA9IE1hdGgubWF4KG5ld19kb21haW5bMF0sIDApO1xuXG4gICAgcmV0dXJuIG5ld19kb21haW47XG4gIH1cblxuICBhZE9uQnJ1c2hDaGFuZ2VMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgIHRoaXMub25CcnVzaC5hZGQobGlzdGVuZXIpO1xuICB9XG5cbiAgcmVtb3ZlT25CcnVzaENoYW5nZUxpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgdGhpcy5vbkJydXNoLnJlbW92ZShsaXN0ZW5lcik7XG4gIH1cblxuICBzZXREb21haW4oKSB7XG4gICAgdGhpcy5icnVzaC54KHRoaXMueCkuZXh0ZW50KHRoaXMuaW5pdGlhbERvbWFpbik7XG4gICAgdGhpcy5zdmdDb250YWluZXIuc2VsZWN0KCcuYnJ1c2gnKS5jYWxsKHRoaXMuYnJ1c2gpO1xuICAgIC8vIFNhbWUgYXMgb25CcnVzaFxuICAgIHRoaXMub25CcnVzaC5kaXNwYXRjaCh0aGlzLmluaXRpYWxEb21haW4pO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy54RGlzcGxheWVkLmRvbWFpbih0aGlzLmluaXRpYWxEb21haW4pO1xuICB9XG5cbiAgLy8gZG9tYWluID0gWzAsMjgwMDcwXVxuICBzZXRIZWFkZXJEb21haW4oZG9tYWluKSB7XG4gICAgdGhpcy5pbml0aWFsRG9tYWluID0gZG9tYWluO1xuICAgIHRoaXMuc2V0RG9tYWluKHRoaXMuaW5pdGlhbERvbWFpbik7XG4gIH1cblxuICBnZXRIZWFkZXJEb21haW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5pdGlhbERvbWFpbjtcbiAgfVxuXG5cbiAgb25EdXJhdGlvbkNoYW5nZWQoc2Vjb25kcykge1xuICAgIHRoaXMueC5kb21haW4oWzAsIHRoaXMudGltZXIudG90YWxEdXJhdGlvbl0pO1xuICAgIHRoaXMueEF4aXNFbGVtZW50LmNhbGwodGhpcy54QXhpcyk7XG4gICAgdGhpcy5pbml0aWFsRG9tYWluID0gdGhpcy5hZGFwdERvbWFpblRvRHVyYXRpb24odGhpcy5pbml0aWFsRG9tYWluLCBzZWNvbmRzKTtcbiAgICB0aGlzLnNldERvbWFpbih0aGlzLmluaXRpYWxEb21haW4pO1xuICB9XG5cbiAgY3JlYXRlQnJ1c2hIYW5kbGUoKSB7XG4gICAgdGhpcy54QXhpc0VsZW1lbnQgPSB0aGlzLnN2Z0NvbnRhaW5lci5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3ggYXhpcycpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCcgKyAodGhpcy5tYXJnaW4udG9wICsgNykgKyAnKScpXG4gICAgICAuY2FsbCh0aGlzLnhBeGlzKTtcblxuICAgIHZhciBvbkJydXNoID0gKCkgPT4ge1xuICAgICAgdmFyIGV4dGVudDAgPSB0aGlzLmJydXNoLmV4dGVudCgpO1xuICAgICAgLy8gR2V0IGRvbWFpbiBhcyBtaWxsaXNlY29uZHMgYW5kIG5vdCBkYXRlLlxuICAgICAgdmFyIHN0YXJ0ID0gZXh0ZW50MFswXS5nZXRUaW1lKCk7XG4gICAgICB2YXIgZW5kID0gZXh0ZW50MFsxXS5nZXRUaW1lKCk7XG4gICAgICAvLyBTZXQgdGhlIGluaXRpYWwgZG9tYWluLlxuICAgICAgdGhpcy5pbml0aWFsRG9tYWluWzBdID0gc3RhcnQ7XG4gICAgICB0aGlzLmluaXRpYWxEb21haW5bMV0gPSBlbmQ7XG4gICAgICB0aGlzLnNldERvbWFpbih0aGlzLmluaXRpYWxEb21haW4pO1xuICAgIH07XG5cbiAgICB0aGlzLmJydXNoID0gZDMuc3ZnLmJydXNoKClcbiAgICAgIC54KHRoaXMueClcbiAgICAgIC5leHRlbnQodGhpcy5pbml0aWFsRG9tYWluKVxuICAgICAgLm9uKCdicnVzaCcsIG9uQnJ1c2gpO1xuXG4gICAgdGhpcy5nQnJ1c2ggPSB0aGlzLnN2Z0NvbnRhaW5lci5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2JydXNoJylcbiAgICAgIC5jYWxsKHRoaXMuYnJ1c2gpXG4gICAgICAuc2VsZWN0QWxsKCdyZWN0JylcbiAgICAgIC5hdHRyKCdoZWlnaHQnLCAyMCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgdmFyIHRpbWVTZWxlY3Rpb24gPSB0aGlzLnN2Z0NvbnRhaW5lci5zZWxlY3RBbGwoJy50aW1lLWluZGljYXRvcicpO1xuICAgIHRpbWVTZWxlY3Rpb24uYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgdGhpcy54RGlzcGxheWVkKHRoaXMuY3VycmVudFRpbWVbMF0pICsgJywgMjUpJyk7XG4gIH1cblxuICBjcmVhdGVUaW1lSGFuZGxlKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciBkcmFnVGltZU1vdmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBldmVudCA9IGQzLmV2ZW50LnNvdXJjZUV2ZW50O1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB2YXIgdHdlZW5UaW1lID0gc2VsZi50d2VlblRpbWU7XG4gICAgICB2YXIgZXZlbnRfeCA9IGV2ZW50LnggIT09IHVuZGVmaW5lZCA/IGV2ZW50LnggOiBldmVudC5jbGllbnRYO1xuICAgICAgdmFyIGR4ID0gc2VsZi54RGlzcGxheWVkLmludmVydChldmVudF94IC0gc2VsZi5tYXJnaW4ubGVmdCk7XG4gICAgICBkeCA9IGR4LmdldFRpbWUoKTtcbiAgICAgIGR4ID0gTWF0aC5tYXgoMCwgZHgpO1xuXG4gICAgICB2YXIgdGltZU1hdGNoID0gZmFsc2U7XG5cbiAgICAgIC8vIEtleSBncmlkIGxvY2suKGV2ZW50LnNoaWZ0S2V5KVxuICAgICAgdmFyIHRpbWUgPSBkeCAvIDEwMDA7XG4gICAgICB0aW1lTWF0Y2ggPSBVdGlscy5nZXRDbG9zZXN0VGltZSh0d2VlblRpbWUuZGF0YSwgdGltZSwgJy0tLW5vbi1leGlzdGFudCcsIGZhbHNlLCBmYWxzZSwgMC4wNSk7XG4gICAgICBpZiAodGltZU1hdGNoICE9PSBmYWxzZSkge1xuICAgICAgICB0aW1lTWF0Y2ggPSB0aW1lTWF0Y2ggKiAxMDAwO1xuICAgICAgfVxuXG4gICAgICBpZiAodGltZU1hdGNoID09PSBmYWxzZSkge1xuICAgICAgICB0aW1lTWF0Y2ggPSBkeDtcbiAgICAgIH1cbiAgICAgIHNlbGYudGltZXIuc2VlayhbdGltZU1hdGNoXSk7XG4gICAgfTtcblxuICAgIHZhciBkcmFnVGltZSA9IGQzLmJlaGF2aW9yLmRyYWcoKVxuICAgICAgLm9yaWdpbihmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBkO1xuICAgICAgfSlcbiAgICAgIC5vbignZHJhZycsIGRyYWdUaW1lTW92ZSk7XG5cbiAgICB2YXIgdGltZVNlbGVjdGlvbiA9IHRoaXMuc3ZnQ29udGFpbmVyLnNlbGVjdEFsbCgnLnRpbWUtaW5kaWNhdG9yJykuZGF0YSh0aGlzLmN1cnJlbnRUaW1lKTtcblxuICAgIHRpbWVTZWxlY3Rpb24uZW50ZXIoKS5hcHBlbmQoJ3JlY3QnKVxuICAgICAgLmF0dHIoJ3gnLCAwKVxuICAgICAgLmF0dHIoJ3knLCAyMClcbiAgICAgIC5hdHRyKCd3aWR0aCcsIHNlbGYueERpc3BsYXllZChzZWxmLnRpbWVyLnRvdGFsRHVyYXRpb24pKVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIDUwKVxuICAgICAgLmF0dHIoJ2ZpbGwtb3BhY2l0eScsIDApXG4gICAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtb3VzZSA9IGQzLm1vdXNlKHRoaXMpO1xuICAgICAgICB2YXIgZHggPSBzZWxmLnhEaXNwbGF5ZWQuaW52ZXJ0KG1vdXNlWzBdKTtcbiAgICAgICAgZHggPSBkeC5nZXRUaW1lKCk7XG4gICAgICAgIGR4ID0gTWF0aC5tYXgoMCwgZHgpO1xuICAgICAgICBzZWxmLnRpbWVyLnNlZWsoW2R4XSk7XG4gICAgICB9KTtcblxuICAgIHZhciB0aW1lR3JwID0gdGltZVNlbGVjdGlvbi5lbnRlcigpLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignY2xhc3MnLCAndGltZS1pbmRpY2F0b3InKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoLTAuNSwnICsgMzAgKyAnKScpXG4gICAgICAuY2FsbChkcmFnVGltZSk7XG5cbiAgICB0aW1lR3JwLmFwcGVuZCgncmVjdCcpXG4gICAgICAuYXR0cignY2xhc3MnLCAndGltZS1pbmRpY2F0b3JfX2xpbmUnKVxuICAgICAgLmF0dHIoJ3gnLCAtMC41KVxuICAgICAgLmF0dHIoJ3knLCAwKVxuICAgICAgLmF0dHIoJ3dpZHRoJywgMSlcbiAgICAgIC5hdHRyKCdoZWlnaHQnLCAxMDAwKTtcblxuICAgIHRpbWVHcnAuYXBwZW5kKCdwYXRoJylcbiAgICAgIC5hdHRyKCdjbGFzcycsICd0aW1lLWluZGljYXRvcl9faGFuZGxlJylcbiAgICAgIC5hdHRyKCdkJywgJ00gLTUgLTMgTCAtNSA1IEwgMCAxMCBMIDUgNSBMIDUgLTMgTCAtNSAtMycpO1xuXG4gICAgLy8gTWFzayB0aW1lIGluZGljYXRvclxuICAgIC8vIHRvZG86IHJlbW92ZSB0aGUgbWFzay5cbiAgICB0aGlzLnN2Z0NvbnRhaW5lci5hcHBlbmQoJ3JlY3QnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2dyYXBoLW1hc2snKVxuICAgICAgLmF0dHIoJ3gnLCAtc2VsZi5tYXJnaW4ubGVmdClcbiAgICAgIC5hdHRyKCd5JywgLXNlbGYubWFyZ2luLnRvcClcbiAgICAgIC5hdHRyKCd3aWR0aCcsIHNlbGYubWFyZ2luLmxlZnQgLSA1KVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIHNlbGYuaGVpZ2h0KTtcbiAgfVxuXG4gIHJlc2l6ZSh3aWR0aCkge1xuICAgIGxldCB3aWR0aDIgPSB3aWR0aCAtIHRoaXMubWFyZ2luLmxlZnQgLSB0aGlzLm1hcmdpbi5yaWdodDtcbiAgICB0aGlzLnN2Zy5hdHRyKCd3aWR0aCcsIHdpZHRoMiArIHRoaXMubWFyZ2luLmxlZnQgKyB0aGlzLm1hcmdpbi5yaWdodCk7XG5cbiAgICB0aGlzLngucmFuZ2UoWzAsIHdpZHRoMl0pO1xuICAgIHRoaXMueERpc3BsYXllZC5yYW5nZShbMCwgd2lkdGgyXSk7XG4gICAgdGhpcy54QXhpc0VsZW1lbnQuY2FsbCh0aGlzLnhBeGlzKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZ3JhcGgvSGVhZGVyLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 16 */
/***/ (function(module, exports) {

	eval("module.exports = __WEBPACK_EXTERNAL_MODULE_16__;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJkM1wiP2MwYzQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMTZfXztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcImQzXCJcbi8vIG1vZHVsZSBpZCA9IDE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 17 */
/***/ (function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TimeIndicator = function () {\n  function TimeIndicator(timeline, container) {\n    _classCallCheck(this, TimeIndicator);\n\n    this.timeline = timeline;\n    this.container = container;\n    this.timeSelection = this.container.selectAll('.time-indicator').data(this.timeline.currentTime);\n    this.timeGrp = this.timeSelection.enter().append('svg').attr('class', 'time-indicator timeline__right-mask').attr('width', window.innerWidth - this.timeline.label_position_x).attr('height', 442);\n\n    this.timeSelection = this.timeGrp.append('rect').attr('class', 'time-indicator__line').attr('x', 0).attr('y', -this.timeline.margin.top - 5).attr('width', 1).attr('height', 1000);\n\n    this.timeSelection = this.container.selectAll('.time-indicator rect');\n  }\n\n  _createClass(TimeIndicator, [{\n    key: 'updateHeight',\n    value: function updateHeight(height) {\n      this.timeGrp.attr('height', height);\n      this.timeSelection.attr('height', height + this.timeline.margin.top + 5);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      this.timeSelection.attr('transform', 'translate(' + (this.timeline.x(this.timeline.currentTime[0]) - 0.5) + ',0)');\n    }\n  }]);\n\n  return TimeIndicator;\n}();\n\nexports.default = TimeIndicator;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ncmFwaC9UaW1lSW5kaWNhdG9yLmpzP2JjODYiXSwibmFtZXMiOlsiVGltZUluZGljYXRvciIsInRpbWVsaW5lIiwiY29udGFpbmVyIiwidGltZVNlbGVjdGlvbiIsInNlbGVjdEFsbCIsImRhdGEiLCJjdXJyZW50VGltZSIsInRpbWVHcnAiLCJlbnRlciIsImFwcGVuZCIsImF0dHIiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwibGFiZWxfcG9zaXRpb25feCIsIm1hcmdpbiIsInRvcCIsImhlaWdodCIsIngiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUJBLGE7QUFDbkIseUJBQVlDLFFBQVosRUFBc0JDLFNBQXRCLEVBQWlDO0FBQUE7O0FBQy9CLFNBQUtELFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQkEsU0FBakI7QUFDQSxTQUFLQyxhQUFMLEdBQXFCLEtBQUtELFNBQUwsQ0FBZUUsU0FBZixDQUF5QixpQkFBekIsRUFBNENDLElBQTVDLENBQWlELEtBQUtKLFFBQUwsQ0FBY0ssV0FBL0QsQ0FBckI7QUFDQSxTQUFLQyxPQUFMLEdBQWUsS0FBS0osYUFBTCxDQUFtQkssS0FBbkIsR0FBMkJDLE1BQTNCLENBQWtDLEtBQWxDLEVBQ1pDLElBRFksQ0FDUCxPQURPLEVBQ0UscUNBREYsRUFFWkEsSUFGWSxDQUVQLE9BRk8sRUFFRUMsT0FBT0MsVUFBUCxHQUFvQixLQUFLWCxRQUFMLENBQWNZLGdCQUZwQyxFQUdaSCxJQUhZLENBR1AsUUFITyxFQUdHLEdBSEgsQ0FBZjs7QUFLQSxTQUFLUCxhQUFMLEdBQXFCLEtBQUtJLE9BQUwsQ0FBYUUsTUFBYixDQUFvQixNQUFwQixFQUNsQkMsSUFEa0IsQ0FDYixPQURhLEVBQ0osc0JBREksRUFFbEJBLElBRmtCLENBRWIsR0FGYSxFQUVSLENBRlEsRUFHbEJBLElBSGtCLENBR2IsR0FIYSxFQUdSLENBQUMsS0FBS1QsUUFBTCxDQUFjYSxNQUFkLENBQXFCQyxHQUF0QixHQUE0QixDQUhwQixFQUlsQkwsSUFKa0IsQ0FJYixPQUphLEVBSUosQ0FKSSxFQUtsQkEsSUFMa0IsQ0FLYixRQUxhLEVBS0gsSUFMRyxDQUFyQjs7QUFPQSxTQUFLUCxhQUFMLEdBQXFCLEtBQUtELFNBQUwsQ0FBZUUsU0FBZixDQUF5QixzQkFBekIsQ0FBckI7QUFDRDs7OztpQ0FFWVksTSxFQUFRO0FBQ25CLFdBQUtULE9BQUwsQ0FBYUcsSUFBYixDQUFrQixRQUFsQixFQUE0Qk0sTUFBNUI7QUFDQSxXQUFLYixhQUFMLENBQW1CTyxJQUFuQixDQUF3QixRQUF4QixFQUFrQ00sU0FBUyxLQUFLZixRQUFMLENBQWNhLE1BQWQsQ0FBcUJDLEdBQTlCLEdBQW9DLENBQXRFO0FBQ0Q7Ozs2QkFFUTtBQUNQLFdBQUtaLGFBQUwsQ0FBbUJPLElBQW5CLENBQXdCLFdBQXhCLEVBQXFDLGdCQUFnQixLQUFLVCxRQUFMLENBQWNnQixDQUFkLENBQWdCLEtBQUtoQixRQUFMLENBQWNLLFdBQWQsQ0FBMEIsQ0FBMUIsQ0FBaEIsSUFBZ0QsR0FBaEUsSUFBdUUsS0FBNUc7QUFDRDs7Ozs7O2tCQTNCa0JOLGEiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBUaW1lSW5kaWNhdG9yIHtcbiAgY29uc3RydWN0b3IodGltZWxpbmUsIGNvbnRhaW5lcikge1xuICAgIHRoaXMudGltZWxpbmUgPSB0aW1lbGluZTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB0aGlzLnRpbWVTZWxlY3Rpb24gPSB0aGlzLmNvbnRhaW5lci5zZWxlY3RBbGwoJy50aW1lLWluZGljYXRvcicpLmRhdGEodGhpcy50aW1lbGluZS5jdXJyZW50VGltZSk7XG4gICAgdGhpcy50aW1lR3JwID0gdGhpcy50aW1lU2VsZWN0aW9uLmVudGVyKCkuYXBwZW5kKCdzdmcnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3RpbWUtaW5kaWNhdG9yIHRpbWVsaW5lX19yaWdodC1tYXNrJylcbiAgICAgIC5hdHRyKCd3aWR0aCcsIHdpbmRvdy5pbm5lcldpZHRoIC0gdGhpcy50aW1lbGluZS5sYWJlbF9wb3NpdGlvbl94KVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIDQ0Mik7XG5cbiAgICB0aGlzLnRpbWVTZWxlY3Rpb24gPSB0aGlzLnRpbWVHcnAuYXBwZW5kKCdyZWN0JylcbiAgICAgIC5hdHRyKCdjbGFzcycsICd0aW1lLWluZGljYXRvcl9fbGluZScpXG4gICAgICAuYXR0cigneCcsIDApXG4gICAgICAuYXR0cigneScsIC10aGlzLnRpbWVsaW5lLm1hcmdpbi50b3AgLSA1KVxuICAgICAgLmF0dHIoJ3dpZHRoJywgMSlcbiAgICAgIC5hdHRyKCdoZWlnaHQnLCAxMDAwKTtcblxuICAgIHRoaXMudGltZVNlbGVjdGlvbiA9IHRoaXMuY29udGFpbmVyLnNlbGVjdEFsbCgnLnRpbWUtaW5kaWNhdG9yIHJlY3QnKTtcbiAgfVxuXG4gIHVwZGF0ZUhlaWdodChoZWlnaHQpIHtcbiAgICB0aGlzLnRpbWVHcnAuYXR0cignaGVpZ2h0JywgaGVpZ2h0KTtcbiAgICB0aGlzLnRpbWVTZWxlY3Rpb24uYXR0cignaGVpZ2h0JywgaGVpZ2h0ICsgdGhpcy50aW1lbGluZS5tYXJnaW4udG9wICsgNSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgdGhpcy50aW1lU2VsZWN0aW9uLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArICh0aGlzLnRpbWVsaW5lLngodGhpcy50aW1lbGluZS5jdXJyZW50VGltZVswXSkgLSAwLjUpICsgJywwKScpO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ncmFwaC9UaW1lSW5kaWNhdG9yLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Utils = __webpack_require__(1);\n\nvar _Utils2 = _interopRequireDefault(_Utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar d3 = __webpack_require__(16);\nvar Signals = __webpack_require__(6);\nvar _ = __webpack_require__(12);\n\nvar Items = function () {\n  function Items(timeline, container) {\n    _classCallCheck(this, Items);\n\n    this.timeline = timeline;\n    this.container = container;\n    this.dy = 10 + this.timeline.margin.top;\n    this.onUpdate = new Signals.Signal();\n    // this.timeline.selectionManager.addOnSelectListener(this.onSelectionChanged.bind(this));\n  }\n\n  // onSelectionChanged(selection) {\n  //   console.log('selection changed');\n  //   if (!selection || selection.length <= 0) {\n  //     d3.selectAll('.line-label').classed('line-selected', false);\n  //   }\n  // }\n\n  _createClass(Items, [{\n    key: 'render',\n    value: function render() {\n      var self = this;\n      var tweenTime = self.timeline.tweenTime;\n      var editor = self.timeline.editor;\n\n      var selectBar = function selectBar(data) {\n        data._dom = this.parentNode;\n        self.timeline.selectionManager.select(data);\n        // d3.selectAll('.line-label').classed('line-selected', false);\n        // d3.select(this).classed('line-selected', true);\n      };\n\n      // const selectProperty = function(data) {\n      //   self.timeline.selectionManager.select(data.properties[0]);\n      // };\n\n\n      var dragmove = function dragmove(d) {\n        var dx = self.timeline.x.invert(d3.event.x).getTime() / 1000;\n        var diff = dx - d.start;\n        d.start += diff;\n        d.end += diff;\n        if (d.properties) {\n          for (var prop_key = 0; prop_key < d.properties.length; prop_key++) {\n            var prop = d.properties[prop_key];\n            for (var i = 0; i < prop.keys.length; i++) {\n              var key = prop.keys[i];\n              key.time += diff;\n            }\n          }\n        }\n        d._isDirty = true;\n        self.onUpdate.dispatch();\n      };\n\n      var dragmoveLeft = function dragmoveLeft(d) {\n        d3.event.sourceEvent.stopPropagation();\n        var sourceEvent = d3.event.sourceEvent;\n        var dx = self.timeline.x.invert(d3.event.x).getTime() / 1000;\n        var timeMatch = false;\n        if (sourceEvent.shiftKey) {\n          timeMatch = _Utils2.default.getClosestTime(tweenTime.data, dx, d.id, false, tweenTime.timer);\n        }\n        if (!timeMatch) {\n          var diff = dx - d.start;\n          timeMatch = d.start + diff;\n        }\n        d.start = timeMatch;\n        d._isDirty = true;\n        self.onUpdate.dispatch();\n      };\n\n      var dragmoveRight = function dragmoveRight(d) {\n        d3.event.sourceEvent.stopPropagation();\n        var sourceEvent = d3.event.sourceEvent;\n        var dx = self.timeline.x.invert(d3.event.x).getTime() / 1000;\n        var timeMatch = false;\n        if (sourceEvent.shiftKey) {\n          timeMatch = _Utils2.default.getClosestTime(tweenTime.data, dx, false, false, tweenTime.timer);\n        }\n        if (!timeMatch) {\n          var diff = dx - d.end;\n          timeMatch = d.end + diff;\n        }\n        d.end = timeMatch;\n        d._isDirty = true;\n        self.onUpdate.dispatch();\n      };\n\n      var dragLeft = d3.behavior.drag().origin(function () {\n        var t = d3.select(this);\n        return { x: t.attr('x'), y: t.attr('y') };\n      }).on('drag', dragmoveLeft);\n\n      var dragRight = d3.behavior.drag().origin(function () {\n        var t = d3.select(this);\n        return { x: t.attr('x'), y: t.attr('y') };\n      }).on('drag', dragmoveRight);\n\n      var drag = d3.behavior.drag().origin(function () {\n        var t = d3.select(this);\n        return { x: t.attr('x'), y: t.attr('y') };\n      }).on('drag', dragmove);\n\n      // remove whole data once in order to update\n      // there should be a better way tho\n      this.container.selectAll('.line-grp').data([]).exit().remove();\n\n      var bar_border = 1;\n      var bar = this.container.selectAll('.line-grp').data(this.timeline.tweenTime.data, function (d) {\n        return d.id;\n      });\n\n      var barEnter = bar.enter().append('g').attr('class', 'line-grp').attr('data-element-type', function (d) {\n        return d.elementType || 'unknown';\n      });\n\n      // Create highlight layer\n      barEnter.append('rect').attr('class', 'highlight-layer').attr('x', -300).attr('y', 0).attr('width', window.innerWidth - self.timeline.label_position_x).attr('height', 22);\n\n      var barContainerRight = barEnter.append('svg').attr({\n        class: 'timeline__right-mask',\n        y: self.timeline.lineHeight / 2 - 12,\n        width: window.innerWidth - self.timeline.label_position_x\n      });\n\n      bar.select('.timeline__right-mask').attr({\n        display: function display() {\n          return self.timeline.editor.curveEditEnabled ? 'none' : 'block';\n        },\n        height: function height(d) {\n          return (d.properties.length + 1) * self.timeline.lineHeight;\n        }\n      });\n\n      barContainerRight.append('rect').attr('class', 'bar')\n      // Add a unique id for SelectionManager.removeDuplicates\n      .attr('id', function () {\n        return _Utils2.default.guid();\n      }).attr('y', 3).attr('height', 14);\n\n      barContainerRight.append('rect').attr('class', 'bar-anchor bar-anchor--left').attr('y', 2).attr('height', 16).attr('width', 6).call(dragLeft);\n\n      barContainerRight.append('rect').attr('class', 'bar-anchor bar-anchor--right').attr('y', 2).attr('height', 16).attr('width', 6).call(dragRight);\n\n      self.dy = 10 + this.timeline.margin.top;\n      bar.attr('transform', function (d) {\n        var y = self.dy;\n        self.dy += self.timeline.lineHeight;\n        if (!d.collapsed) {\n          var numProperties = 0;\n          if (d.properties) {\n            var visibleProperties = _.filter(d.properties, function (prop) {\n              return prop.keys.length;\n            }).filter(function (p) {\n              return !p.parent;\n            });\n            numProperties = visibleProperties.length;\n          }\n          self.dy += numProperties * self.timeline.lineHeight;\n        }\n        return 'translate(0,' + y + ')';\n      });\n\n      var barWithStartAndEnd = function barWithStartAndEnd(d) {\n        if (d.start !== undefined && d.end !== undefined) {\n          return true;\n        }\n        return false;\n      };\n\n      bar.selectAll('.bar-anchor--left').filter(barWithStartAndEnd).attr('x', function (d) {\n        return self.timeline.x(d.start * 1000) - 1;\n      }).on('mousedown', function () {\n        // Don't trigger mousedown on linescontainer else\n        // it create the selection rectangle\n        d3.event.stopPropagation();\n      });\n\n      bar.selectAll('.bar-anchor--right').filter(barWithStartAndEnd).attr('x', function (d) {\n        return self.timeline.x(d.end * 1000) - 1;\n      }).on('mousedown', function () {\n        // Don't trigger mousedown on linescontainer else\n        // it create the selection rectangle\n        d3.event.stopPropagation();\n      });\n\n      bar.selectAll('.bar').filter(barWithStartAndEnd).attr('x', function (d) {\n        return self.timeline.x(d.start * 1000) + bar_border;\n      }).attr('width', function (d) {\n        return Math.max(0, (self.timeline.x(d.end) - self.timeline.x(d.start)) * 1000 - bar_border);\n      }).call(drag).on('click', selectBar)\n      // .on('dblclick', selectProperty)\n      .on('mousedown', function () {\n        // Don't trigger mousedown on linescontainer else\n        // it create the selection rectangle\n        d3.event.stopPropagation();\n      });\n\n      function indentWidthOf(d) {\n        return d.indentLevel ? d.indentLevel * 16 : 0;\n      }\n\n      function wrap(d) {\n        var width = 200 - indentWidthOf(d);\n        var padding = 2;\n        var _self = d3.select(this);\n        var textLength = _self.node().getComputedTextLength();\n        var text = _self.text();\n        while (textLength > width - 2 * padding && text.length > 0) {\n          text = text.slice(0, -1);\n          _self.text(text + '...');\n          textLength = _self.node().getComputedTextLength();\n        }\n      }\n\n      var lineLabelStyle = [self.timeline.fontFamily && 'font-family: ' + self.timeline.fontFamily, self.timeline.fontSize && 'font-size: ' + self.timeline.fontSize + 'px'].filter(function (d) {\n        return d;\n      }).join(';');\n      barEnter.append('text').attr('class', 'line-label').attr('style', lineLabelStyle).attr('x', function (d) {\n        return self.timeline.label_position_x + indentWidthOf(d) + self.timeline.fontSize + 10;\n      }).attr('y', self.timeline.lineHeight / 2).attr('dy', '0.3em') // centering\n      .text(function (d) {\n        return d.label;\n      }).each(wrap).on('click', selectBar)\n      // .on('dblclick', selectProperty)\n      .on('mousedown', function () {\n        // Don't trigger mousedown on linescontainer else\n        // it create the selection rectangle\n        d3.event.stopPropagation();\n      });\n\n      barEnter.append('rect').attr('class', 'line-colorSample').attr('x', function (d) {\n        return self.timeline.label_position_x + indentWidthOf(d) + 5;\n      }).attr('y', (self.timeline.lineHeight - self.timeline.fontSize) / 2).attr('width', self.timeline.fontSize).attr('height', self.timeline.fontSize);\n\n      barEnter.append('text').attr('class', 'line__toggle').attr('x', function (d) {\n        return self.timeline.label_position_x - 10 + indentWidthOf(d);\n      }).attr('y', self.timeline.lineHeight / 2).attr('dy', '0.3em') // centering\n      .on('click', function (d) {\n        var foundItem = _.find(self.timeline.tweenTime.data, { id: d.id });\n        foundItem.collapsed = !foundItem.collapsed;\n        self.onUpdate.dispatch();\n      });\n\n      bar.selectAll('.line__toggle').text(function (d) {\n        var foundItem = _.find(self.timeline.tweenTime.data, { id: d.id });\n        if (foundItem.collapsed) {\n          return '▸';\n        }\n        return '▾';\n      });\n\n      barEnter.append('line').attr('class', 'line-separator').attr('x1', -self.timeline.margin.left).attr('y1', self.timeline.lineHeight).attr('y2', self.timeline.lineHeight);\n\n      // Hide property line separator if curve editor is enabled.\n      bar.selectAll('.line-separator').attr('x2', function () {\n        if (editor.curveEditEnabled) {\n          return 0;\n        }\n        return self.timeline.x(self.timeline.timer.totalDuration + 100);\n      });\n\n      bar.exit().remove();\n\n      return bar;\n    }\n  }]);\n\n  return Items;\n}();\n\nexports.default = Items;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 19 */
/***/ (function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar KeysPreview = function () {\n  function KeysPreview(timeline, container) {\n    _classCallCheck(this, KeysPreview);\n\n    this.timeline = timeline;\n    this.container = container;\n  }\n\n  _createClass(KeysPreview, [{\n    key: 'render',\n    value: function render(bar) {\n      var self = this;\n\n      var propVal = function propVal(d) {\n        if (d.properties) {\n          return d.properties;\n        }\n\n        return [];\n      };\n      var propKey = function propKey(d) {\n        return d.name;\n      };\n\n      var properties = bar.select('.timeline__right-mask').selectAll('.keys-preview').data(propVal, propKey);\n\n      properties.enter().append('g').attr('class', 'keys-preview');\n\n      var setItemStyle = function setItemStyle(d) {\n        if (!d._property || !d._property._line) {\n          return 'display: none;';\n        }\n        var lineData = d._property._line;\n        if (lineData.collapsed === true) {\n          return '';\n        }\n        // Show only when item is collapsed\n        return 'display: none;';\n      };\n\n      properties.selectAll('.key--preview').attr('style', setItemStyle);\n\n      var keyValue = function keyValue(d) {\n        return d.keys;\n      };\n      var keyKey = function keyKey(d) {\n        return d.time;\n      };\n      var keys = properties.selectAll('.key--preview').data(keyValue, keyKey);\n\n      keys.enter().append('path').attr('class', 'key--preview').attr('style', setItemStyle).attr('d', 'M 0 -4 L 4 0 L 0 4 L -4 0');\n\n      keys.attr('transform', function (d) {\n        var dx = self.timeline.x(d.time * 1000);\n        dx = parseInt(dx, 10);\n        var dy = 11;\n        return 'translate(' + dx + ',' + dy + ')';\n      });\n\n      keys.exit().remove();\n    }\n  }]);\n\n  return KeysPreview;\n}();\n\nexports.default = KeysPreview;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ncmFwaC9LZXlzUHJldmlldy5qcz9mYWM3Il0sIm5hbWVzIjpbIktleXNQcmV2aWV3IiwidGltZWxpbmUiLCJjb250YWluZXIiLCJiYXIiLCJzZWxmIiwicHJvcFZhbCIsImQiLCJwcm9wZXJ0aWVzIiwicHJvcEtleSIsIm5hbWUiLCJzZWxlY3QiLCJzZWxlY3RBbGwiLCJkYXRhIiwiZW50ZXIiLCJhcHBlbmQiLCJhdHRyIiwic2V0SXRlbVN0eWxlIiwiX3Byb3BlcnR5IiwiX2xpbmUiLCJsaW5lRGF0YSIsImNvbGxhcHNlZCIsImtleVZhbHVlIiwia2V5cyIsImtleUtleSIsInRpbWUiLCJkeCIsIngiLCJwYXJzZUludCIsImR5IiwiZXhpdCIsInJlbW92ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQkEsVztBQUNuQix1QkFBWUMsUUFBWixFQUFzQkMsU0FBdEIsRUFBaUM7QUFBQTs7QUFDL0IsU0FBS0QsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxTQUFLQyxTQUFMLEdBQWlCQSxTQUFqQjtBQUNEOzs7OzJCQUVNQyxHLEVBQUs7QUFDVixVQUFJQyxPQUFPLElBQVg7O0FBRUEsVUFBSUMsVUFBVSxTQUFWQSxPQUFVLENBQVNDLENBQVQsRUFBWTtBQUN4QixZQUFJQSxFQUFFQyxVQUFOLEVBQWtCO0FBQ2hCLGlCQUFPRCxFQUFFQyxVQUFUO0FBQ0Q7O0FBRUQsZUFBTyxFQUFQO0FBQ0QsT0FORDtBQU9BLFVBQUlDLFVBQVUsU0FBVkEsT0FBVSxDQUFTRixDQUFULEVBQVk7QUFDeEIsZUFBT0EsRUFBRUcsSUFBVDtBQUNELE9BRkQ7O0FBSUEsVUFBSUYsYUFBYUosSUFBSU8sTUFBSixDQUFXLHVCQUFYLEVBQW9DQyxTQUFwQyxDQUE4QyxlQUE5QyxFQUErREMsSUFBL0QsQ0FBb0VQLE9BQXBFLEVBQTZFRyxPQUE3RSxDQUFqQjs7QUFFQUQsaUJBQVdNLEtBQVgsR0FDR0MsTUFESCxDQUNVLEdBRFYsRUFFR0MsSUFGSCxDQUVRLE9BRlIsRUFFaUIsY0FGakI7O0FBSUEsVUFBSUMsZUFBZSxTQUFmQSxZQUFlLENBQVNWLENBQVQsRUFBWTtBQUM3QixZQUFJLENBQUNBLEVBQUVXLFNBQUgsSUFBZ0IsQ0FBQ1gsRUFBRVcsU0FBRixDQUFZQyxLQUFqQyxFQUF3QztBQUN0QyxpQkFBTyxnQkFBUDtBQUNEO0FBQ0QsWUFBTUMsV0FBV2IsRUFBRVcsU0FBRixDQUFZQyxLQUE3QjtBQUNBLFlBQUlDLFNBQVNDLFNBQVQsS0FBdUIsSUFBM0IsRUFBaUM7QUFDL0IsaUJBQU8sRUFBUDtBQUNEO0FBQ0Q7QUFDQSxlQUFPLGdCQUFQO0FBQ0QsT0FWRDs7QUFZQWIsaUJBQVdJLFNBQVgsQ0FBcUIsZUFBckIsRUFDR0ksSUFESCxDQUNRLE9BRFIsRUFDaUJDLFlBRGpCOztBQUdBLFVBQUlLLFdBQVcsU0FBWEEsUUFBVyxDQUFTZixDQUFULEVBQVk7QUFDekIsZUFBT0EsRUFBRWdCLElBQVQ7QUFDRCxPQUZEO0FBR0EsVUFBSUMsU0FBUyxTQUFUQSxNQUFTLENBQVNqQixDQUFULEVBQVk7QUFDdkIsZUFBT0EsRUFBRWtCLElBQVQ7QUFDRCxPQUZEO0FBR0EsVUFBSUYsT0FBT2YsV0FBV0ksU0FBWCxDQUFxQixlQUFyQixFQUFzQ0MsSUFBdEMsQ0FBMkNTLFFBQTNDLEVBQXFERSxNQUFyRCxDQUFYOztBQUVBRCxXQUFLVCxLQUFMLEdBQ0dDLE1BREgsQ0FDVSxNQURWLEVBRUdDLElBRkgsQ0FFUSxPQUZSLEVBRWlCLGNBRmpCLEVBR0dBLElBSEgsQ0FHUSxPQUhSLEVBR2lCQyxZQUhqQixFQUlHRCxJQUpILENBSVEsR0FKUixFQUlhLDJCQUpiOztBQU1BTyxXQUFLUCxJQUFMLENBQVUsV0FBVixFQUF1QixVQUFTVCxDQUFULEVBQVk7QUFDakMsWUFBSW1CLEtBQUtyQixLQUFLSCxRQUFMLENBQWN5QixDQUFkLENBQWdCcEIsRUFBRWtCLElBQUYsR0FBUyxJQUF6QixDQUFUO0FBQ0FDLGFBQUtFLFNBQVNGLEVBQVQsRUFBYSxFQUFiLENBQUw7QUFDQSxZQUFJRyxLQUFLLEVBQVQ7QUFDQSxlQUFPLGVBQWVILEVBQWYsR0FBb0IsR0FBcEIsR0FBMEJHLEVBQTFCLEdBQStCLEdBQXRDO0FBQ0QsT0FMRDs7QUFPQU4sV0FBS08sSUFBTCxHQUFZQyxNQUFaO0FBQ0Q7Ozs7OztrQkEvRGtCOUIsVyIsImZpbGUiOiIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEtleXNQcmV2aWV3IHtcbiAgY29uc3RydWN0b3IodGltZWxpbmUsIGNvbnRhaW5lcikge1xuICAgIHRoaXMudGltZWxpbmUgPSB0aW1lbGluZTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgfVxuXG4gIHJlbmRlcihiYXIpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB2YXIgcHJvcFZhbCA9IGZ1bmN0aW9uKGQpIHtcbiAgICAgIGlmIChkLnByb3BlcnRpZXMpIHtcbiAgICAgICAgcmV0dXJuIGQucHJvcGVydGllcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFtdO1xuICAgIH07XG4gICAgdmFyIHByb3BLZXkgPSBmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4gZC5uYW1lO1xuICAgIH07XG5cbiAgICB2YXIgcHJvcGVydGllcyA9IGJhci5zZWxlY3QoJy50aW1lbGluZV9fcmlnaHQtbWFzaycpLnNlbGVjdEFsbCgnLmtleXMtcHJldmlldycpLmRhdGEocHJvcFZhbCwgcHJvcEtleSk7XG5cbiAgICBwcm9wZXJ0aWVzLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2tleXMtcHJldmlldycpO1xuXG4gICAgdmFyIHNldEl0ZW1TdHlsZSA9IGZ1bmN0aW9uKGQpIHtcbiAgICAgIGlmICghZC5fcHJvcGVydHkgfHwgIWQuX3Byb3BlcnR5Ll9saW5lKSB7XG4gICAgICAgIHJldHVybiAnZGlzcGxheTogbm9uZTsnO1xuICAgICAgfVxuICAgICAgY29uc3QgbGluZURhdGEgPSBkLl9wcm9wZXJ0eS5fbGluZTtcbiAgICAgIGlmIChsaW5lRGF0YS5jb2xsYXBzZWQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgLy8gU2hvdyBvbmx5IHdoZW4gaXRlbSBpcyBjb2xsYXBzZWRcbiAgICAgIHJldHVybiAnZGlzcGxheTogbm9uZTsnO1xuICAgIH07XG5cbiAgICBwcm9wZXJ0aWVzLnNlbGVjdEFsbCgnLmtleS0tcHJldmlldycpXG4gICAgICAuYXR0cignc3R5bGUnLCBzZXRJdGVtU3R5bGUpO1xuXG4gICAgdmFyIGtleVZhbHVlID0gZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIGQua2V5cztcbiAgICB9O1xuICAgIHZhciBrZXlLZXkgPSBmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4gZC50aW1lO1xuICAgIH07XG4gICAgdmFyIGtleXMgPSBwcm9wZXJ0aWVzLnNlbGVjdEFsbCgnLmtleS0tcHJldmlldycpLmRhdGEoa2V5VmFsdWUsIGtleUtleSk7XG5cbiAgICBrZXlzLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2tleS0tcHJldmlldycpXG4gICAgICAuYXR0cignc3R5bGUnLCBzZXRJdGVtU3R5bGUpXG4gICAgICAuYXR0cignZCcsICdNIDAgLTQgTCA0IDAgTCAwIDQgTCAtNCAwJyk7XG5cbiAgICBrZXlzLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQpIHtcbiAgICAgIGxldCBkeCA9IHNlbGYudGltZWxpbmUueChkLnRpbWUgKiAxMDAwKTtcbiAgICAgIGR4ID0gcGFyc2VJbnQoZHgsIDEwKTtcbiAgICAgIGxldCBkeSA9IDExO1xuICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIGR4ICsgJywnICsgZHkgKyAnKSc7XG4gICAgfSk7XG5cbiAgICBrZXlzLmV4aXQoKS5yZW1vdmUoKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZ3JhcGgvS2V5c1ByZXZpZXcuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Utils = __webpack_require__(1);\n\nvar _Utils2 = _interopRequireDefault(_Utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar d3 = __webpack_require__(16);\nvar Signals = __webpack_require__(6);\n\nvar Properties = function () {\n  function Properties(timeline) {\n    _classCallCheck(this, Properties);\n\n    this.timeline = timeline;\n    this.onKeyAdded = new Signals.Signal();\n    this.subGrp = false;\n  }\n\n  _createClass(Properties, [{\n    key: 'propertyVal',\n    value: function propertyVal(d) {\n      var filtered = [];\n      if (d.properties) {\n        if (this.timeline.editor.options.showEmptyProperties) {\n          filtered = d.properties;\n        } else {\n          filtered = d.properties.filter(function (prop) {\n            return prop.keys.length;\n          });\n        }\n\n        // filter out properties with parent set\n        filtered = filtered.filter(function (p) {\n          return !p.parent;\n        });\n      }\n      return filtered;\n    }\n  }, {\n    key: 'propertyKey',\n    value: function propertyKey(d) {\n      return d.name;\n    }\n  }, {\n    key: 'setSublineHeight',\n    value: function setSublineHeight(d, i) {\n      var sub_height = (i + 1) * this.timeline.lineHeight;\n      return 'translate(0,' + sub_height + ')';\n    }\n  }, {\n    key: 'render',\n    value: function render(bar) {\n      var _this2 = this;\n\n      var self = this;\n      var editor = this.timeline.editor;\n      var core = editor.tweenTime;\n\n      var properties = bar.selectAll('.line-item').data(function (d) {\n        return _this2.propertyVal(d);\n      }, this.propertyKey);\n      var subGrp = properties.enter().append('g').attr('class', 'line-item');\n\n      // Save subGrp in a variable for use in Errors.coffee\n      self.subGrp = subGrp;\n\n      properties.attr('transform', function (d, i) {\n        return _this2.setSublineHeight(d, i);\n      });\n\n      subGrp.append('rect').attr('class', 'click-handler click-handler--property').attr('x', 0).attr('y', 0).attr('width', self.timeline.x(self.timeline.timer.totalDuration + 100)).attr('height', self.timeline.lineHeight).on('dblclick', function (d) {\n        var lineValue = d._line;\n        var def = d.default ? d.default : 0;\n        var mouse = d3.mouse(this);\n        var dx = self.timeline.x.invert(mouse[0]);\n        if (dx < 0) {\n          dx = 0;\n        }\n        dx = dx.getTime() / 1000;\n        dx = _Utils2.default.roundTimeFloat(dx);\n        var prevKey = _Utils2.default.getPreviousKey(d.keys, dx);\n        // set the value to match the previous key if we found one\n        if (prevKey) {\n          def = prevKey.value;\n        }\n        // d._line = lineValue;\n        var newKey = {\n          time: dx,\n          value: def,\n          _property: d\n        };\n        if (core.options.defaultEase) {\n          newKey.ease = core.options.defaultEase;\n        }\n\n        d.keys.push(newKey);\n        // Sort the keys for tweens creation\n        d.keys = _Utils2.default.sortKeys(d.keys);\n        lineValue._isDirty = true;\n\n        lineValue._isDirty = true;\n        self.onKeyAdded.dispatch(newKey);\n      });\n\n      // Mask\n      subGrp.append('svg').attr('class', 'line-item__keys timeline__right-mask').attr('width', window.innerWidth - self.timeline.label_position_x).attr('height', self.timeline.lineHeight);\n\n      this.renderPropertiesLabel(bar, properties);\n\n      subGrp.append('line').attr('class', 'line-separator--secondary').attr('x1', -self.timeline.margin.left).attr('y1', self.timeline.lineHeight).attr('y2', self.timeline.lineHeight);\n\n      // Hide property line separator if curve editor is enabled.\n      bar.selectAll('.line-separator--secondary').attr('x2', function () {\n        if (editor.curveEditEnabled) {\n          return 0;\n        }\n        return self.timeline.x(self.timeline.timer.totalDuration + 100);\n      });\n\n      bar.selectAll('.line-item').attr('display', function (property) {\n        if (property._line.collapsed) {\n          return 'none';\n        }\n        return 'block';\n      });\n\n      // Hide click handler if curve editor mode.\n      bar.selectAll('.click-handler').attr('display', function () {\n        if (!editor.curveEditEnabled) {\n          return 'block';\n        }\n        return 'none';\n      });\n\n      properties.exit().remove();\n\n      return properties;\n    }\n  }, {\n    key: 'renderPropertiesLabel',\n    value: function renderPropertiesLabel(bar, subGrp) {\n      var _this = this;\n      subGrp.selectAll('.line-label.line-label--sub.line-label--small').remove();\n      subGrp.append('text').attr({\n        class: 'line-label line-label--sub line-label--small',\n        x: this.timeline.label_position_x + 20,\n        y: this.timeline.lineHeight / 2,\n        dy: '0.3em' // centering\n      }).text(function (d) {\n        return d.name;\n      }).on('click', function (d) {\n        d._dom = this.parentElement.parentElement;\n        _this.timeline.selectionManager.select(d);\n      });\n    }\n  }]);\n\n  return Properties;\n}();\n\nexports.default = Properties;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Utils = __webpack_require__(1);\n\nvar _Utils2 = _interopRequireDefault(_Utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar d3 = __webpack_require__(16);\nvar Signals = __webpack_require__(6);\n\n\nvar MAX_HEIGHT = 190;\n\nvar PropertyCurveEdit = function () {\n  function PropertyCurveEdit(timeline, container) {\n    _classCallCheck(this, PropertyCurveEdit);\n\n    this.timeline = timeline;\n    this.container = container;\n    this.dy = 10 + this.timeline.margin.top;\n    this.onCurveUpdated = new Signals.Signal();\n  }\n\n  _createClass(PropertyCurveEdit, [{\n    key: 'normalizeVal',\n    value: function normalizeVal(val, min, max, min2, max2) {\n      if (min === min2 && max === max2) {\n        return val;\n      }\n      var diff = max - min;\n      var diff2 = max2 - min2;\n      var t = (val - min) / diff;\n      return min2 + t * diff2;\n    }\n\n    // Get bezier point from easing (0 to 1) and previous and next point.\n\n  }, {\n    key: 'bezierPoint',\n    value: function bezierPoint(pt, prev, next) {\n      var x = this.normalizeVal(pt.x, 0, 1, prev.x, next.x);\n      var y = this.normalizeVal(pt.y, 0, 1, prev.y, next.y);\n      return { x: x, y: y };\n    }\n\n    // Transform an array of points to a SVG bezier path.\n\n  }, {\n    key: 'getPath',\n    value: function getPath(points) {\n      // Path first start by Move command (absolute);\n      var p = 'M ' + points[0].x + ' ' + points[0].y;\n      // Then it's C a.x a.y, b.x b.y, c.x x.y\n      points.forEach(function (pt, i) {\n        // Drop first one since already in 'M' command above.\n        if (i > 0) {\n          p += ', ';\n          if ((i - 1) % 3 === 0) {\n            p += 'C ';\n          }\n          if (isNaN(pt.x) || isNaN(pt.y)) {\n            return false;\n          }\n          p += pt.x + ' ' + pt.y;\n        }\n      });\n      return p;\n    }\n  }, {\n    key: 'processCurveValues',\n    value: function processCurveValues(d) {\n      var _this = this;\n\n      var invalid = false;\n      if (d.keys.length <= 1) {\n        d._curvePoints = [];\n        d._curvePointsBezier = [];\n        d._controlPoints = [];\n        return [{ points: [], name: d.name }];\n      }\n      // preprocess min and max for keys.\n      d._min = d3.min(d.keys, function (k) {\n        return k.value;\n      });\n      d._max = d3.max(d.keys, function (k) {\n        return k.value;\n      });\n\n      d._curvePoints = [];\n      // set raw points, without bezier control yet.\n      d.keys.forEach(function (key) {\n        var x = _this.timeline.x(key.time * 1000);\n        var y = _this.normalizeVal(key.value, d._min, d._max, 0, MAX_HEIGHT);\n        d._curvePoints.push({ x: x, y: y, ease: key.ease, id: 'curve1-' + key._id, _key: key });\n      });\n\n      // Control points, grouped by point + handle.\n      d._controlPoints = [];\n      // Add all points, with controls bezier. (p1, bezier1, bezier2, p2, …).\n      d._curvePointsBezier = [];\n      d._curvePoints.forEach(function (pt, i) {\n        var next = d._curvePoints[i + 1];\n        // If non number points return an empty path.\n        if (isNaN(pt.x) || isNaN(pt.y)) {\n          invalid = true;\n        }\n        d._curvePointsBezier.push({ x: pt.x, y: pt.y, ease: pt.ease, _key: pt._key });\n        if (next) {\n          var easing = _Utils2.default.getEasingPoints(next.ease);\n          var p1 = _this.bezierPoint({ x: easing[0], y: easing[1] }, pt, next);\n          var p2 = _this.bezierPoint({ x: easing[2], y: easing[3] }, pt, next);\n\n          // Save prev point for time calculation on drag move.\n          p1._next = next;\n          p2._next = next;\n          p1._prev = pt;\n          p2._prev = pt;\n          // The index of the handles in the easing.\n          p1._Xindex = 0;\n          p1._Yindex = 1;\n          p2._Xindex = 2;\n          p2._Yindex = 3;\n          d._curvePointsBezier.push(p1);\n          d._curvePointsBezier.push(p2);\n          // If non number points return an empty path.\n          if (isNaN(next.x) || isNaN(next.y) || isNaN(p1.x) || isNaN(p1.y) || isNaN(p2.x) || isNaN(p2.y)) {\n            invalid = true;\n          }\n          d._controlPoints.push({ point: pt, handle: p1, id: pt._key._id + '-a' });\n          d._controlPoints.push({ point: next, handle: p2, id: pt._key._id + '-b' });\n        }\n      });\n      var path = this.getPath(d._curvePointsBezier);\n      // If invalid path (non number points) return an empty path.\n      if (!path || invalid) {\n        d._curvePoints = [];\n        d._curvePointsBezier = [];\n        d._controlPoints = [];\n        return [{ points: [], name: d.name }];\n      }\n      return [{ points: d._curvePoints, path: path, name: d.name }];\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n\n      var bar = this.container.selectAll('.curve-grp').data(this.timeline.tweenTime.data, function (d) {\n        return d.id;\n      });\n\n      bar.enter().append('svg').attr('class', 'curve-grp timeline__right-mask');\n\n      // Show curves only if curve editor mode.\n      bar.attr('display', function (d) {\n        var selection = self.timeline.selectionManager.getSelection();\n\n        if (_this2.timeline.editor.curveEditEnabled) {\n          // Check if this item is in selection.\n          for (var i = 0; i < selection.length; i++) {\n            if (selection[i].id === d.id) {\n              return 'block';\n            }\n            // If we selected a property inside the item.\n            if (selection[i]._line && selection[i]._line.id === d.id) {\n              return 'block';\n            }\n          }\n        }\n        return 'none';\n      });\n\n      bar.exit().remove();\n\n      var propVal1 = function propVal1(d) {\n        return d.properties || [];\n      };\n      var propKey1 = function propKey1(d) {\n        return d.name;\n      };\n\n      var properties = bar.selectAll('.curves-preview').data(propVal1, propKey1).attr('display', function (d) {\n        var selection = self.timeline.selectionManager.getSelection();\n        for (var i = 0; i < selection.length; i++) {\n          var selectedItem = selection[i];\n          if (selectedItem.name && selectedItem.name === d.name) {\n            // Also check that it is from the same item.\n            if (selectedItem._line.id === d._line.id) {\n              return 'block';\n            }\n          }\n          // If we have selected the whole item show the curve too.\n          if (selectedItem.id && selectedItem.id === d._line.id) {\n            return 'block';\n          }\n        }\n        return 'none';\n      });\n\n      properties.enter().append('g').attr({\n        class: 'curves-preview',\n        transform: 'translate(0,10)',\n        width: window.innerWidth - this.timeline.label_position_x,\n        height: 300\n      });\n\n      properties.exit().remove();\n\n      var curveKey = function curveKey(d) {\n        return d.name;\n      };\n      var curves = properties.selectAll('.curve').data(function (d) {\n        return _this2.processCurveValues(d);\n      }, curveKey);\n\n      curves.enter().append('path').attr({\n        class: 'curve',\n        fill: 'none',\n        stroke: '#aaa'\n      });\n\n      curves.attr('d', function (d) {\n        return d.path;\n      });\n\n      curves.exit().remove();\n\n      var pointVal = function pointVal(d) {\n        return d._curvePoints || [];\n      };\n      var pointKey = function pointKey(d) {\n        return d.id;\n      };\n      var handleVal = function handleVal(d) {\n        return d._controlPoints || [];\n      };\n      var handleKey = function handleKey(d) {\n        return d.id;\n      };\n\n      var handle = properties.selectAll('.curve__handle').data(handleVal, handleKey);\n\n      var handleLine = properties.selectAll('.curve__handle-line').data(handleVal, handleKey);\n\n      var points = properties.selectAll('.curve__point').data(pointVal, pointKey);\n\n      // Handle line.\n      var dragHandleStart = function dragHandleStart(d) {\n        var event = d3.event;\n        // with dragstart event the mousevent is is inside the event.sourcEvent\n        if (event.sourceEvent) {\n          event = event.sourceEvent;\n        }\n\n        // Also keep a reference to the key dom element.\n        d._dom = this;\n      };\n\n      var dragHandleMove = function dragHandleMove(d) {\n        var point = d.handle._next;\n        var prev = d.handle._prev;\n        var key = point._key;\n        var propertyData = prev._key._property;\n        var itemData = propertyData._line;\n\n        // Get ease array.\n        var ease = _Utils2.default.getEasingPoints(point.ease);\n        var timeBetweenPrevNext = key.time - prev._key.time;\n\n        var mouse = d3.mouse(this);\n        var dx = self.timeline.x.invert(mouse[0]);\n        dx = dx.getTime() / 1000;\n        dx = (dx - prev._key.time) / timeBetweenPrevNext;\n\n        // Get point A value top in px.\n        var valueApx = this.normalizeVal(prev._key.value, propertyData._min, propertyData._max, 0, MAX_HEIGHT);\n        // Same for B key value\n        var valueBpx = this.normalizeVal(point._key.value, propertyData._min, propertyData._max, 0, MAX_HEIGHT);\n\n        var dy = (mouse[1] - valueApx) / (valueBpx - valueApx);\n\n        // dx is restricted to 0 - 1.\n        dx = Math.min(1, Math.max(0, dx));\n\n        ease[d.handle._Xindex] = dx;\n        ease[d.handle._Yindex] = dy;\n        point._key.ease = ease;\n\n        propertyData._isDirty = true;\n        itemData._isDirty = true;\n        this.onCurveUpdated.dispatch();\n      };\n\n      // const dragHandleEnd = (d) => {\n      // };\n\n      var dragHandle = d3.behavior.drag().origin(function (d) {\n        return d;\n      }).on('drag', dragHandleMove).on('dragstart', dragHandleStart);\n      // .on('dragend', dragHandleEnd);\n\n      handleLine.enter().append('line').attr({\n        class: 'curve__handle-line',\n        fill: 'none'\n      });\n\n      handleLine.attr({\n        x1: function x1(d) {\n          return d.point.x;\n        },\n        y1: function y1(d) {\n          return d.point.y;\n        },\n        x2: function x2(d) {\n          return d.handle.x;\n        },\n        y2: function y2(d) {\n          return d.handle.y;\n        }\n      });\n\n      handleLine.exit().remove();\n\n      // The key point.\n      points.enter().append('circle').attr({\n        class: 'curve__point',\n        fill: '#fff',\n        r: 4\n      });\n\n      points.attr({\n        cx: function cx(d) {\n          return d.x;\n        },\n        cy: function cy(d) {\n          return d.y;\n        }\n      });\n\n      points.exit().remove();\n\n      // Handle point.\n      handle.enter().append('circle').attr({\n        class: 'curve__handle',\n        fill: '#aaa',\n        r: 4\n      }).on('mousedown', function () {\n        // Don't trigger mousedown on handler else\n        // it create the selection rectangle\n        d3.event.stopPropagation();\n      }).call(dragHandle);\n\n      handle.attr({\n        cx: function cx(d) {\n          return d.handle.x;\n        },\n        cy: function cy(d) {\n          return d.handle.y;\n        }\n      });\n\n      handle.exit().remove();\n    }\n  }]);\n\n  return PropertyCurveEdit;\n}();\n\nexports.default = PropertyCurveEdit;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Utils = __webpack_require__(1);\n\nvar _Utils2 = _interopRequireDefault(_Utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar d3 = __webpack_require__(16);\nvar Signals = __webpack_require__(6);\n\nvar _ = __webpack_require__(12);\n\nvar Keys = function () {\n  function Keys(timeline) {\n    _classCallCheck(this, Keys);\n\n    this.timeline = timeline;\n    this.onKeyUpdated = new Signals.Signal();\n  }\n\n  _createClass(Keys, [{\n    key: 'selectNewKey',\n    value: function selectNewKey(data) {\n      var self = this;\n      var key = d3.selectAll('.key').filter(function (item) {\n        return item._id === data._id;\n      });\n      if (key.length) {\n        d3.selectAll('.key--selected').classed('key--selected', false);\n        key.classed('key--selected', true);\n        key = key[0][0];\n        data._dom = key;\n        self.timeline.selectionManager.select(data);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render(properties) {\n      var self = this;\n      var tweenTime = self.timeline.tweenTime;\n\n      var dragmove = function dragmove(key_data) {\n        var sourceEvent = d3.event.sourceEvent;\n        var propertyData = key_data._property;\n        var lineData = propertyData._line;\n\n        var currentDomainStart = self.timeline.x.domain()[0];\n        var mouse = d3.mouse(this);\n        var old_time = key_data.time;\n        var dx = self.timeline.x.invert(mouse[0]);\n        dx = dx.getTime();\n        dx = dx / 1000 - currentDomainStart / 1000;\n        dx = key_data.time + dx;\n        dx = _Utils2.default.roundTimeFloat(dx);\n        if (dx < 0) {\n          drag.dragend(); // eslint-disable-line no-use-before-define\n          // because of recursive calling\n        }\n\n        var selection = self.timeline.selectionManager.getSelection();\n        var selection_first_time = false;\n        var selection_last_time = false;\n        if (selection.length) {\n          selection_first_time = selection[0].time;\n          selection_last_time = selection[selection.length - 1].time;\n        }\n\n        selection = _.filter(selection, function (item) {\n          return _.isEqual(item, key_data) === false;\n        });\n\n        var timeMatch = false;\n        if (sourceEvent.shiftKey) {\n          timeMatch = _Utils2.default.getClosestTime(tweenTime.data, dx, lineData.id, propertyData.name, tweenTime.timer);\n        }\n        if (timeMatch === false) {\n          timeMatch = dx;\n        }\n\n        key_data.time = timeMatch;\n        // Sort the keys of the current selected item.\n        propertyData.keys = _Utils2.default.sortKeys(propertyData.keys);\n        var time_offset = key_data.time - old_time;\n\n        var updateKeyItem = function updateKeyItem(item) {\n          var property = item._property;\n          property._line._isDirty = true;\n          property.keys = _Utils2.default.sortKeys(property.keys);\n        };\n\n        var key_scale = false;\n        var is_first = false;\n        if (selection.length) {\n          if (sourceEvent.altKey && selection_first_time !== false && selection_last_time !== false) {\n            is_first = selection_first_time === old_time;\n            if (is_first) {\n              key_scale = (selection_last_time - key_data.time) / (selection_last_time - old_time);\n            } else {\n              key_scale = (key_data.time - selection_first_time) / (old_time - selection_first_time);\n            }\n          }\n\n          for (var i = 0; i < selection.length; i++) {\n            var data = selection[i];\n            if (key_scale === false) {\n              data.time += time_offset;\n            } else {\n              if (is_first) {\n                data.time = selection_last_time - (selection_last_time - data.time) * key_scale;\n              } else {\n                data.time = selection_first_time + (data.time - selection_first_time) * key_scale;\n              }\n            }\n            updateKeyItem(data);\n          }\n        }\n\n        lineData._isDirty = true;\n        self.onKeyUpdated.dispatch();\n      };\n\n      var propValue = function propValue(d) {\n        return d.keys;\n      };\n      var propKey = function propKey(d) {\n        if (!d._id) {\n          d._id = _Utils2.default.guid();\n        }\n        return d._id;\n      };\n      var keys = properties.select('.line-item__keys').selectAll('.key').data(propValue, propKey);\n\n      // Hide keys if curve editor mode.\n      properties.select('.line-item__keys').attr('display', function () {\n        if (!self.timeline.editor.curveEditEnabled) {\n          return 'block';\n        }\n        return 'none';\n      });\n\n      // selectKey is triggered by dragstart event\n      var selectKey = function selectKey(key_data) {\n        var event = d3.event;\n        // with dragstart event the mousevent is is inside the event.sourcEvent\n        if (event.sourceEvent) {\n          event = event.sourceEvent;\n        }\n\n        var addToSelection = event.shiftKey;\n        // if element is already selectionned and we are on\n        // the dragstart event, we stop there since it is already selected.\n        if (d3.event.type && d3.event.type === 'dragstart') {\n          if (d3.select(this).classed('key--selected')) {\n            return;\n          }\n        }\n\n        // Also keep a reference to the key dom element.\n        key_data._dom = this;\n\n        self.timeline.selectionManager.select(key_data, addToSelection);\n      };\n\n      var dragend = function dragend() {\n        self.timeline.editor.undoManager.addState();\n      };\n\n      var drag = d3.behavior.drag().origin(function (d) {\n        return d;\n      }).on('drag', dragmove).on('dragstart', selectKey).on('dragend', dragend);\n\n      var key_grp = keys.enter().append('g').attr('class', 'key')\n      // Use the unique id added in propKey above for the dom element id.\n      .attr('id', function (d) {\n        return d._id;\n      }).on('mousedown', function () {\n        // Don't trigger mousedown on linescontainer else\n        // it create the selection rectangle\n        d3.event.stopPropagation();\n      }).call(drag);\n\n      properties.selectAll('.key').attr('class', function (d) {\n        var cls = 'key';\n        // keep selected class\n        if (d3.select(this).classed('key--selected')) {\n          cls += ' key--selected';\n        }\n        if (d.ease) {\n          if (Array.isArray(d.ease)) {\n            cls += ' easeCustom';\n          } else {\n            var ease = d.ease.split('.');\n            if (ease.length === 2) {\n              cls += ' ' + ease[1];\n            }\n          }\n        } else {\n          // If no easing specified, the it's the default Quad.easeOut\n          cls += ' easeOut';\n        }\n        return cls;\n      });\n\n      var grp_linear = key_grp.append('g').attr('class', 'ease-linear');\n      grp_linear.append('path').attr('class', 'key__shape-arrow').attr('d', 'M 0 -6 L 6 0 L 0 6');\n      grp_linear.append('path').attr('class', 'key__shape-arrow').attr('d', 'M 0 -6 L -6 0 L 0 6');\n\n      var grp_in = key_grp.append('g').attr('class', 'ease-in');\n      grp_in.append('path').attr('class', 'key__shape-rect').attr('d', 'M 0 -6 L 0 6 L 4 5 L 1 0 L 4 -5');\n      grp_in.append('path').attr('class', 'key__shape-arrow').attr('d', 'M 0 -6 L -6 0 L 0 6');\n\n      var grp_out = key_grp.append('g').attr('class', 'ease-out');\n      grp_out.append('path').attr('class', 'key__shape-rect').attr('d', 'M 0 -6 L 0 6 L -4 5 L -1 0 L -4 -5');\n      grp_out.append('path').attr('class', 'key__shape-arrow').attr('d', 'M 0 -6 L 6 0 L 0 6');\n\n      var grp_inout = key_grp.append('g').attr('class', 'ease-inout');\n      grp_inout.append('circle').attr('cx', 0).attr('cy', 0).attr('r', 5);\n\n      var grp_custom = key_grp.append('g').attr('class', 'ease-custom');\n      grp_custom.append('path').attr('class', 'key__shape-arrow').attr('d', 'M 0 -6 L 6 0 L 0 6').attr({\n        transform: 'translate(-5, 0)'\n      });\n\n      var g2 = grp_custom.append('g').attr({\n        transform: 'scale(-1, 1) translate(-5, 0)'\n      });\n\n      g2.append('path').attr('class', 'key__shape-arrow').attr('d', 'M 0 -6 L 6 0 L 0 6');\n\n      keys.attr('transform', function (d) {\n        var dx = self.timeline.x(d.time * 1000);\n        dx = parseInt(dx, 10);\n        var dy = self.timeline.lineHeight / 2;\n        return 'translate(' + dx + ',' + dy + ')';\n      });\n\n      keys.exit().remove();\n    }\n  }]);\n\n  return Keys;\n}();\n\nexports.default = Keys;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 23 */
/***/ (function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Errors = function () {\n  function Errors(timeline) {\n    _classCallCheck(this, Errors);\n\n    this.timeline = timeline;\n  }\n\n  _createClass(Errors, [{\n    key: 'render',\n    value: function render(properties) {\n      var self = this;\n      var subGrp = self.timeline.properties.subGrp;\n      var propertiesWithError = function propertiesWithError(d) {\n        return d.errors !== undefined;\n      };\n      // use insert with :first-child to prepend.\n      subGrp.insert('svg', ':first-child').attr('class', 'line-item__errors').attr('width', window.innerWidth - self.timeline.label_position_x).attr('height', self.timeline.lineHeight);\n\n      var errorsValue = function errorsValue(d) {\n        return d.errors;\n      };\n      var errorTime = function errorTime(d) {\n        return d.time;\n      };\n\n      var errors = properties.filter(propertiesWithError).select('.line-item__errors').selectAll('.error').data(errorsValue, errorTime);\n\n      errors.enter().append('rect').attr('class', 'error').attr('width', 4).attr('height', self.timeline.lineHeight - 1).attr('y', '1');\n\n      properties.selectAll('.error').attr('x', function (d) {\n        var dx;\n        dx = self.timeline.x(d.time * 1000);\n        return dx;\n      });\n\n      errors.exit().remove();\n    }\n  }]);\n\n  return Errors;\n}();\n\nexports.default = Errors;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ncmFwaC9FcnJvcnMuanM/OWVmMSJdLCJuYW1lcyI6WyJFcnJvcnMiLCJ0aW1lbGluZSIsInByb3BlcnRpZXMiLCJzZWxmIiwic3ViR3JwIiwicHJvcGVydGllc1dpdGhFcnJvciIsImQiLCJlcnJvcnMiLCJ1bmRlZmluZWQiLCJpbnNlcnQiLCJhdHRyIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImxhYmVsX3Bvc2l0aW9uX3giLCJsaW5lSGVpZ2h0IiwiZXJyb3JzVmFsdWUiLCJlcnJvclRpbWUiLCJ0aW1lIiwiZmlsdGVyIiwic2VsZWN0Iiwic2VsZWN0QWxsIiwiZGF0YSIsImVudGVyIiwiYXBwZW5kIiwiZHgiLCJ4IiwiZXhpdCIsInJlbW92ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQkEsTTtBQUNuQixrQkFBWUMsUUFBWixFQUFzQjtBQUFBOztBQUNwQixTQUFLQSxRQUFMLEdBQWdCQSxRQUFoQjtBQUNEOzs7OzJCQUVNQyxVLEVBQVk7QUFDakIsVUFBSUMsT0FBTyxJQUFYO0FBQ0EsVUFBSUMsU0FBU0QsS0FBS0YsUUFBTCxDQUFjQyxVQUFkLENBQXlCRSxNQUF0QztBQUNBLFVBQUlDLHNCQUFzQixTQUF0QkEsbUJBQXNCLENBQVNDLENBQVQsRUFBWTtBQUNwQyxlQUFPQSxFQUFFQyxNQUFGLEtBQWFDLFNBQXBCO0FBQ0QsT0FGRDtBQUdBO0FBQ0FKLGFBQU9LLE1BQVAsQ0FBYyxLQUFkLEVBQXFCLGNBQXJCLEVBQ0dDLElBREgsQ0FDUSxPQURSLEVBQ2lCLG1CQURqQixFQUVHQSxJQUZILENBRVEsT0FGUixFQUVpQkMsT0FBT0MsVUFBUCxHQUFvQlQsS0FBS0YsUUFBTCxDQUFjWSxnQkFGbkQsRUFHR0gsSUFISCxDQUdRLFFBSFIsRUFHa0JQLEtBQUtGLFFBQUwsQ0FBY2EsVUFIaEM7O0FBS0EsVUFBSUMsY0FBYyxTQUFkQSxXQUFjLENBQVNULENBQVQsRUFBWTtBQUM1QixlQUFPQSxFQUFFQyxNQUFUO0FBQ0QsT0FGRDtBQUdBLFVBQUlTLFlBQVksU0FBWkEsU0FBWSxDQUFTVixDQUFULEVBQVk7QUFDMUIsZUFBT0EsRUFBRVcsSUFBVDtBQUNELE9BRkQ7O0FBSUEsVUFBSVYsU0FBU0wsV0FBV2dCLE1BQVgsQ0FBa0JiLG1CQUFsQixFQUNWYyxNQURVLENBQ0gsb0JBREcsRUFDbUJDLFNBRG5CLENBQzZCLFFBRDdCLEVBRVZDLElBRlUsQ0FFTE4sV0FGSyxFQUVRQyxTQUZSLENBQWI7O0FBSUFULGFBQU9lLEtBQVAsR0FBZUMsTUFBZixDQUFzQixNQUF0QixFQUNHYixJQURILENBQ1EsT0FEUixFQUNpQixPQURqQixFQUVHQSxJQUZILENBRVEsT0FGUixFQUVpQixDQUZqQixFQUdHQSxJQUhILENBR1EsUUFIUixFQUdrQlAsS0FBS0YsUUFBTCxDQUFjYSxVQUFkLEdBQTJCLENBSDdDLEVBSUdKLElBSkgsQ0FJUSxHQUpSLEVBSWEsR0FKYjs7QUFNQVIsaUJBQVdrQixTQUFYLENBQXFCLFFBQXJCLEVBQStCVixJQUEvQixDQUFvQyxHQUFwQyxFQUF5QyxVQUFTSixDQUFULEVBQVk7QUFDbkQsWUFBSWtCLEVBQUo7QUFDQUEsYUFBS3JCLEtBQUtGLFFBQUwsQ0FBY3dCLENBQWQsQ0FBZ0JuQixFQUFFVyxJQUFGLEdBQVMsSUFBekIsQ0FBTDtBQUNBLGVBQU9PLEVBQVA7QUFDRCxPQUpEOztBQU1BakIsYUFBT21CLElBQVAsR0FBY0MsTUFBZDtBQUNEOzs7Ozs7a0JBekNrQjNCLE0iLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBFcnJvcnMge1xuICBjb25zdHJ1Y3Rvcih0aW1lbGluZSkge1xuICAgIHRoaXMudGltZWxpbmUgPSB0aW1lbGluZTtcbiAgfVxuXG4gIHJlbmRlcihwcm9wZXJ0aWVzKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBzdWJHcnAgPSBzZWxmLnRpbWVsaW5lLnByb3BlcnRpZXMuc3ViR3JwO1xuICAgIHZhciBwcm9wZXJ0aWVzV2l0aEVycm9yID0gZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIGQuZXJyb3JzICE9PSB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICAvLyB1c2UgaW5zZXJ0IHdpdGggOmZpcnN0LWNoaWxkIHRvIHByZXBlbmQuXG4gICAgc3ViR3JwLmluc2VydCgnc3ZnJywgJzpmaXJzdC1jaGlsZCcpXG4gICAgICAuYXR0cignY2xhc3MnLCAnbGluZS1pdGVtX19lcnJvcnMnKVxuICAgICAgLmF0dHIoJ3dpZHRoJywgd2luZG93LmlubmVyV2lkdGggLSBzZWxmLnRpbWVsaW5lLmxhYmVsX3Bvc2l0aW9uX3gpXG4gICAgICAuYXR0cignaGVpZ2h0Jywgc2VsZi50aW1lbGluZS5saW5lSGVpZ2h0KTtcblxuICAgIHZhciBlcnJvcnNWYWx1ZSA9IGZ1bmN0aW9uKGQpIHtcbiAgICAgIHJldHVybiBkLmVycm9ycztcbiAgICB9O1xuICAgIHZhciBlcnJvclRpbWUgPSBmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4gZC50aW1lO1xuICAgIH07XG5cbiAgICB2YXIgZXJyb3JzID0gcHJvcGVydGllcy5maWx0ZXIocHJvcGVydGllc1dpdGhFcnJvcilcbiAgICAgIC5zZWxlY3QoJy5saW5lLWl0ZW1fX2Vycm9ycycpLnNlbGVjdEFsbCgnLmVycm9yJylcbiAgICAgIC5kYXRhKGVycm9yc1ZhbHVlLCBlcnJvclRpbWUpO1xuXG4gICAgZXJyb3JzLmVudGVyKCkuYXBwZW5kKCdyZWN0JylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdlcnJvcicpXG4gICAgICAuYXR0cignd2lkdGgnLCA0KVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIHNlbGYudGltZWxpbmUubGluZUhlaWdodCAtIDEpXG4gICAgICAuYXR0cigneScsICcxJyk7XG5cbiAgICBwcm9wZXJ0aWVzLnNlbGVjdEFsbCgnLmVycm9yJykuYXR0cigneCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgIHZhciBkeDtcbiAgICAgIGR4ID0gc2VsZi50aW1lbGluZS54KGQudGltZSAqIDEwMDApO1xuICAgICAgcmV0dXJuIGR4O1xuICAgIH0pO1xuXG4gICAgZXJyb3JzLmV4aXQoKS5yZW1vdmUoKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZ3JhcGgvRXJyb3JzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar d3 = __webpack_require__(16);\n\nvar Selection = function () {\n  function Selection(timeline, svg, margin) {\n    _classCallCheck(this, Selection);\n\n    this.timeline = timeline;\n    this.svg = svg;\n    this.margin = margin;\n\n    this.onMouseUp = this.onMouseUp.bind(this);\n    this.init();\n  }\n\n  _createClass(Selection, [{\n    key: 'onMouseUp',\n    value: function onMouseUp() {\n      this.svg.selectAll('.selection').remove();\n      // Enable again the default browser text selection.\n      // Disabled this because is was causing problems with text higlhlighting\n      // $('body').css({\n      //   'user-select': 'all'\n      // });\n    }\n  }, {\n    key: 'init',\n    value: function init() {\n      var self = this;\n      this.svg.on('mousedown', function () {\n        var p = d3.mouse(this);\n        // Only init selection if we click on the timeline and not on the labels.\n        if (p[0] < self.timeline.margin.left) {\n          return;\n        }\n        self.svg.append('rect').attr({\n          class: 'selection',\n          x: p[0],\n          y: p[1],\n          width: 0,\n          height: 0\n        });\n        // Unselect items.\n        self.timeline.selectionManager.reset();\n        // Prevent default browser text selection.\n        $('body').css({\n          'user-select': 'none'\n        });\n      }).on('mousemove', function () {\n        var s = self.svg.select('.selection');\n        if (s.empty()) {\n          return;\n        }\n        var p = d3.mouse(this);\n        var d = {\n          x: parseInt(s.attr('x'), 10),\n          y: parseInt(s.attr('y'), 10),\n          width: parseInt(s.attr('width'), 10),\n          height: parseInt(s.attr('height'), 10)\n        };\n        // Apply margin to mouse selection.\n        p[0] = Math.max(self.margin.left, p[0]);\n\n        var move = {\n          x: p[0] - d.x,\n          y: p[1] - d.y\n        };\n        if (move.x < 1 || move.x * 2 < d.width) {\n          d.x = p[0];\n          d.width -= move.x;\n        } else {\n          d.width = move.x;\n        }\n\n        if (move.y < 1 || move.y * 2 < d.height) {\n          d.y = p[1];\n          d.height -= move.y;\n        } else {\n          d.height = move.y;\n        }\n\n        s.attr(d);\n\n        // remove margins from selection\n        d.x -= self.margin.left;\n        var key_width = 6;\n\n        d.timeStart = self.timeline.x.invert(d.x - key_width).getTime() / 1000;\n        d.timeEnd = self.timeline.x.invert(d.x + d.width + key_width).getTime() / 1000;\n        var containerBounding = self.svg[0][0].getBoundingClientRect();\n\n        // deselect all previously selected items\n        d3.selectAll('.key--selected').classed('key--selected', false);\n        self.timeline.selectionManager.reset();\n        var selection = [];\n        d3.selectAll('.key').each(function (key_data) {\n          var item_data = key_data._property._line;\n\n          // Also keep a reference to the key dom element.\n          key_data._dom = this;\n\n          if (item_data.collapsed !== true) {\n            var itemBounding = d3.select(this)[0][0].getBoundingClientRect();\n            var y = itemBounding.top - containerBounding.top;\n            if (key_data.time >= d.timeStart && key_data.time <= d.timeEnd) {\n              // use or condition for top and bottom\n              if (y >= d.y && y <= d.y + d.height || y + 10 >= d.y && y + 10 <= d.y + d.height) {\n                d3.select(this).classed('key--selected', true);\n\n                selection.push(key_data);\n              }\n            }\n          }\n        });\n        self.timeline.selectionManager.select(selection);\n      });\n      // Attach the mouseup event to window so that it catch it event if\n      // mouseup happen outside of the browser window.\n      $(window).on('mouseup', this.onMouseUp);\n    }\n  }]);\n\n  return Selection;\n}();\n\nexports.default = Selection;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ncmFwaC9TZWxlY3Rpb24uanM/MzRhZiJdLCJuYW1lcyI6WyJkMyIsInJlcXVpcmUiLCJTZWxlY3Rpb24iLCJ0aW1lbGluZSIsInN2ZyIsIm1hcmdpbiIsIm9uTW91c2VVcCIsImJpbmQiLCJpbml0Iiwic2VsZWN0QWxsIiwicmVtb3ZlIiwic2VsZiIsIm9uIiwicCIsIm1vdXNlIiwibGVmdCIsImFwcGVuZCIsImF0dHIiLCJjbGFzcyIsIngiLCJ5Iiwid2lkdGgiLCJoZWlnaHQiLCJzZWxlY3Rpb25NYW5hZ2VyIiwicmVzZXQiLCIkIiwiY3NzIiwicyIsInNlbGVjdCIsImVtcHR5IiwiZCIsInBhcnNlSW50IiwiTWF0aCIsIm1heCIsIm1vdmUiLCJrZXlfd2lkdGgiLCJ0aW1lU3RhcnQiLCJpbnZlcnQiLCJnZXRUaW1lIiwidGltZUVuZCIsImNvbnRhaW5lckJvdW5kaW5nIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xhc3NlZCIsInNlbGVjdGlvbiIsImVhY2giLCJrZXlfZGF0YSIsIml0ZW1fZGF0YSIsIl9wcm9wZXJ0eSIsIl9saW5lIiwiX2RvbSIsImNvbGxhcHNlZCIsIml0ZW1Cb3VuZGluZyIsInRvcCIsInRpbWUiLCJwdXNoIiwid2luZG93Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsSUFBSUEsS0FBSyxtQkFBQUMsQ0FBUSxFQUFSLENBQVQ7O0lBRXFCQyxTO0FBQ25CLHFCQUFZQyxRQUFaLEVBQXNCQyxHQUF0QixFQUEyQkMsTUFBM0IsRUFBbUM7QUFBQTs7QUFDakMsU0FBS0YsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxTQUFLQyxHQUFMLEdBQVdBLEdBQVg7QUFDQSxTQUFLQyxNQUFMLEdBQWNBLE1BQWQ7O0FBRUEsU0FBS0MsU0FBTCxHQUFpQixLQUFLQSxTQUFMLENBQWVDLElBQWYsQ0FBb0IsSUFBcEIsQ0FBakI7QUFDQSxTQUFLQyxJQUFMO0FBQ0Q7Ozs7Z0NBRVc7QUFDVixXQUFLSixHQUFMLENBQVNLLFNBQVQsQ0FBbUIsWUFBbkIsRUFBaUNDLE1BQWpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNEOzs7MkJBRU07QUFDTCxVQUFJQyxPQUFPLElBQVg7QUFDQSxXQUFLUCxHQUFMLENBQVNRLEVBQVQsQ0FBWSxXQUFaLEVBQXlCLFlBQVc7QUFDbEMsWUFBSUMsSUFBSWIsR0FBR2MsS0FBSCxDQUFTLElBQVQsQ0FBUjtBQUNBO0FBQ0EsWUFBSUQsRUFBRSxDQUFGLElBQU9GLEtBQUtSLFFBQUwsQ0FBY0UsTUFBZCxDQUFxQlUsSUFBaEMsRUFBc0M7QUFDcEM7QUFDRDtBQUNESixhQUFLUCxHQUFMLENBQVNZLE1BQVQsQ0FBZ0IsTUFBaEIsRUFDR0MsSUFESCxDQUNRO0FBQ0pDLGlCQUFPLFdBREg7QUFFSkMsYUFBR04sRUFBRSxDQUFGLENBRkM7QUFHSk8sYUFBR1AsRUFBRSxDQUFGLENBSEM7QUFJSlEsaUJBQU8sQ0FKSDtBQUtKQyxrQkFBUTtBQUxKLFNBRFI7QUFRQTtBQUNBWCxhQUFLUixRQUFMLENBQWNvQixnQkFBZCxDQUErQkMsS0FBL0I7QUFDQTtBQUNBQyxVQUFFLE1BQUYsRUFBVUMsR0FBVixDQUFjO0FBQ1oseUJBQWU7QUFESCxTQUFkO0FBR0QsT0FwQkQsRUFvQkdkLEVBcEJILENBb0JNLFdBcEJOLEVBb0JtQixZQUFXO0FBQzVCLFlBQUllLElBQUloQixLQUFLUCxHQUFMLENBQVN3QixNQUFULENBQWdCLFlBQWhCLENBQVI7QUFDQSxZQUFJRCxFQUFFRSxLQUFGLEVBQUosRUFBZTtBQUNiO0FBQ0Q7QUFDRCxZQUFJaEIsSUFBSWIsR0FBR2MsS0FBSCxDQUFTLElBQVQsQ0FBUjtBQUNBLFlBQUlnQixJQUFJO0FBQ05YLGFBQUdZLFNBQVNKLEVBQUVWLElBQUYsQ0FBTyxHQUFQLENBQVQsRUFBc0IsRUFBdEIsQ0FERztBQUVORyxhQUFHVyxTQUFTSixFQUFFVixJQUFGLENBQU8sR0FBUCxDQUFULEVBQXNCLEVBQXRCLENBRkc7QUFHTkksaUJBQU9VLFNBQVNKLEVBQUVWLElBQUYsQ0FBTyxPQUFQLENBQVQsRUFBMEIsRUFBMUIsQ0FIRDtBQUlOSyxrQkFBUVMsU0FBU0osRUFBRVYsSUFBRixDQUFPLFFBQVAsQ0FBVCxFQUEyQixFQUEzQjtBQUpGLFNBQVI7QUFNQTtBQUNBSixVQUFFLENBQUYsSUFBT21CLEtBQUtDLEdBQUwsQ0FBU3RCLEtBQUtOLE1BQUwsQ0FBWVUsSUFBckIsRUFBMkJGLEVBQUUsQ0FBRixDQUEzQixDQUFQOztBQUVBLFlBQUlxQixPQUFPO0FBQ1RmLGFBQUdOLEVBQUUsQ0FBRixJQUFPaUIsRUFBRVgsQ0FESDtBQUVUQyxhQUFHUCxFQUFFLENBQUYsSUFBT2lCLEVBQUVWO0FBRkgsU0FBWDtBQUlBLFlBQUljLEtBQUtmLENBQUwsR0FBUyxDQUFULElBQWNlLEtBQUtmLENBQUwsR0FBUyxDQUFULEdBQWFXLEVBQUVULEtBQWpDLEVBQXdDO0FBQ3RDUyxZQUFFWCxDQUFGLEdBQU1OLEVBQUUsQ0FBRixDQUFOO0FBQ0FpQixZQUFFVCxLQUFGLElBQVdhLEtBQUtmLENBQWhCO0FBQ0QsU0FIRCxNQUlLO0FBQ0hXLFlBQUVULEtBQUYsR0FBVWEsS0FBS2YsQ0FBZjtBQUNEOztBQUVELFlBQUllLEtBQUtkLENBQUwsR0FBUyxDQUFULElBQWNjLEtBQUtkLENBQUwsR0FBUyxDQUFULEdBQWFVLEVBQUVSLE1BQWpDLEVBQXlDO0FBQ3ZDUSxZQUFFVixDQUFGLEdBQU1QLEVBQUUsQ0FBRixDQUFOO0FBQ0FpQixZQUFFUixNQUFGLElBQVlZLEtBQUtkLENBQWpCO0FBQ0QsU0FIRCxNQUlLO0FBQ0hVLFlBQUVSLE1BQUYsR0FBV1ksS0FBS2QsQ0FBaEI7QUFDRDs7QUFFRE8sVUFBRVYsSUFBRixDQUFPYSxDQUFQOztBQUVBO0FBQ0FBLFVBQUVYLENBQUYsSUFBT1IsS0FBS04sTUFBTCxDQUFZVSxJQUFuQjtBQUNBLFlBQUlvQixZQUFZLENBQWhCOztBQUVBTCxVQUFFTSxTQUFGLEdBQWN6QixLQUFLUixRQUFMLENBQWNnQixDQUFkLENBQWdCa0IsTUFBaEIsQ0FBdUJQLEVBQUVYLENBQUYsR0FBTWdCLFNBQTdCLEVBQXdDRyxPQUF4QyxLQUFvRCxJQUFsRTtBQUNBUixVQUFFUyxPQUFGLEdBQVk1QixLQUFLUixRQUFMLENBQWNnQixDQUFkLENBQWdCa0IsTUFBaEIsQ0FBdUJQLEVBQUVYLENBQUYsR0FBTVcsRUFBRVQsS0FBUixHQUFnQmMsU0FBdkMsRUFBa0RHLE9BQWxELEtBQThELElBQTFFO0FBQ0EsWUFBSUUsb0JBQW9CN0IsS0FBS1AsR0FBTCxDQUFTLENBQVQsRUFBWSxDQUFaLEVBQWVxQyxxQkFBZixFQUF4Qjs7QUFFQTtBQUNBekMsV0FBR1MsU0FBSCxDQUFhLGdCQUFiLEVBQStCaUMsT0FBL0IsQ0FBdUMsZUFBdkMsRUFBd0QsS0FBeEQ7QUFDQS9CLGFBQUtSLFFBQUwsQ0FBY29CLGdCQUFkLENBQStCQyxLQUEvQjtBQUNBLFlBQUltQixZQUFZLEVBQWhCO0FBQ0EzQyxXQUFHUyxTQUFILENBQWEsTUFBYixFQUFxQm1DLElBQXJCLENBQTJCLFVBQVNDLFFBQVQsRUFBbUI7QUFDNUMsY0FBTUMsWUFBWUQsU0FBU0UsU0FBVCxDQUFtQkMsS0FBckM7O0FBRUE7QUFDQUgsbUJBQVNJLElBQVQsR0FBZ0IsSUFBaEI7O0FBRUEsY0FBSUgsVUFBVUksU0FBVixLQUF3QixJQUE1QixFQUFrQztBQUNoQyxnQkFBSUMsZUFBZW5ELEdBQUc0QixNQUFILENBQVUsSUFBVixFQUFnQixDQUFoQixFQUFtQixDQUFuQixFQUFzQmEscUJBQXRCLEVBQW5CO0FBQ0EsZ0JBQUlyQixJQUFJK0IsYUFBYUMsR0FBYixHQUFtQlosa0JBQWtCWSxHQUE3QztBQUNBLGdCQUFJUCxTQUFTUSxJQUFULElBQWlCdkIsRUFBRU0sU0FBbkIsSUFBZ0NTLFNBQVNRLElBQVQsSUFBaUJ2QixFQUFFUyxPQUF2RCxFQUFnRTtBQUM5RDtBQUNBLGtCQUFJbkIsS0FBS1UsRUFBRVYsQ0FBUCxJQUFZQSxLQUFLVSxFQUFFVixDQUFGLEdBQU1VLEVBQUVSLE1BQXpCLElBQW1DRixJQUFJLEVBQUosSUFBVVUsRUFBRVYsQ0FBWixJQUFpQkEsSUFBSSxFQUFKLElBQVVVLEVBQUVWLENBQUYsR0FBTVUsRUFBRVIsTUFBMUUsRUFBa0Y7QUFDaEZ0QixtQkFBRzRCLE1BQUgsQ0FBVSxJQUFWLEVBQWdCYyxPQUFoQixDQUF3QixlQUF4QixFQUF5QyxJQUF6Qzs7QUFFQUMsMEJBQVVXLElBQVYsQ0FBZVQsUUFBZjtBQUNEO0FBQ0Y7QUFDRjtBQUNGLFNBbEJEO0FBbUJBbEMsYUFBS1IsUUFBTCxDQUFjb0IsZ0JBQWQsQ0FBK0JLLE1BQS9CLENBQXNDZSxTQUF0QztBQUNELE9BekZEO0FBMEZBO0FBQ0E7QUFDQWxCLFFBQUU4QixNQUFGLEVBQVUzQyxFQUFWLENBQWEsU0FBYixFQUF3QixLQUFLTixTQUE3QjtBQUNEOzs7Ozs7a0JBbEhrQkosUyIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBkMyA9IHJlcXVpcmUoJ2QzJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbGVjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHRpbWVsaW5lLCBzdmcsIG1hcmdpbikge1xuICAgIHRoaXMudGltZWxpbmUgPSB0aW1lbGluZTtcbiAgICB0aGlzLnN2ZyA9IHN2ZztcbiAgICB0aGlzLm1hcmdpbiA9IG1hcmdpbjtcblxuICAgIHRoaXMub25Nb3VzZVVwID0gdGhpcy5vbk1vdXNlVXAuYmluZCh0aGlzKTtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIG9uTW91c2VVcCgpIHtcbiAgICB0aGlzLnN2Zy5zZWxlY3RBbGwoJy5zZWxlY3Rpb24nKS5yZW1vdmUoKTtcbiAgICAvLyBFbmFibGUgYWdhaW4gdGhlIGRlZmF1bHQgYnJvd3NlciB0ZXh0IHNlbGVjdGlvbi5cbiAgICAvLyBEaXNhYmxlZCB0aGlzIGJlY2F1c2UgaXMgd2FzIGNhdXNpbmcgcHJvYmxlbXMgd2l0aCB0ZXh0IGhpZ2xobGlnaHRpbmdcbiAgICAvLyAkKCdib2R5JykuY3NzKHtcbiAgICAvLyAgICd1c2VyLXNlbGVjdCc6ICdhbGwnXG4gICAgLy8gfSk7XG4gIH1cblxuICBpbml0KCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLnN2Zy5vbignbW91c2Vkb3duJywgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcCA9IGQzLm1vdXNlKHRoaXMpO1xuICAgICAgLy8gT25seSBpbml0IHNlbGVjdGlvbiBpZiB3ZSBjbGljayBvbiB0aGUgdGltZWxpbmUgYW5kIG5vdCBvbiB0aGUgbGFiZWxzLlxuICAgICAgaWYgKHBbMF0gPCBzZWxmLnRpbWVsaW5lLm1hcmdpbi5sZWZ0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNlbGYuc3ZnLmFwcGVuZCgncmVjdCcpXG4gICAgICAgIC5hdHRyKHtcbiAgICAgICAgICBjbGFzczogJ3NlbGVjdGlvbicsXG4gICAgICAgICAgeDogcFswXSxcbiAgICAgICAgICB5OiBwWzFdLFxuICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgIGhlaWdodDogMFxuICAgICAgICB9KTtcbiAgICAgIC8vIFVuc2VsZWN0IGl0ZW1zLlxuICAgICAgc2VsZi50aW1lbGluZS5zZWxlY3Rpb25NYW5hZ2VyLnJlc2V0KCk7XG4gICAgICAvLyBQcmV2ZW50IGRlZmF1bHQgYnJvd3NlciB0ZXh0IHNlbGVjdGlvbi5cbiAgICAgICQoJ2JvZHknKS5jc3Moe1xuICAgICAgICAndXNlci1zZWxlY3QnOiAnbm9uZSdcbiAgICAgIH0pO1xuICAgIH0pLm9uKCdtb3VzZW1vdmUnLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzID0gc2VsZi5zdmcuc2VsZWN0KCcuc2VsZWN0aW9uJyk7XG4gICAgICBpZiAocy5lbXB0eSgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBwID0gZDMubW91c2UodGhpcyk7XG4gICAgICB2YXIgZCA9IHtcbiAgICAgICAgeDogcGFyc2VJbnQocy5hdHRyKCd4JyksIDEwKSxcbiAgICAgICAgeTogcGFyc2VJbnQocy5hdHRyKCd5JyksIDEwKSxcbiAgICAgICAgd2lkdGg6IHBhcnNlSW50KHMuYXR0cignd2lkdGgnKSwgMTApLFxuICAgICAgICBoZWlnaHQ6IHBhcnNlSW50KHMuYXR0cignaGVpZ2h0JyksIDEwKVxuICAgICAgfTtcbiAgICAgIC8vIEFwcGx5IG1hcmdpbiB0byBtb3VzZSBzZWxlY3Rpb24uXG4gICAgICBwWzBdID0gTWF0aC5tYXgoc2VsZi5tYXJnaW4ubGVmdCwgcFswXSk7XG5cbiAgICAgIHZhciBtb3ZlID0ge1xuICAgICAgICB4OiBwWzBdIC0gZC54LFxuICAgICAgICB5OiBwWzFdIC0gZC55XG4gICAgICB9O1xuICAgICAgaWYgKG1vdmUueCA8IDEgfHwgbW92ZS54ICogMiA8IGQud2lkdGgpIHtcbiAgICAgICAgZC54ID0gcFswXTtcbiAgICAgICAgZC53aWR0aCAtPSBtb3ZlLng7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZC53aWR0aCA9IG1vdmUueDtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vdmUueSA8IDEgfHwgbW92ZS55ICogMiA8IGQuaGVpZ2h0KSB7XG4gICAgICAgIGQueSA9IHBbMV07XG4gICAgICAgIGQuaGVpZ2h0IC09IG1vdmUueTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBkLmhlaWdodCA9IG1vdmUueTtcbiAgICAgIH1cblxuICAgICAgcy5hdHRyKGQpO1xuXG4gICAgICAvLyByZW1vdmUgbWFyZ2lucyBmcm9tIHNlbGVjdGlvblxuICAgICAgZC54IC09IHNlbGYubWFyZ2luLmxlZnQ7XG4gICAgICB2YXIga2V5X3dpZHRoID0gNjtcblxuICAgICAgZC50aW1lU3RhcnQgPSBzZWxmLnRpbWVsaW5lLnguaW52ZXJ0KGQueCAtIGtleV93aWR0aCkuZ2V0VGltZSgpIC8gMTAwMDtcbiAgICAgIGQudGltZUVuZCA9IHNlbGYudGltZWxpbmUueC5pbnZlcnQoZC54ICsgZC53aWR0aCArIGtleV93aWR0aCkuZ2V0VGltZSgpIC8gMTAwMDtcbiAgICAgIHZhciBjb250YWluZXJCb3VuZGluZyA9IHNlbGYuc3ZnWzBdWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAvLyBkZXNlbGVjdCBhbGwgcHJldmlvdXNseSBzZWxlY3RlZCBpdGVtc1xuICAgICAgZDMuc2VsZWN0QWxsKCcua2V5LS1zZWxlY3RlZCcpLmNsYXNzZWQoJ2tleS0tc2VsZWN0ZWQnLCBmYWxzZSk7XG4gICAgICBzZWxmLnRpbWVsaW5lLnNlbGVjdGlvbk1hbmFnZXIucmVzZXQoKTtcbiAgICAgIHZhciBzZWxlY3Rpb24gPSBbXTtcbiAgICAgIGQzLnNlbGVjdEFsbCgnLmtleScpLmVhY2goIGZ1bmN0aW9uKGtleV9kYXRhKSB7XG4gICAgICAgIGNvbnN0IGl0ZW1fZGF0YSA9IGtleV9kYXRhLl9wcm9wZXJ0eS5fbGluZTtcblxuICAgICAgICAvLyBBbHNvIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIGtleSBkb20gZWxlbWVudC5cbiAgICAgICAga2V5X2RhdGEuX2RvbSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKGl0ZW1fZGF0YS5jb2xsYXBzZWQgIT09IHRydWUpIHtcbiAgICAgICAgICB2YXIgaXRlbUJvdW5kaW5nID0gZDMuc2VsZWN0KHRoaXMpWzBdWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgIHZhciB5ID0gaXRlbUJvdW5kaW5nLnRvcCAtIGNvbnRhaW5lckJvdW5kaW5nLnRvcDtcbiAgICAgICAgICBpZiAoa2V5X2RhdGEudGltZSA+PSBkLnRpbWVTdGFydCAmJiBrZXlfZGF0YS50aW1lIDw9IGQudGltZUVuZCkge1xuICAgICAgICAgICAgLy8gdXNlIG9yIGNvbmRpdGlvbiBmb3IgdG9wIGFuZCBib3R0b21cbiAgICAgICAgICAgIGlmICh5ID49IGQueSAmJiB5IDw9IGQueSArIGQuaGVpZ2h0IHx8IHkgKyAxMCA+PSBkLnkgJiYgeSArIDEwIDw9IGQueSArIGQuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5jbGFzc2VkKCdrZXktLXNlbGVjdGVkJywgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgc2VsZWN0aW9uLnB1c2goa2V5X2RhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBzZWxmLnRpbWVsaW5lLnNlbGVjdGlvbk1hbmFnZXIuc2VsZWN0KHNlbGVjdGlvbik7XG4gICAgfSk7XG4gICAgLy8gQXR0YWNoIHRoZSBtb3VzZXVwIGV2ZW50IHRvIHdpbmRvdyBzbyB0aGF0IGl0IGNhdGNoIGl0IGV2ZW50IGlmXG4gICAgLy8gbW91c2V1cCBoYXBwZW4gb3V0c2lkZSBvZiB0aGUgYnJvd3NlciB3aW5kb3cuXG4gICAgJCh3aW5kb3cpLm9uKCdtb3VzZXVwJywgdGhpcy5vbk1vdXNlVXApO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ncmFwaC9TZWxlY3Rpb24uanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar saveAs = __webpack_require__(26).saveAs || __webpack_require__(26);\n\nvar EditorMenu = function () {\n  function EditorMenu(tweenTime, $timeline, editor) {\n    _classCallCheck(this, EditorMenu);\n\n    this.tweenTime = tweenTime;\n    this.$timeline = $timeline;\n    this.editor = editor;\n    this.timer = this.tweenTime.timer;\n    this.initExport();\n    this.initToggle();\n    this.initCurveToggle();\n  }\n\n  _createClass(EditorMenu, [{\n    key: 'initToggle',\n    value: function initToggle() {\n      var parentElement = this.editor.el;\n      var timelineClosed = false;\n      var $toggleLink = this.$timeline.find('[data-action=\"toggle\"]');\n      $toggleLink.click(function (e) {\n        e.preventDefault();\n        timelineClosed = !timelineClosed;\n        $toggleLink.toggleClass('menu-item--toggle-up', timelineClosed);\n        parentElement.toggleClass('timeline-is-closed', timelineClosed);\n        return window.dispatchEvent(new Event('resize'));\n      });\n      var $toggleLinkSide = $('.properties-editor', parentElement).find('[data-action=\"toggle\"]');\n      $toggleLinkSide.click(function (e) {\n        var propertiesClosed;\n        e.preventDefault();\n        propertiesClosed = !parentElement.hasClass('properties-is-closed');\n        parentElement.toggleClass('properties-is-closed', propertiesClosed);\n        return window.dispatchEvent(new Event('resize'));\n      });\n    }\n  }, {\n    key: 'initExport',\n    value: function initExport() {\n      var exporter = this.editor.exporter;\n      this.$timeline.find('[data-action=\"export\"]').click(function (e) {\n        e.preventDefault();\n        var data = exporter.getJSON();\n        var blob = new Blob([data], {\n          type: 'text/json;charset=utf-8'\n        });\n        saveAs(blob, 'data.json');\n      });\n    }\n  }, {\n    key: 'initCurveToggle',\n    value: function initCurveToggle() {\n      var _this = this;\n\n      this.$timeline.find('[data-action=\"switch-curve\"]').click(function (e) {\n        e.preventDefault();\n        _this.editor.curveEditEnabled = !_this.editor.curveEditEnabled;\n        _this.editor.render(false, false, true);\n      });\n    }\n  }]);\n\n  return EditorMenu;\n}();\n\nexports.default = EditorMenu;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9lZGl0b3IvRWRpdG9yTWVudS5qcz81MDU5Il0sIm5hbWVzIjpbInNhdmVBcyIsInJlcXVpcmUiLCJFZGl0b3JNZW51IiwidHdlZW5UaW1lIiwiJHRpbWVsaW5lIiwiZWRpdG9yIiwidGltZXIiLCJpbml0RXhwb3J0IiwiaW5pdFRvZ2dsZSIsImluaXRDdXJ2ZVRvZ2dsZSIsInBhcmVudEVsZW1lbnQiLCJlbCIsInRpbWVsaW5lQ2xvc2VkIiwiJHRvZ2dsZUxpbmsiLCJmaW5kIiwiY2xpY2siLCJlIiwicHJldmVudERlZmF1bHQiLCJ0b2dnbGVDbGFzcyIsIndpbmRvdyIsImRpc3BhdGNoRXZlbnQiLCJFdmVudCIsIiR0b2dnbGVMaW5rU2lkZSIsIiQiLCJwcm9wZXJ0aWVzQ2xvc2VkIiwiaGFzQ2xhc3MiLCJleHBvcnRlciIsImRhdGEiLCJnZXRKU09OIiwiYmxvYiIsIkJsb2IiLCJ0eXBlIiwiY3VydmVFZGl0RW5hYmxlZCIsInJlbmRlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLElBQUlBLFNBQVMsbUJBQUFDLENBQVEsRUFBUixFQUFzQkQsTUFBdEIsSUFBZ0MsbUJBQUFDLENBQVEsRUFBUixDQUE3Qzs7SUFFcUJDLFU7QUFDbkIsc0JBQVlDLFNBQVosRUFBdUJDLFNBQXZCLEVBQWtDQyxNQUFsQyxFQUEwQztBQUFBOztBQUN4QyxTQUFLRixTQUFMLEdBQWlCQSxTQUFqQjtBQUNBLFNBQUtDLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsU0FBS0MsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsU0FBS0MsS0FBTCxHQUFhLEtBQUtILFNBQUwsQ0FBZUcsS0FBNUI7QUFDQSxTQUFLQyxVQUFMO0FBQ0EsU0FBS0MsVUFBTDtBQUNBLFNBQUtDLGVBQUw7QUFDRDs7OztpQ0FFWTtBQUNYLFVBQUlDLGdCQUFnQixLQUFLTCxNQUFMLENBQVlNLEVBQWhDO0FBQ0EsVUFBSUMsaUJBQWlCLEtBQXJCO0FBQ0EsVUFBSUMsY0FBYyxLQUFLVCxTQUFMLENBQWVVLElBQWYsQ0FBb0Isd0JBQXBCLENBQWxCO0FBQ0FELGtCQUFZRSxLQUFaLENBQWtCLFVBQUNDLENBQUQsRUFBTztBQUN2QkEsVUFBRUMsY0FBRjtBQUNBTCx5QkFBaUIsQ0FBQ0EsY0FBbEI7QUFDQUMsb0JBQVlLLFdBQVosQ0FBd0Isc0JBQXhCLEVBQWdETixjQUFoRDtBQUNBRixzQkFBY1EsV0FBZCxDQUEwQixvQkFBMUIsRUFBZ0ROLGNBQWhEO0FBQ0EsZUFBT08sT0FBT0MsYUFBUCxDQUFxQixJQUFJQyxLQUFKLENBQVUsUUFBVixDQUFyQixDQUFQO0FBQ0QsT0FORDtBQU9BLFVBQUlDLGtCQUFrQkMsRUFBRSxvQkFBRixFQUF3QmIsYUFBeEIsRUFBdUNJLElBQXZDLENBQTRDLHdCQUE1QyxDQUF0QjtBQUNBUSxzQkFBZ0JQLEtBQWhCLENBQXNCLFVBQUNDLENBQUQsRUFBTztBQUMzQixZQUFJUSxnQkFBSjtBQUNBUixVQUFFQyxjQUFGO0FBQ0FPLDJCQUFtQixDQUFDZCxjQUFjZSxRQUFkLENBQXVCLHNCQUF2QixDQUFwQjtBQUNBZixzQkFBY1EsV0FBZCxDQUEwQixzQkFBMUIsRUFBa0RNLGdCQUFsRDtBQUNBLGVBQU9MLE9BQU9DLGFBQVAsQ0FBcUIsSUFBSUMsS0FBSixDQUFVLFFBQVYsQ0FBckIsQ0FBUDtBQUNELE9BTkQ7QUFPRDs7O2lDQUVZO0FBQ1gsVUFBSUssV0FBVyxLQUFLckIsTUFBTCxDQUFZcUIsUUFBM0I7QUFDQSxXQUFLdEIsU0FBTCxDQUFlVSxJQUFmLENBQW9CLHdCQUFwQixFQUE4Q0MsS0FBOUMsQ0FBb0QsVUFBU0MsQ0FBVCxFQUFZO0FBQzlEQSxVQUFFQyxjQUFGO0FBQ0EsWUFBSVUsT0FBT0QsU0FBU0UsT0FBVCxFQUFYO0FBQ0EsWUFBSUMsT0FBTyxJQUFJQyxJQUFKLENBQVMsQ0FBQ0gsSUFBRCxDQUFULEVBQWlCO0FBQzFCSSxnQkFBTTtBQURvQixTQUFqQixDQUFYO0FBR0EvQixlQUFPNkIsSUFBUCxFQUFhLFdBQWI7QUFDRCxPQVBEO0FBUUQ7OztzQ0FFaUI7QUFBQTs7QUFDaEIsV0FBS3pCLFNBQUwsQ0FBZVUsSUFBZixDQUFvQiw4QkFBcEIsRUFBb0RDLEtBQXBELENBQTBELFVBQUNDLENBQUQsRUFBTztBQUMvREEsVUFBRUMsY0FBRjtBQUNBLGNBQUtaLE1BQUwsQ0FBWTJCLGdCQUFaLEdBQStCLENBQUMsTUFBSzNCLE1BQUwsQ0FBWTJCLGdCQUE1QztBQUNBLGNBQUszQixNQUFMLENBQVk0QixNQUFaLENBQW1CLEtBQW5CLEVBQTBCLEtBQTFCLEVBQWlDLElBQWpDO0FBQ0QsT0FKRDtBQUtEOzs7Ozs7a0JBbERrQi9CLFUiLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgc2F2ZUFzID0gcmVxdWlyZSgnZmlsZS1zYXZlcicpLnNhdmVBcyB8fCByZXF1aXJlKCdmaWxlLXNhdmVyJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXRvck1lbnUge1xuICBjb25zdHJ1Y3Rvcih0d2VlblRpbWUsICR0aW1lbGluZSwgZWRpdG9yKSB7XG4gICAgdGhpcy50d2VlblRpbWUgPSB0d2VlblRpbWU7XG4gICAgdGhpcy4kdGltZWxpbmUgPSAkdGltZWxpbmU7XG4gICAgdGhpcy5lZGl0b3IgPSBlZGl0b3I7XG4gICAgdGhpcy50aW1lciA9IHRoaXMudHdlZW5UaW1lLnRpbWVyO1xuICAgIHRoaXMuaW5pdEV4cG9ydCgpO1xuICAgIHRoaXMuaW5pdFRvZ2dsZSgpO1xuICAgIHRoaXMuaW5pdEN1cnZlVG9nZ2xlKCk7XG4gIH1cblxuICBpbml0VG9nZ2xlKCkge1xuICAgIHZhciBwYXJlbnRFbGVtZW50ID0gdGhpcy5lZGl0b3IuZWw7XG4gICAgdmFyIHRpbWVsaW5lQ2xvc2VkID0gZmFsc2U7XG4gICAgdmFyICR0b2dnbGVMaW5rID0gdGhpcy4kdGltZWxpbmUuZmluZCgnW2RhdGEtYWN0aW9uPVwidG9nZ2xlXCJdJyk7XG4gICAgJHRvZ2dsZUxpbmsuY2xpY2soKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRpbWVsaW5lQ2xvc2VkID0gIXRpbWVsaW5lQ2xvc2VkO1xuICAgICAgJHRvZ2dsZUxpbmsudG9nZ2xlQ2xhc3MoJ21lbnUtaXRlbS0tdG9nZ2xlLXVwJywgdGltZWxpbmVDbG9zZWQpO1xuICAgICAgcGFyZW50RWxlbWVudC50b2dnbGVDbGFzcygndGltZWxpbmUtaXMtY2xvc2VkJywgdGltZWxpbmVDbG9zZWQpO1xuICAgICAgcmV0dXJuIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgncmVzaXplJykpO1xuICAgIH0pO1xuICAgIHZhciAkdG9nZ2xlTGlua1NpZGUgPSAkKCcucHJvcGVydGllcy1lZGl0b3InLCBwYXJlbnRFbGVtZW50KS5maW5kKCdbZGF0YS1hY3Rpb249XCJ0b2dnbGVcIl0nKTtcbiAgICAkdG9nZ2xlTGlua1NpZGUuY2xpY2soKGUpID0+IHtcbiAgICAgIHZhciBwcm9wZXJ0aWVzQ2xvc2VkO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcHJvcGVydGllc0Nsb3NlZCA9ICFwYXJlbnRFbGVtZW50Lmhhc0NsYXNzKCdwcm9wZXJ0aWVzLWlzLWNsb3NlZCcpO1xuICAgICAgcGFyZW50RWxlbWVudC50b2dnbGVDbGFzcygncHJvcGVydGllcy1pcy1jbG9zZWQnLCBwcm9wZXJ0aWVzQ2xvc2VkKTtcbiAgICAgIHJldHVybiB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3Jlc2l6ZScpKTtcbiAgICB9KTtcbiAgfVxuXG4gIGluaXRFeHBvcnQoKSB7XG4gICAgdmFyIGV4cG9ydGVyID0gdGhpcy5lZGl0b3IuZXhwb3J0ZXI7XG4gICAgdGhpcy4kdGltZWxpbmUuZmluZCgnW2RhdGEtYWN0aW9uPVwiZXhwb3J0XCJdJykuY2xpY2soZnVuY3Rpb24oZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdmFyIGRhdGEgPSBleHBvcnRlci5nZXRKU09OKCk7XG4gICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtkYXRhXSwge1xuICAgICAgICB0eXBlOiAndGV4dC9qc29uO2NoYXJzZXQ9dXRmLTgnXG4gICAgICB9KTtcbiAgICAgIHNhdmVBcyhibG9iLCAnZGF0YS5qc29uJyk7XG4gICAgfSk7XG4gIH1cblxuICBpbml0Q3VydmVUb2dnbGUoKSB7XG4gICAgdGhpcy4kdGltZWxpbmUuZmluZCgnW2RhdGEtYWN0aW9uPVwic3dpdGNoLWN1cnZlXCJdJykuY2xpY2soKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuZWRpdG9yLmN1cnZlRWRpdEVuYWJsZWQgPSAhdGhpcy5lZGl0b3IuY3VydmVFZGl0RW5hYmxlZDtcbiAgICAgIHRoaXMuZWRpdG9yLnJlbmRlcihmYWxzZSwgZmFsc2UsIHRydWUpO1xuICAgIH0pO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9lZGl0b3IvRWRpdG9yTWVudS5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 26 */
/***/ (function(module, exports) {

	eval("module.exports = __WEBPACK_EXTERNAL_MODULE_26__;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwge1wicm9vdFwiOlwic2F2ZUFzXCIsXCJjb21tb25qc1wiOlwiZmlsZS1zYXZlclwiLFwiY29tbW9uanMyXCI6XCJmaWxlLXNhdmVyXCIsXCJhbWRcIjpcImZpbGUtc2F2ZXJcIn0/Y2UwZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8yNl9fO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIHtcInJvb3RcIjpcInNhdmVBc1wiLFwiY29tbW9uanNcIjpcImZpbGUtc2F2ZXJcIixcImNvbW1vbmpzMlwiOlwiZmlsZS1zYXZlclwiLFwiYW1kXCI6XCJmaWxlLXNhdmVyXCJ9XG4vLyBtb2R1bGUgaWQgPSAyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 27 */
/***/ (function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar EditorControls = function () {\n  function EditorControls(tweenTime, $timeline) {\n    var _this = this;\n\n    _classCallCheck(this, EditorControls);\n\n    this.tweenTime = tweenTime;\n    this.$timeline = $timeline;\n    this.timer = this.tweenTime.timer;\n    this.$time = this.$timeline.find('.control--time');\n    this.$time_end = this.$timeline.find('.control--time-end');\n    this.initControls();\n    this.$time_end.val(this.tweenTime.timer.getDuration());\n    this.timer.addStatusChangedListener(this.timerStatusChnageListener.bind(this));\n\n    $(document).keypress(function (e) {\n      if (e.charCode === 32) {\n        // Space\n        _this.playPause();\n      }\n    });\n  }\n\n  _createClass(EditorControls, [{\n    key: 'timerStatusChnageListener',\n    value: function timerStatusChnageListener(playing) {\n      var $play_pause = this.$timeline.find('.control--play-pause');\n      $play_pause.toggleClass('icon-pause', playing);\n      $play_pause.toggleClass('icon-play', !playing);\n    }\n  }, {\n    key: 'playPause',\n    value: function playPause() {\n      this.timer.toggle();\n    }\n  }, {\n    key: 'backward',\n    value: function backward() {\n      this.timer.seek([0]);\n    }\n  }, {\n    key: 'forward',\n    value: function forward() {\n      var total = this.tweenTime.getTotalDuration();\n      this.timer.seek([total * 1000]);\n    }\n  }, {\n    key: 'changeTimeEnd',\n    value: function changeTimeEnd(seconds) {\n      this.timer.setDuration(seconds);\n    }\n  }, {\n    key: 'changeTime',\n    value: function changeTime(seconds) {\n      this.timer.seek([seconds]);\n    }\n  }, {\n    key: 'initControls',\n    value: function initControls() {\n      var _this2 = this;\n\n      var $play_pause = this.$timeline.find('.control--play-pause');\n      $play_pause.click(function (e) {\n        e.preventDefault();\n        _this2.playPause();\n      });\n      var $bt_first = this.$timeline.find('.control--first');\n      $bt_first.click(function (e) {\n        e.preventDefault();\n        _this2.backward();\n      });\n      var $bt_last = this.$timeline.find('.control--last');\n      $bt_last.click(function (e) {\n        e.preventDefault();\n        _this2.forward();\n      });\n      this.$time.change(function () {\n        var seconds = parseFloat(_this2.$time.val(), 10) * 1000;\n        _this2.changeTime(seconds);\n      });\n      this.$time_end.change(function () {\n        var seconds = parseFloat(_this2.$time_end.val(), 10);\n        _this2.changeTimeEnd(seconds);\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render(time, time_changed) {\n      if (time_changed) {\n        var seconds = time / 1000;\n        this.$time.val(seconds.toFixed(3));\n      }\n    }\n  }]);\n\n  return EditorControls;\n}();\n\nexports.default = EditorControls;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9lZGl0b3IvRWRpdG9yQ29udHJvbHMuanM/NTFiZiJdLCJuYW1lcyI6WyJFZGl0b3JDb250cm9scyIsInR3ZWVuVGltZSIsIiR0aW1lbGluZSIsInRpbWVyIiwiJHRpbWUiLCJmaW5kIiwiJHRpbWVfZW5kIiwiaW5pdENvbnRyb2xzIiwidmFsIiwiZ2V0RHVyYXRpb24iLCJhZGRTdGF0dXNDaGFuZ2VkTGlzdGVuZXIiLCJ0aW1lclN0YXR1c0NobmFnZUxpc3RlbmVyIiwiYmluZCIsIiQiLCJkb2N1bWVudCIsImtleXByZXNzIiwiZSIsImNoYXJDb2RlIiwicGxheVBhdXNlIiwicGxheWluZyIsIiRwbGF5X3BhdXNlIiwidG9nZ2xlQ2xhc3MiLCJ0b2dnbGUiLCJzZWVrIiwidG90YWwiLCJnZXRUb3RhbER1cmF0aW9uIiwic2Vjb25kcyIsInNldER1cmF0aW9uIiwiY2xpY2siLCJwcmV2ZW50RGVmYXVsdCIsIiRidF9maXJzdCIsImJhY2t3YXJkIiwiJGJ0X2xhc3QiLCJmb3J3YXJkIiwiY2hhbmdlIiwicGFyc2VGbG9hdCIsImNoYW5nZVRpbWUiLCJjaGFuZ2VUaW1lRW5kIiwidGltZSIsInRpbWVfY2hhbmdlZCIsInRvRml4ZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUJBLGM7QUFDbkIsMEJBQVlDLFNBQVosRUFBdUJDLFNBQXZCLEVBQWtDO0FBQUE7O0FBQUE7O0FBQ2hDLFNBQUtELFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQkEsU0FBakI7QUFDQSxTQUFLQyxLQUFMLEdBQWEsS0FBS0YsU0FBTCxDQUFlRSxLQUE1QjtBQUNBLFNBQUtDLEtBQUwsR0FBYSxLQUFLRixTQUFMLENBQWVHLElBQWYsQ0FBb0IsZ0JBQXBCLENBQWI7QUFDQSxTQUFLQyxTQUFMLEdBQWlCLEtBQUtKLFNBQUwsQ0FBZUcsSUFBZixDQUFvQixvQkFBcEIsQ0FBakI7QUFDQSxTQUFLRSxZQUFMO0FBQ0EsU0FBS0QsU0FBTCxDQUFlRSxHQUFmLENBQW1CLEtBQUtQLFNBQUwsQ0FBZUUsS0FBZixDQUFxQk0sV0FBckIsRUFBbkI7QUFDQSxTQUFLTixLQUFMLENBQVdPLHdCQUFYLENBQW9DLEtBQUtDLHlCQUFMLENBQStCQyxJQUEvQixDQUFvQyxJQUFwQyxDQUFwQzs7QUFFQUMsTUFBRUMsUUFBRixFQUFZQyxRQUFaLENBQXFCLFVBQUNDLENBQUQsRUFBTztBQUMxQixVQUFJQSxFQUFFQyxRQUFGLEtBQWUsRUFBbkIsRUFBdUI7QUFDckI7QUFDQSxjQUFLQyxTQUFMO0FBQ0Q7QUFDRixLQUxEO0FBTUQ7Ozs7OENBRXlCQyxPLEVBQVM7QUFDakMsVUFBSUMsY0FBYyxLQUFLbEIsU0FBTCxDQUFlRyxJQUFmLENBQW9CLHNCQUFwQixDQUFsQjtBQUNBZSxrQkFBWUMsV0FBWixDQUF3QixZQUF4QixFQUFzQ0YsT0FBdEM7QUFDQUMsa0JBQVlDLFdBQVosQ0FBd0IsV0FBeEIsRUFBcUMsQ0FBQ0YsT0FBdEM7QUFDRDs7O2dDQUVXO0FBQ1YsV0FBS2hCLEtBQUwsQ0FBV21CLE1BQVg7QUFDRDs7OytCQUVVO0FBQ1QsV0FBS25CLEtBQUwsQ0FBV29CLElBQVgsQ0FBZ0IsQ0FBQyxDQUFELENBQWhCO0FBQ0Q7Ozs4QkFFUztBQUNSLFVBQUlDLFFBQVEsS0FBS3ZCLFNBQUwsQ0FBZXdCLGdCQUFmLEVBQVo7QUFDQSxXQUFLdEIsS0FBTCxDQUFXb0IsSUFBWCxDQUFnQixDQUFDQyxRQUFRLElBQVQsQ0FBaEI7QUFDRDs7O2tDQUVhRSxPLEVBQVM7QUFDckIsV0FBS3ZCLEtBQUwsQ0FBV3dCLFdBQVgsQ0FBdUJELE9BQXZCO0FBQ0Q7OzsrQkFFVUEsTyxFQUFTO0FBQ2xCLFdBQUt2QixLQUFMLENBQVdvQixJQUFYLENBQWdCLENBQUNHLE9BQUQsQ0FBaEI7QUFDRDs7O21DQUVjO0FBQUE7O0FBQ2IsVUFBSU4sY0FBYyxLQUFLbEIsU0FBTCxDQUFlRyxJQUFmLENBQW9CLHNCQUFwQixDQUFsQjtBQUNBZSxrQkFBWVEsS0FBWixDQUFrQixVQUFDWixDQUFELEVBQU87QUFDdkJBLFVBQUVhLGNBQUY7QUFDQSxlQUFLWCxTQUFMO0FBQ0QsT0FIRDtBQUlBLFVBQUlZLFlBQVksS0FBSzVCLFNBQUwsQ0FBZUcsSUFBZixDQUFvQixpQkFBcEIsQ0FBaEI7QUFDQXlCLGdCQUFVRixLQUFWLENBQWdCLFVBQUNaLENBQUQsRUFBTztBQUNyQkEsVUFBRWEsY0FBRjtBQUNBLGVBQUtFLFFBQUw7QUFDRCxPQUhEO0FBSUEsVUFBSUMsV0FBVyxLQUFLOUIsU0FBTCxDQUFlRyxJQUFmLENBQW9CLGdCQUFwQixDQUFmO0FBQ0EyQixlQUFTSixLQUFULENBQWUsVUFBQ1osQ0FBRCxFQUFPO0FBQ3BCQSxVQUFFYSxjQUFGO0FBQ0EsZUFBS0ksT0FBTDtBQUNELE9BSEQ7QUFJQSxXQUFLN0IsS0FBTCxDQUFXOEIsTUFBWCxDQUFrQixZQUFNO0FBQ3RCLFlBQUlSLFVBQVVTLFdBQVcsT0FBSy9CLEtBQUwsQ0FBV0ksR0FBWCxFQUFYLEVBQTZCLEVBQTdCLElBQW1DLElBQWpEO0FBQ0EsZUFBSzRCLFVBQUwsQ0FBZ0JWLE9BQWhCO0FBQ0QsT0FIRDtBQUlBLFdBQUtwQixTQUFMLENBQWU0QixNQUFmLENBQXNCLFlBQU07QUFDMUIsWUFBSVIsVUFBVVMsV0FBVyxPQUFLN0IsU0FBTCxDQUFlRSxHQUFmLEVBQVgsRUFBaUMsRUFBakMsQ0FBZDtBQUNBLGVBQUs2QixhQUFMLENBQW1CWCxPQUFuQjtBQUNELE9BSEQ7QUFJRDs7OzJCQUVNWSxJLEVBQU1DLFksRUFBYztBQUN6QixVQUFJQSxZQUFKLEVBQWtCO0FBQ2hCLFlBQUliLFVBQVVZLE9BQU8sSUFBckI7QUFDQSxhQUFLbEMsS0FBTCxDQUFXSSxHQUFYLENBQWVrQixRQUFRYyxPQUFSLENBQWdCLENBQWhCLENBQWY7QUFDRDtBQUNGOzs7Ozs7a0JBN0VrQnhDLGMiLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBFZGl0b3JDb250cm9scyB7XG4gIGNvbnN0cnVjdG9yKHR3ZWVuVGltZSwgJHRpbWVsaW5lKSB7XG4gICAgdGhpcy50d2VlblRpbWUgPSB0d2VlblRpbWU7XG4gICAgdGhpcy4kdGltZWxpbmUgPSAkdGltZWxpbmU7XG4gICAgdGhpcy50aW1lciA9IHRoaXMudHdlZW5UaW1lLnRpbWVyO1xuICAgIHRoaXMuJHRpbWUgPSB0aGlzLiR0aW1lbGluZS5maW5kKCcuY29udHJvbC0tdGltZScpO1xuICAgIHRoaXMuJHRpbWVfZW5kID0gdGhpcy4kdGltZWxpbmUuZmluZCgnLmNvbnRyb2wtLXRpbWUtZW5kJyk7XG4gICAgdGhpcy5pbml0Q29udHJvbHMoKTtcbiAgICB0aGlzLiR0aW1lX2VuZC52YWwodGhpcy50d2VlblRpbWUudGltZXIuZ2V0RHVyYXRpb24oKSk7XG4gICAgdGhpcy50aW1lci5hZGRTdGF0dXNDaGFuZ2VkTGlzdGVuZXIodGhpcy50aW1lclN0YXR1c0NobmFnZUxpc3RlbmVyLmJpbmQodGhpcykpO1xuXG4gICAgJChkb2N1bWVudCkua2V5cHJlc3MoKGUpID0+IHtcbiAgICAgIGlmIChlLmNoYXJDb2RlID09PSAzMikge1xuICAgICAgICAvLyBTcGFjZVxuICAgICAgICB0aGlzLnBsYXlQYXVzZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdGltZXJTdGF0dXNDaG5hZ2VMaXN0ZW5lcihwbGF5aW5nKSB7XG4gICAgdmFyICRwbGF5X3BhdXNlID0gdGhpcy4kdGltZWxpbmUuZmluZCgnLmNvbnRyb2wtLXBsYXktcGF1c2UnKTtcbiAgICAkcGxheV9wYXVzZS50b2dnbGVDbGFzcygnaWNvbi1wYXVzZScsIHBsYXlpbmcpO1xuICAgICRwbGF5X3BhdXNlLnRvZ2dsZUNsYXNzKCdpY29uLXBsYXknLCAhcGxheWluZyk7XG4gIH1cblxuICBwbGF5UGF1c2UoKSB7XG4gICAgdGhpcy50aW1lci50b2dnbGUoKTtcbiAgfVxuXG4gIGJhY2t3YXJkKCkge1xuICAgIHRoaXMudGltZXIuc2VlayhbMF0pO1xuICB9XG5cbiAgZm9yd2FyZCgpIHtcbiAgICB2YXIgdG90YWwgPSB0aGlzLnR3ZWVuVGltZS5nZXRUb3RhbER1cmF0aW9uKCk7XG4gICAgdGhpcy50aW1lci5zZWVrKFt0b3RhbCAqIDEwMDBdKTtcbiAgfVxuXG4gIGNoYW5nZVRpbWVFbmQoc2Vjb25kcykge1xuICAgIHRoaXMudGltZXIuc2V0RHVyYXRpb24oc2Vjb25kcyk7XG4gIH1cblxuICBjaGFuZ2VUaW1lKHNlY29uZHMpIHtcbiAgICB0aGlzLnRpbWVyLnNlZWsoW3NlY29uZHNdKTtcbiAgfVxuXG4gIGluaXRDb250cm9scygpIHtcbiAgICB2YXIgJHBsYXlfcGF1c2UgPSB0aGlzLiR0aW1lbGluZS5maW5kKCcuY29udHJvbC0tcGxheS1wYXVzZScpO1xuICAgICRwbGF5X3BhdXNlLmNsaWNrKChlKSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLnBsYXlQYXVzZSgpO1xuICAgIH0pO1xuICAgIHZhciAkYnRfZmlyc3QgPSB0aGlzLiR0aW1lbGluZS5maW5kKCcuY29udHJvbC0tZmlyc3QnKTtcbiAgICAkYnRfZmlyc3QuY2xpY2soKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuYmFja3dhcmQoKTtcbiAgICB9KTtcbiAgICB2YXIgJGJ0X2xhc3QgPSB0aGlzLiR0aW1lbGluZS5maW5kKCcuY29udHJvbC0tbGFzdCcpO1xuICAgICRidF9sYXN0LmNsaWNrKChlKSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLmZvcndhcmQoKTtcbiAgICB9KTtcbiAgICB0aGlzLiR0aW1lLmNoYW5nZSgoKSA9PiB7XG4gICAgICB2YXIgc2Vjb25kcyA9IHBhcnNlRmxvYXQodGhpcy4kdGltZS52YWwoKSwgMTApICogMTAwMDtcbiAgICAgIHRoaXMuY2hhbmdlVGltZShzZWNvbmRzKTtcbiAgICB9KTtcbiAgICB0aGlzLiR0aW1lX2VuZC5jaGFuZ2UoKCkgPT4ge1xuICAgICAgdmFyIHNlY29uZHMgPSBwYXJzZUZsb2F0KHRoaXMuJHRpbWVfZW5kLnZhbCgpLCAxMCk7XG4gICAgICB0aGlzLmNoYW5nZVRpbWVFbmQoc2Vjb25kcyk7XG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIodGltZSwgdGltZV9jaGFuZ2VkKSB7XG4gICAgaWYgKHRpbWVfY2hhbmdlZCkge1xuICAgICAgdmFyIHNlY29uZHMgPSB0aW1lIC8gMTAwMDtcbiAgICAgIHRoaXMuJHRpbWUudmFsKHNlY29uZHMudG9GaXhlZCgzKSk7XG4gICAgfVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9lZGl0b3IvRWRpdG9yQ29udHJvbHMuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar d3 = __webpack_require__(16);\nvar Signals = __webpack_require__(6);\nvar _ = __webpack_require__(12);\n\nvar SelectionManager = function () {\n  function SelectionManager(tweenTime) {\n    _classCallCheck(this, SelectionManager);\n\n    this.tweenTime = tweenTime;\n    this.selection = [];\n    this.onSelect = new Signals.Signal();\n  }\n\n  _createClass(SelectionManager, [{\n    key: 'addOnSelectListener',\n    value: function addOnSelectListener(listener) {\n      this.onSelect.add(listener);\n    }\n  }, {\n    key: 'removeOnSelectListener',\n    value: function removeOnSelectListener(listener) {\n      this.onSelect.remove(listener);\n    }\n  }, {\n    key: 'select',\n    value: function select(item) {\n      var addToSelection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!addToSelection) {\n        this.selection = [];\n      }\n      if (item instanceof Array) {\n        for (var i = 0; i < item.length; i++) {\n          var el = item[i];\n          this.selection.push(el);\n        }\n      } else {\n        this.selection.push(item);\n      }\n\n      this.removeDuplicates();\n      this.highlightItems();\n      this.sortSelection();\n      this.onSelect.dispatch(this.selection, addToSelection);\n    }\n  }, {\n    key: 'getSelection',\n    value: function getSelection() {\n      return this.selection;\n    }\n  }, {\n    key: 'removeDuplicates',\n    value: function removeDuplicates() {\n      var result = [];\n      for (var i = 0; i < this.selection.length; i++) {\n        var item = this.selection[i];\n        var found = false;\n        for (var j = 0; j < result.length; j++) {\n          var item2 = result[j];\n          if (_.isEqual(item, item2)) {\n            found = true;\n            break;\n          }\n        }\n        if (found === false) {\n          result.push(item);\n        }\n      }\n      this.selection = result;\n    }\n  }, {\n    key: 'removeItem',\n    value: function removeItem(item) {\n      // If we pass an _id then search for the item and remove it.\n      if (typeof item === 'string') {\n        var itemObj = _.find(this.selection, function (el) {\n          return el._id === item;\n        });\n        if (itemObj) {\n          return this.removeItem(itemObj);\n        }\n      }\n\n      // Remove the object if it exists in the selection.\n      var index = this.selection.indexOf(item);\n      if (index > -1) {\n        this.selection.splice(index, 1);\n      }\n      this.triggerSelect();\n    }\n  }, {\n    key: 'sortSelection',\n    value: function sortSelection() {\n      var compare = function compare(a, b) {\n        if (!a.time || !b.time) {\n          return 0;\n        }\n        if (a.time < b.time) {\n          return -1;\n        }\n        if (a.time > b.time) {\n          return 1;\n        }\n        return 0;\n      };\n      this.selection = this.selection.sort(compare);\n    }\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.selection = [];\n      this.highlightItems();\n      this.onSelect.dispatch(this.selection, false);\n    }\n  }, {\n    key: 'triggerSelect',\n    value: function triggerSelect() {\n      this.onSelect.dispatch(this.selection, false);\n    }\n  }, {\n    key: 'highlightItems',\n    value: function highlightItems() {\n      d3.selectAll('.bar--selected').classed('bar--selected', false);\n      d3.selectAll('.key--selected').classed('key--selected', false);\n      d3.selectAll('.line--selected').classed('line--selected', false);\n\n      // d3.selectAll('.line-label').classed('line-selected', false);\n      // d3.select(this).classed('line-selected', true);\n\n      for (var i = 0; i < this.selection.length; i++) {\n        var data = this.selection[i];\n        // find dom element from all .line-grps\n        var allGrps = d3.selectAll('.line-grp')[0];\n        var foudnNode = _.find(allGrps, function (item) {\n          var itemData = item.__data__;\n          if (itemData.id === data.id) {\n            return true;\n          }\n        });\n\n        // var domEl = allGrps[foundNodeIndex];\n        if (!data._dom) {\n          data._dom = foudnNode;\n        }\n\n        if (data._dom) {\n          var d3item = d3.select(data._dom);\n\n          if (d3item.classed('bar')) {\n            d3item.classed('bar--selected', true);\n          } else if (d3item.classed('key')) {\n            d3item.classed('key--selected', true);\n          } else if (d3item.classed('line-grp')) {\n            d3item.classed('line--selected', true);\n          }\n        }\n      }\n    }\n  }]);\n\n  return SelectionManager;\n}();\n\nexports.default = SelectionManager;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 29 */
/***/ (function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Exporter = function () {\n  function Exporter(editor) {\n    _classCallCheck(this, Exporter);\n\n    this.editor = editor;\n  }\n\n  _createClass(Exporter, [{\n    key: 'getData',\n    value: function getData() {\n      var tweenTime = this.editor.tweenTime;\n      var domain = this.editor.timeline.x.domain();\n      var domain_start = domain[0];\n      var domain_end = domain[1];\n      return {\n        settings: {\n          time: tweenTime.timer.getCurrentTime(),\n          duration: tweenTime.timer.getDuration(),\n          domain: [domain_start.getTime(), domain_end.getTime()]\n        },\n        data: tweenTime.data\n      };\n    }\n  }, {\n    key: 'getJSON',\n    value: function getJSON() {\n      var options = this.editor.options;\n      var json_replacer = function json_replacer(key, val) {\n        // Disable all private properies from TweenMax/TimelineMax\n        if (key.indexOf('_') === 0) {\n          return undefined;\n        }\n        if (options.json_replacer !== undefined) {\n          return options.json_replacer(key, val);\n        }\n        return val;\n      };\n\n      var data = this.getData();\n      return JSON.stringify(data, json_replacer, 2);\n    }\n  }]);\n\n  return Exporter;\n}();\n\nexports.default = Exporter;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9lZGl0b3IvRXhwb3J0ZXIuanM/YjE3YyJdLCJuYW1lcyI6WyJFeHBvcnRlciIsImVkaXRvciIsInR3ZWVuVGltZSIsImRvbWFpbiIsInRpbWVsaW5lIiwieCIsImRvbWFpbl9zdGFydCIsImRvbWFpbl9lbmQiLCJzZXR0aW5ncyIsInRpbWUiLCJ0aW1lciIsImdldEN1cnJlbnRUaW1lIiwiZHVyYXRpb24iLCJnZXREdXJhdGlvbiIsImdldFRpbWUiLCJkYXRhIiwib3B0aW9ucyIsImpzb25fcmVwbGFjZXIiLCJrZXkiLCJ2YWwiLCJpbmRleE9mIiwidW5kZWZpbmVkIiwiZ2V0RGF0YSIsIkpTT04iLCJzdHJpbmdpZnkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBcUJBLFE7QUFDbkIsb0JBQVlDLE1BQVosRUFBb0I7QUFBQTs7QUFDbEIsU0FBS0EsTUFBTCxHQUFjQSxNQUFkO0FBQ0Q7Ozs7OEJBRVM7QUFDUixVQUFJQyxZQUFZLEtBQUtELE1BQUwsQ0FBWUMsU0FBNUI7QUFDQSxVQUFJQyxTQUFTLEtBQUtGLE1BQUwsQ0FBWUcsUUFBWixDQUFxQkMsQ0FBckIsQ0FBdUJGLE1BQXZCLEVBQWI7QUFDQSxVQUFJRyxlQUFlSCxPQUFPLENBQVAsQ0FBbkI7QUFDQSxVQUFJSSxhQUFhSixPQUFPLENBQVAsQ0FBakI7QUFDQSxhQUFPO0FBQ0xLLGtCQUFVO0FBQ1JDLGdCQUFNUCxVQUFVUSxLQUFWLENBQWdCQyxjQUFoQixFQURFO0FBRVJDLG9CQUFVVixVQUFVUSxLQUFWLENBQWdCRyxXQUFoQixFQUZGO0FBR1JWLGtCQUFRLENBQUNHLGFBQWFRLE9BQWIsRUFBRCxFQUF5QlAsV0FBV08sT0FBWCxFQUF6QjtBQUhBLFNBREw7QUFNTEMsY0FBTWIsVUFBVWE7QUFOWCxPQUFQO0FBUUQ7Ozs4QkFFUztBQUNSLFVBQUlDLFVBQVUsS0FBS2YsTUFBTCxDQUFZZSxPQUExQjtBQUNBLFVBQUlDLGdCQUFnQixTQUFoQkEsYUFBZ0IsQ0FBU0MsR0FBVCxFQUFjQyxHQUFkLEVBQW1CO0FBQ3JDO0FBQ0EsWUFBSUQsSUFBSUUsT0FBSixDQUFZLEdBQVosTUFBcUIsQ0FBekIsRUFBNEI7QUFDMUIsaUJBQU9DLFNBQVA7QUFDRDtBQUNELFlBQUlMLFFBQVFDLGFBQVIsS0FBMEJJLFNBQTlCLEVBQXlDO0FBQ3ZDLGlCQUFPTCxRQUFRQyxhQUFSLENBQXNCQyxHQUF0QixFQUEyQkMsR0FBM0IsQ0FBUDtBQUNEO0FBQ0QsZUFBT0EsR0FBUDtBQUNELE9BVEQ7O0FBV0EsVUFBSUosT0FBTyxLQUFLTyxPQUFMLEVBQVg7QUFDQSxhQUFPQyxLQUFLQyxTQUFMLENBQWVULElBQWYsRUFBcUJFLGFBQXJCLEVBQW9DLENBQXBDLENBQVA7QUFDRDs7Ozs7O2tCQW5Da0JqQixRIiwiZmlsZSI6IjI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXhwb3J0ZXIge1xuICBjb25zdHJ1Y3RvcihlZGl0b3IpIHtcbiAgICB0aGlzLmVkaXRvciA9IGVkaXRvcjtcbiAgfVxuXG4gIGdldERhdGEoKSB7XG4gICAgdmFyIHR3ZWVuVGltZSA9IHRoaXMuZWRpdG9yLnR3ZWVuVGltZTtcbiAgICB2YXIgZG9tYWluID0gdGhpcy5lZGl0b3IudGltZWxpbmUueC5kb21haW4oKTtcbiAgICB2YXIgZG9tYWluX3N0YXJ0ID0gZG9tYWluWzBdO1xuICAgIHZhciBkb21haW5fZW5kID0gZG9tYWluWzFdO1xuICAgIHJldHVybiB7XG4gICAgICBzZXR0aW5nczoge1xuICAgICAgICB0aW1lOiB0d2VlblRpbWUudGltZXIuZ2V0Q3VycmVudFRpbWUoKSxcbiAgICAgICAgZHVyYXRpb246IHR3ZWVuVGltZS50aW1lci5nZXREdXJhdGlvbigpLFxuICAgICAgICBkb21haW46IFtkb21haW5fc3RhcnQuZ2V0VGltZSgpLCBkb21haW5fZW5kLmdldFRpbWUoKV1cbiAgICAgIH0sXG4gICAgICBkYXRhOiB0d2VlblRpbWUuZGF0YVxuICAgIH07XG4gIH1cblxuICBnZXRKU09OKCkge1xuICAgIHZhciBvcHRpb25zID0gdGhpcy5lZGl0b3Iub3B0aW9ucztcbiAgICB2YXIganNvbl9yZXBsYWNlciA9IGZ1bmN0aW9uKGtleSwgdmFsKSB7XG4gICAgICAvLyBEaXNhYmxlIGFsbCBwcml2YXRlIHByb3BlcmllcyBmcm9tIFR3ZWVuTWF4L1RpbWVsaW5lTWF4XG4gICAgICBpZiAoa2V5LmluZGV4T2YoJ18nKSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuanNvbl9yZXBsYWNlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLmpzb25fcmVwbGFjZXIoa2V5LCB2YWwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9O1xuXG4gICAgdmFyIGRhdGEgPSB0aGlzLmdldERhdGEoKTtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSwganNvbl9yZXBsYWNlciwgMik7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2VkaXRvci9FeHBvcnRlci5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n__webpack_require__(31);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar UndoManager = function () {\n  function UndoManager(editor) {\n    var _this = this;\n\n    _classCallCheck(this, UndoManager);\n\n    this.editor = editor;\n    this.history_max = 100;\n    this.history = [];\n    this.current_index = 0;\n\n    // Add the initial state\n    this.addState();\n\n    $(document).keydown(function (e) {\n      if (e.keyCode === 90) {\n        if (e.metaKey || e.ctrlKey) {\n          if (!e.shiftKey) {\n            // (command | ctrl) Z\n            _this.undo();\n          } else {\n            // (command | ctrl) shift Z\n            _this.redo();\n          }\n        }\n      }\n    });\n  }\n\n  _createClass(UndoManager, [{\n    key: 'undo',\n    value: function undo() {\n      // If there is no more history return\n      if (this.current_index <= 0) {\n        return false;\n      }\n      this.current_index -= 1;\n      this.setState(this.current_index);\n    }\n  }, {\n    key: 'redo',\n    value: function redo() {\n      // Stop if there is no more things.\n      if (this.current_index >= this.history.length - 1) {\n        return false;\n      }\n      this.current_index += 1;\n      this.setState(this.current_index);\n    }\n  }, {\n    key: 'addState',\n    value: function addState() {\n      var data = JSON.parse(this.editor.exporter.getJSON());\n\n      // if we did some undo before and then edit something,\n      // we want to remove all actions past the current index first.\n      if (this.current_index + 1 < this.history.length) {\n        this.history.splice(this.current_index + 1, this.history.length - 1);\n      }\n\n      this.history.push(data);\n\n      // Keep history to a max size by removing the first element if needed.\n      if (this.history.length > this.history_max) {\n        this.history.shift();\n      }\n\n      // Set the current index\n      this.current_index = this.history.length - 1;\n    }\n  }, {\n    key: 'setState',\n    value: function setState(index) {\n      var state = this.history[index];\n      var data = state.data;\n      var tweenTime = this.editor.tweenTime;\n\n      // naively copy keys and values from previous state\n      for (var item_key = 0; item_key < data.length; item_key++) {\n        var item = data[item_key];\n        // if item is not defined copy it\n        if (!tweenTime.data[item_key]) {\n          tweenTime.data[item_key] = item;\n        } else {\n          for (var prop_key = 0; prop_key < item.properties.length; prop_key++) {\n            var prop = item.properties[prop_key];\n            // if property is not defined copy it\n            if (!tweenTime.data[item_key].properties[prop_key]) {\n              tweenTime.data[item_key].properties[prop_key] = prop;\n            } else {\n              // set property keys\n              var keys = tweenTime.data[item_key].properties[prop_key].keys;\n              for (var key_key = 0; key_key < prop.keys.length; key_key++) {\n                var key = prop.keys[key_key];\n                if (!keys[key_key]) {\n                  keys[key_key] = key;\n                } else {\n                  keys[key_key].time = key.time;\n                  keys[key_key].value = key.value;\n                  keys[key_key].ease = key.ease;\n                }\n              }\n            }\n          }\n        }\n\n        tweenTime.data[item_key]._isDirty = true;\n      }\n      this.editor.render(false, true);\n    }\n  }]);\n\n  return UndoManager;\n}();\n\nexports.default = UndoManager;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 31 */
/***/ (function(module, exports) {

	eval("module.exports = __WEBPACK_EXTERNAL_MODULE_31__;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwge1wicm9vdFwiOlwiJFwiLFwiY29tbW9uanNcIjpcImpxdWVyeVwiLFwiY29tbW9uanMyXCI6XCJqcXVlcnlcIixcImFtZFwiOlwianF1ZXJ5XCJ9PzI1M2YiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMzFfXztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCB7XCJyb290XCI6XCIkXCIsXCJjb21tb25qc1wiOlwianF1ZXJ5XCIsXCJjb21tb25qczJcIjpcImpxdWVyeVwiLFwiYW1kXCI6XCJqcXVlcnlcIn1cbi8vIG1vZHVsZSBpZCA9IDMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	eval("var H = __webpack_require__(33);\nmodule.exports = function() { var T = new H.Template({code: function (c,p,i) { var t=this;t.b(i=i||\"\");t.b(\"<div class=\\\"timeline\\\">\");t.b(\"\\n\" + i);t.b(\"  <nav class=\\\"timeline__menu\\\">\");t.b(\"\\n\" + i);t.b(\"    <a href=\\\"#\\\" class=\\\"menu-item\\\" data-action=\\\"export\\\">Export</a>\");t.b(\"\\n\" + i);t.b(\"    <a href=\\\"#\\\" class=\\\"menu-item\\\" data-action=\\\"switch-curve\\\">Switch curve editor</a>\");t.b(\"\\n\" + i);t.b(\"    <a href=\\\"#\\\" class=\\\"menu-item menu-item--toggle\\\" data-action=\\\"toggle\\\"><i class=\\\"icon-toggle\\\"></i></a>\");t.b(\"\\n\" + i);t.b(\"  </nav>\");t.b(\"\\n\" + i);t.b(\"  <div class=\\\"timeline__controls controls\\\">\");t.b(\"\\n\" + i);t.b(\"    <a href=\\\"#\\\" class=\\\"control control--first icon-backward\\\"></a>\");t.b(\"\\n\" + i);t.b(\"    <a href=\\\"#\\\" class=\\\"control control--play-pause icon-play\\\"></a>\");t.b(\"\\n\" + i);t.b(\"    <a href=\\\"#\\\" class=\\\"control control--last icon-forward\\\"></a>\");t.b(\"\\n\" + i);t.b(\"    <input type=\\\"text\\\" class=\\\"control control--input control--time\\\" /> <span class=\\\"control__time-separator\\\">/</span> <input type=\\\"text\\\" class=\\\"control control--input control--time-end\\\" />\");t.b(\"\\n\" + i);t.b(\"  </div>\");t.b(\"\\n\" + i);t.b(\"  <div class=\\\"timeline__header\\\">\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"  </div>\");t.b(\"\\n\" + i);t.b(\"  <div class=\\\"timeline__grid\\\">\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"  </div>\");t.b(\"\\n\" + i);t.b(\"  <div class=\\\"timeline__main\\\">\");t.b(\"\\n\");t.b(\"\\n\" + i);t.b(\"  </div>\");t.b(\"\\n\" + i);t.b(\"</div>\");t.b(\"\\n\");return t.fl(); },partials: {}, subs: {  }}, \"<div class=\\\"timeline\\\">\\n  <nav class=\\\"timeline__menu\\\">\\n    <a href=\\\"#\\\" class=\\\"menu-item\\\" data-action=\\\"export\\\">Export</a>\\n    <a href=\\\"#\\\" class=\\\"menu-item\\\" data-action=\\\"switch-curve\\\">Switch curve editor</a>\\n    <a href=\\\"#\\\" class=\\\"menu-item menu-item--toggle\\\" data-action=\\\"toggle\\\"><i class=\\\"icon-toggle\\\"></i></a>\\n  </nav>\\n  <div class=\\\"timeline__controls controls\\\">\\n    <a href=\\\"#\\\" class=\\\"control control--first icon-backward\\\"></a>\\n    <a href=\\\"#\\\" class=\\\"control control--play-pause icon-play\\\"></a>\\n    <a href=\\\"#\\\" class=\\\"control control--last icon-forward\\\"></a>\\n    <input type=\\\"text\\\" class=\\\"control control--input control--time\\\" /> <span class=\\\"control__time-separator\\\">/</span> <input type=\\\"text\\\" class=\\\"control control--input control--time-end\\\" />\\n  </div>\\n  <div class=\\\"timeline__header\\\">\\n\\n  </div>\\n  <div class=\\\"timeline__grid\\\">\\n\\n  </div>\\n  <div class=\\\"timeline__main\\\">\\n\\n  </div>\\n</div>\\n\", H); return T.render.apply(T, arguments); };//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90ZW1wbGF0ZXMvdGltZWxpbmUudHBsLmh0bWw/ZDY4MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLDZCQUE2Qix5QkFBeUIsd0JBQXdCLFlBQVksYUFBYSxnQ0FBZ0MsY0FBYyx3Q0FBd0MsY0FBYywrRUFBK0UsY0FBYyxrR0FBa0csY0FBYyx3SEFBd0gsY0FBYyxnQkFBZ0IsY0FBYyxxREFBcUQsY0FBYyw2RUFBNkUsY0FBYyw4RUFBOEUsY0FBYywyRUFBMkUsY0FBYyw4TUFBOE0sY0FBYyxnQkFBZ0IsY0FBYywwQ0FBMEMsVUFBVSxjQUFjLGdCQUFnQixjQUFjLHdDQUF3QyxVQUFVLGNBQWMsZ0JBQWdCLGNBQWMsd0NBQXdDLFVBQVUsY0FBYyxnQkFBZ0IsY0FBYyxjQUFjLFVBQVUsY0FBYyxFQUFFLGFBQWEsU0FBUyxJQUFJLCs4QkFBKzhCLHFDQUFxQyIsImZpbGUiOiIzMi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBIID0gcmVxdWlyZShcImhvZ2FuLmpzXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHsgdmFyIFQgPSBuZXcgSC5UZW1wbGF0ZSh7Y29kZTogZnVuY3Rpb24gKGMscCxpKSB7IHZhciB0PXRoaXM7dC5iKGk9aXx8XCJcIik7dC5iKFwiPGRpdiBjbGFzcz1cXFwidGltZWxpbmVcXFwiPlwiKTt0LmIoXCJcXG5cIiArIGkpO3QuYihcIiAgPG5hdiBjbGFzcz1cXFwidGltZWxpbmVfX21lbnVcXFwiPlwiKTt0LmIoXCJcXG5cIiArIGkpO3QuYihcIiAgICA8YSBocmVmPVxcXCIjXFxcIiBjbGFzcz1cXFwibWVudS1pdGVtXFxcIiBkYXRhLWFjdGlvbj1cXFwiZXhwb3J0XFxcIj5FeHBvcnQ8L2E+XCIpO3QuYihcIlxcblwiICsgaSk7dC5iKFwiICAgIDxhIGhyZWY9XFxcIiNcXFwiIGNsYXNzPVxcXCJtZW51LWl0ZW1cXFwiIGRhdGEtYWN0aW9uPVxcXCJzd2l0Y2gtY3VydmVcXFwiPlN3aXRjaCBjdXJ2ZSBlZGl0b3I8L2E+XCIpO3QuYihcIlxcblwiICsgaSk7dC5iKFwiICAgIDxhIGhyZWY9XFxcIiNcXFwiIGNsYXNzPVxcXCJtZW51LWl0ZW0gbWVudS1pdGVtLS10b2dnbGVcXFwiIGRhdGEtYWN0aW9uPVxcXCJ0b2dnbGVcXFwiPjxpIGNsYXNzPVxcXCJpY29uLXRvZ2dsZVxcXCI+PC9pPjwvYT5cIik7dC5iKFwiXFxuXCIgKyBpKTt0LmIoXCIgIDwvbmF2PlwiKTt0LmIoXCJcXG5cIiArIGkpO3QuYihcIiAgPGRpdiBjbGFzcz1cXFwidGltZWxpbmVfX2NvbnRyb2xzIGNvbnRyb2xzXFxcIj5cIik7dC5iKFwiXFxuXCIgKyBpKTt0LmIoXCIgICAgPGEgaHJlZj1cXFwiI1xcXCIgY2xhc3M9XFxcImNvbnRyb2wgY29udHJvbC0tZmlyc3QgaWNvbi1iYWNrd2FyZFxcXCI+PC9hPlwiKTt0LmIoXCJcXG5cIiArIGkpO3QuYihcIiAgICA8YSBocmVmPVxcXCIjXFxcIiBjbGFzcz1cXFwiY29udHJvbCBjb250cm9sLS1wbGF5LXBhdXNlIGljb24tcGxheVxcXCI+PC9hPlwiKTt0LmIoXCJcXG5cIiArIGkpO3QuYihcIiAgICA8YSBocmVmPVxcXCIjXFxcIiBjbGFzcz1cXFwiY29udHJvbCBjb250cm9sLS1sYXN0IGljb24tZm9yd2FyZFxcXCI+PC9hPlwiKTt0LmIoXCJcXG5cIiArIGkpO3QuYihcIiAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgY2xhc3M9XFxcImNvbnRyb2wgY29udHJvbC0taW5wdXQgY29udHJvbC0tdGltZVxcXCIgLz4gPHNwYW4gY2xhc3M9XFxcImNvbnRyb2xfX3RpbWUtc2VwYXJhdG9yXFxcIj4vPC9zcGFuPiA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgY2xhc3M9XFxcImNvbnRyb2wgY29udHJvbC0taW5wdXQgY29udHJvbC0tdGltZS1lbmRcXFwiIC8+XCIpO3QuYihcIlxcblwiICsgaSk7dC5iKFwiICA8L2Rpdj5cIik7dC5iKFwiXFxuXCIgKyBpKTt0LmIoXCIgIDxkaXYgY2xhc3M9XFxcInRpbWVsaW5lX19oZWFkZXJcXFwiPlwiKTt0LmIoXCJcXG5cIik7dC5iKFwiXFxuXCIgKyBpKTt0LmIoXCIgIDwvZGl2PlwiKTt0LmIoXCJcXG5cIiArIGkpO3QuYihcIiAgPGRpdiBjbGFzcz1cXFwidGltZWxpbmVfX2dyaWRcXFwiPlwiKTt0LmIoXCJcXG5cIik7dC5iKFwiXFxuXCIgKyBpKTt0LmIoXCIgIDwvZGl2PlwiKTt0LmIoXCJcXG5cIiArIGkpO3QuYihcIiAgPGRpdiBjbGFzcz1cXFwidGltZWxpbmVfX21haW5cXFwiPlwiKTt0LmIoXCJcXG5cIik7dC5iKFwiXFxuXCIgKyBpKTt0LmIoXCIgIDwvZGl2PlwiKTt0LmIoXCJcXG5cIiArIGkpO3QuYihcIjwvZGl2PlwiKTt0LmIoXCJcXG5cIik7cmV0dXJuIHQuZmwoKTsgfSxwYXJ0aWFsczoge30sIHN1YnM6IHsgIH19LCBcIjxkaXYgY2xhc3M9XFxcInRpbWVsaW5lXFxcIj5cXG4gIDxuYXYgY2xhc3M9XFxcInRpbWVsaW5lX19tZW51XFxcIj5cXG4gICAgPGEgaHJlZj1cXFwiI1xcXCIgY2xhc3M9XFxcIm1lbnUtaXRlbVxcXCIgZGF0YS1hY3Rpb249XFxcImV4cG9ydFxcXCI+RXhwb3J0PC9hPlxcbiAgICA8YSBocmVmPVxcXCIjXFxcIiBjbGFzcz1cXFwibWVudS1pdGVtXFxcIiBkYXRhLWFjdGlvbj1cXFwic3dpdGNoLWN1cnZlXFxcIj5Td2l0Y2ggY3VydmUgZWRpdG9yPC9hPlxcbiAgICA8YSBocmVmPVxcXCIjXFxcIiBjbGFzcz1cXFwibWVudS1pdGVtIG1lbnUtaXRlbS0tdG9nZ2xlXFxcIiBkYXRhLWFjdGlvbj1cXFwidG9nZ2xlXFxcIj48aSBjbGFzcz1cXFwiaWNvbi10b2dnbGVcXFwiPjwvaT48L2E+XFxuICA8L25hdj5cXG4gIDxkaXYgY2xhc3M9XFxcInRpbWVsaW5lX19jb250cm9scyBjb250cm9sc1xcXCI+XFxuICAgIDxhIGhyZWY9XFxcIiNcXFwiIGNsYXNzPVxcXCJjb250cm9sIGNvbnRyb2wtLWZpcnN0IGljb24tYmFja3dhcmRcXFwiPjwvYT5cXG4gICAgPGEgaHJlZj1cXFwiI1xcXCIgY2xhc3M9XFxcImNvbnRyb2wgY29udHJvbC0tcGxheS1wYXVzZSBpY29uLXBsYXlcXFwiPjwvYT5cXG4gICAgPGEgaHJlZj1cXFwiI1xcXCIgY2xhc3M9XFxcImNvbnRyb2wgY29udHJvbC0tbGFzdCBpY29uLWZvcndhcmRcXFwiPjwvYT5cXG4gICAgPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIGNsYXNzPVxcXCJjb250cm9sIGNvbnRyb2wtLWlucHV0IGNvbnRyb2wtLXRpbWVcXFwiIC8+IDxzcGFuIGNsYXNzPVxcXCJjb250cm9sX190aW1lLXNlcGFyYXRvclxcXCI+Lzwvc3Bhbj4gPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIGNsYXNzPVxcXCJjb250cm9sIGNvbnRyb2wtLWlucHV0IGNvbnRyb2wtLXRpbWUtZW5kXFxcIiAvPlxcbiAgPC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJ0aW1lbGluZV9faGVhZGVyXFxcIj5cXG5cXG4gIDwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwidGltZWxpbmVfX2dyaWRcXFwiPlxcblxcbiAgPC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJ0aW1lbGluZV9fbWFpblxcXCI+XFxuXFxuICA8L2Rpdj5cXG48L2Rpdj5cXG5cIiwgSCk7IHJldHVybiBULnJlbmRlci5hcHBseShULCBhcmd1bWVudHMpOyB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vdGVtcGxhdGVzL3RpbWVsaW5lLnRwbC5odG1sXG4vLyBtb2R1bGUgaWQgPSAzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/*\n *  Copyright 2011 Twitter, Inc.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n// This file is for use with Node.js. See dist/ for browser files.\n\nvar Hogan = __webpack_require__(34);\nHogan.Template = __webpack_require__(35).Template;\nHogan.template = Hogan.Template;\nmodule.exports = Hogan;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL21udC9jL1VzZXJzL2dpbnBlaS9wcm9qZWN0cy9yYWQvVHdlZW5UaW1lL34vaG9nYW4uanMvbGliL2hvZ2FuLmpzPzVhN2IiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIzMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiAgQ29weXJpZ2h0IDIwMTEgVHdpdHRlciwgSW5jLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy8gVGhpcyBmaWxlIGlzIGZvciB1c2Ugd2l0aCBOb2RlLmpzLiBTZWUgZGlzdC8gZm9yIGJyb3dzZXIgZmlsZXMuXG5cbnZhciBIb2dhbiA9IHJlcXVpcmUoJy4vY29tcGlsZXInKTtcbkhvZ2FuLlRlbXBsYXRlID0gcmVxdWlyZSgnLi90ZW1wbGF0ZScpLlRlbXBsYXRlO1xuSG9nYW4udGVtcGxhdGUgPSBIb2dhbi5UZW1wbGF0ZTtcbm1vZHVsZS5leHBvcnRzID0gSG9nYW47XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvbW50L2MvVXNlcnMvZ2lucGVpL3Byb2plY3RzL3JhZC9Ud2VlblRpbWUvfi9ob2dhbi5qcy9saWIvaG9nYW4uanNcbi8vIG1vZHVsZSBpZCA9IDMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/*\n *  Copyright 2011 Twitter, Inc.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n(function (Hogan) {\n  // Setup regex  assignments\n  // remove whitespace according to Mustache spec\n  var rIsWhitespace = /\\S/,\n      rQuot = /\\\"/g,\n      rNewline =  /\\n/g,\n      rCr = /\\r/g,\n      rSlash = /\\\\/g,\n      rLineSep = /\\u2028/,\n      rParagraphSep = /\\u2029/;\n\n  Hogan.tags = {\n    '#': 1, '^': 2, '<': 3, '$': 4,\n    '/': 5, '!': 6, '>': 7, '=': 8, '_v': 9,\n    '{': 10, '&': 11, '_t': 12\n  };\n\n  Hogan.scan = function scan(text, delimiters) {\n    var len = text.length,\n        IN_TEXT = 0,\n        IN_TAG_TYPE = 1,\n        IN_TAG = 2,\n        state = IN_TEXT,\n        tagType = null,\n        tag = null,\n        buf = '',\n        tokens = [],\n        seenTag = false,\n        i = 0,\n        lineStart = 0,\n        otag = '{{',\n        ctag = '}}';\n\n    function addBuf() {\n      if (buf.length > 0) {\n        tokens.push({tag: '_t', text: new String(buf)});\n        buf = '';\n      }\n    }\n\n    function lineIsWhitespace() {\n      var isAllWhitespace = true;\n      for (var j = lineStart; j < tokens.length; j++) {\n        isAllWhitespace =\n          (Hogan.tags[tokens[j].tag] < Hogan.tags['_v']) ||\n          (tokens[j].tag == '_t' && tokens[j].text.match(rIsWhitespace) === null);\n        if (!isAllWhitespace) {\n          return false;\n        }\n      }\n\n      return isAllWhitespace;\n    }\n\n    function filterLine(haveSeenTag, noNewLine) {\n      addBuf();\n\n      if (haveSeenTag && lineIsWhitespace()) {\n        for (var j = lineStart, next; j < tokens.length; j++) {\n          if (tokens[j].text) {\n            if ((next = tokens[j+1]) && next.tag == '>') {\n              // set indent to token value\n              next.indent = tokens[j].text.toString()\n            }\n            tokens.splice(j, 1);\n          }\n        }\n      } else if (!noNewLine) {\n        tokens.push({tag:'\\n'});\n      }\n\n      seenTag = false;\n      lineStart = tokens.length;\n    }\n\n    function changeDelimiters(text, index) {\n      var close = '=' + ctag,\n          closeIndex = text.indexOf(close, index),\n          delimiters = trim(\n            text.substring(text.indexOf('=', index) + 1, closeIndex)\n          ).split(' ');\n\n      otag = delimiters[0];\n      ctag = delimiters[delimiters.length - 1];\n\n      return closeIndex + close.length - 1;\n    }\n\n    if (delimiters) {\n      delimiters = delimiters.split(' ');\n      otag = delimiters[0];\n      ctag = delimiters[1];\n    }\n\n    for (i = 0; i < len; i++) {\n      if (state == IN_TEXT) {\n        if (tagChange(otag, text, i)) {\n          --i;\n          addBuf();\n          state = IN_TAG_TYPE;\n        } else {\n          if (text.charAt(i) == '\\n') {\n            filterLine(seenTag);\n          } else {\n            buf += text.charAt(i);\n          }\n        }\n      } else if (state == IN_TAG_TYPE) {\n        i += otag.length - 1;\n        tag = Hogan.tags[text.charAt(i + 1)];\n        tagType = tag ? text.charAt(i + 1) : '_v';\n        if (tagType == '=') {\n          i = changeDelimiters(text, i);\n          state = IN_TEXT;\n        } else {\n          if (tag) {\n            i++;\n          }\n          state = IN_TAG;\n        }\n        seenTag = i;\n      } else {\n        if (tagChange(ctag, text, i)) {\n          tokens.push({tag: tagType, n: trim(buf), otag: otag, ctag: ctag,\n                       i: (tagType == '/') ? seenTag - otag.length : i + ctag.length});\n          buf = '';\n          i += ctag.length - 1;\n          state = IN_TEXT;\n          if (tagType == '{') {\n            if (ctag == '}}') {\n              i++;\n            } else {\n              cleanTripleStache(tokens[tokens.length - 1]);\n            }\n          }\n        } else {\n          buf += text.charAt(i);\n        }\n      }\n    }\n\n    filterLine(seenTag, true);\n\n    return tokens;\n  }\n\n  function cleanTripleStache(token) {\n    if (token.n.substr(token.n.length - 1) === '}') {\n      token.n = token.n.substring(0, token.n.length - 1);\n    }\n  }\n\n  function trim(s) {\n    if (s.trim) {\n      return s.trim();\n    }\n\n    return s.replace(/^\\s*|\\s*$/g, '');\n  }\n\n  function tagChange(tag, text, index) {\n    if (text.charAt(index) != tag.charAt(0)) {\n      return false;\n    }\n\n    for (var i = 1, l = tag.length; i < l; i++) {\n      if (text.charAt(index + i) != tag.charAt(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // the tags allowed inside super templates\n  var allowedInSuper = {'_t': true, '\\n': true, '$': true, '/': true};\n\n  function buildTree(tokens, kind, stack, customTags) {\n    var instructions = [],\n        opener = null,\n        tail = null,\n        token = null;\n\n    tail = stack[stack.length - 1];\n\n    while (tokens.length > 0) {\n      token = tokens.shift();\n\n      if (tail && tail.tag == '<' && !(token.tag in allowedInSuper)) {\n        throw new Error('Illegal content in < super tag.');\n      }\n\n      if (Hogan.tags[token.tag] <= Hogan.tags['$'] || isOpener(token, customTags)) {\n        stack.push(token);\n        token.nodes = buildTree(tokens, token.tag, stack, customTags);\n      } else if (token.tag == '/') {\n        if (stack.length === 0) {\n          throw new Error('Closing tag without opener: /' + token.n);\n        }\n        opener = stack.pop();\n        if (token.n != opener.n && !isCloser(token.n, opener.n, customTags)) {\n          throw new Error('Nesting error: ' + opener.n + ' vs. ' + token.n);\n        }\n        opener.end = token.i;\n        return instructions;\n      } else if (token.tag == '\\n') {\n        token.last = (tokens.length == 0) || (tokens[0].tag == '\\n');\n      }\n\n      instructions.push(token);\n    }\n\n    if (stack.length > 0) {\n      throw new Error('missing closing tag: ' + stack.pop().n);\n    }\n\n    return instructions;\n  }\n\n  function isOpener(token, tags) {\n    for (var i = 0, l = tags.length; i < l; i++) {\n      if (tags[i].o == token.n) {\n        token.tag = '#';\n        return true;\n      }\n    }\n  }\n\n  function isCloser(close, open, tags) {\n    for (var i = 0, l = tags.length; i < l; i++) {\n      if (tags[i].c == close && tags[i].o == open) {\n        return true;\n      }\n    }\n  }\n\n  function stringifySubstitutions(obj) {\n    var items = [];\n    for (var key in obj) {\n      items.push('\"' + esc(key) + '\": function(c,p,t,i) {' + obj[key] + '}');\n    }\n    return \"{ \" + items.join(\",\") + \" }\";\n  }\n\n  function stringifyPartials(codeObj) {\n    var partials = [];\n    for (var key in codeObj.partials) {\n      partials.push('\"' + esc(key) + '\":{name:\"' + esc(codeObj.partials[key].name) + '\", ' + stringifyPartials(codeObj.partials[key]) + \"}\");\n    }\n    return \"partials: {\" + partials.join(\",\") + \"}, subs: \" + stringifySubstitutions(codeObj.subs);\n  }\n\n  Hogan.stringify = function(codeObj, text, options) {\n    return \"{code: function (c,p,i) { \" + Hogan.wrapMain(codeObj.code) + \" },\" + stringifyPartials(codeObj) +  \"}\";\n  }\n\n  var serialNo = 0;\n  Hogan.generate = function(tree, text, options) {\n    serialNo = 0;\n    var context = { code: '', subs: {}, partials: {} };\n    Hogan.walk(tree, context);\n\n    if (options.asString) {\n      return this.stringify(context, text, options);\n    }\n\n    return this.makeTemplate(context, text, options);\n  }\n\n  Hogan.wrapMain = function(code) {\n    return 'var t=this;t.b(i=i||\"\");' + code + 'return t.fl();';\n  }\n\n  Hogan.template = Hogan.Template;\n\n  Hogan.makeTemplate = function(codeObj, text, options) {\n    var template = this.makePartials(codeObj);\n    template.code = new Function('c', 'p', 'i', this.wrapMain(codeObj.code));\n    return new this.template(template, text, this, options);\n  }\n\n  Hogan.makePartials = function(codeObj) {\n    var key, template = {subs: {}, partials: codeObj.partials, name: codeObj.name};\n    for (key in template.partials) {\n      template.partials[key] = this.makePartials(template.partials[key]);\n    }\n    for (key in codeObj.subs) {\n      template.subs[key] = new Function('c', 'p', 't', 'i', codeObj.subs[key]);\n    }\n    return template;\n  }\n\n  function esc(s) {\n    return s.replace(rSlash, '\\\\\\\\')\n            .replace(rQuot, '\\\\\\\"')\n            .replace(rNewline, '\\\\n')\n            .replace(rCr, '\\\\r')\n            .replace(rLineSep, '\\\\u2028')\n            .replace(rParagraphSep, '\\\\u2029');\n  }\n\n  function chooseMethod(s) {\n    return (~s.indexOf('.')) ? 'd' : 'f';\n  }\n\n  function createPartial(node, context) {\n    var prefix = \"<\" + (context.prefix || \"\");\n    var sym = prefix + node.n + serialNo++;\n    context.partials[sym] = {name: node.n, partials: {}};\n    context.code += 't.b(t.rp(\"' +  esc(sym) + '\",c,p,\"' + (node.indent || '') + '\"));';\n    return sym;\n  }\n\n  Hogan.codegen = {\n    '#': function(node, context) {\n      context.code += 'if(t.s(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,1),' +\n                      'c,p,0,' + node.i + ',' + node.end + ',\"' + node.otag + \" \" + node.ctag + '\")){' +\n                      't.rs(c,p,' + 'function(c,p,t){';\n      Hogan.walk(node.nodes, context);\n      context.code += '});c.pop();}';\n    },\n\n    '^': function(node, context) {\n      context.code += 'if(!t.s(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,1),c,p,1,0,0,\"\")){';\n      Hogan.walk(node.nodes, context);\n      context.code += '};';\n    },\n\n    '>': createPartial,\n    '<': function(node, context) {\n      var ctx = {partials: {}, code: '', subs: {}, inPartial: true};\n      Hogan.walk(node.nodes, ctx);\n      var template = context.partials[createPartial(node, context)];\n      template.subs = ctx.subs;\n      template.partials = ctx.partials;\n    },\n\n    '$': function(node, context) {\n      var ctx = {subs: {}, code: '', partials: context.partials, prefix: node.n};\n      Hogan.walk(node.nodes, ctx);\n      context.subs[node.n] = ctx.code;\n      if (!context.inPartial) {\n        context.code += 't.sub(\"' + esc(node.n) + '\",c,p,i);';\n      }\n    },\n\n    '\\n': function(node, context) {\n      context.code += write('\"\\\\n\"' + (node.last ? '' : ' + i'));\n    },\n\n    '_v': function(node, context) {\n      context.code += 't.b(t.v(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,0)));';\n    },\n\n    '_t': function(node, context) {\n      context.code += write('\"' + esc(node.text) + '\"');\n    },\n\n    '{': tripleStache,\n\n    '&': tripleStache\n  }\n\n  function tripleStache(node, context) {\n    context.code += 't.b(t.t(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,0)));';\n  }\n\n  function write(s) {\n    return 't.b(' + s + ');';\n  }\n\n  Hogan.walk = function(nodelist, context) {\n    var func;\n    for (var i = 0, l = nodelist.length; i < l; i++) {\n      func = Hogan.codegen[nodelist[i].tag];\n      func && func(nodelist[i], context);\n    }\n    return context;\n  }\n\n  Hogan.parse = function(tokens, text, options) {\n    options = options || {};\n    return buildTree(tokens, '', [], options.sectionTags || []);\n  }\n\n  Hogan.cache = {};\n\n  Hogan.cacheKey = function(text, options) {\n    return [text, !!options.asString, !!options.disableLambda, options.delimiters, !!options.modelGet].join('||');\n  }\n\n  Hogan.compile = function(text, options) {\n    options = options || {};\n    var key = Hogan.cacheKey(text, options);\n    var template = this.cache[key];\n\n    if (template) {\n      var partials = template.partials;\n      for (var name in partials) {\n        delete partials[name].instance;\n      }\n      return template;\n    }\n\n    template = this.generate(this.parse(this.scan(text, options.delimiters), text, options), text, options);\n    return this.cache[key] = template;\n  }\n})( true ? exports : Hogan);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/*\n *  Copyright 2011 Twitter, Inc.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nvar Hogan = {};\n\n(function (Hogan) {\n  Hogan.Template = function (codeObj, text, compiler, options) {\n    codeObj = codeObj || {};\n    this.r = codeObj.code || this.r;\n    this.c = compiler;\n    this.options = options || {};\n    this.text = text || '';\n    this.partials = codeObj.partials || {};\n    this.subs = codeObj.subs || {};\n    this.buf = '';\n  }\n\n  Hogan.Template.prototype = {\n    // render: replaced by generated code.\n    r: function (context, partials, indent) { return ''; },\n\n    // variable escaping\n    v: hoganEscape,\n\n    // triple stache\n    t: coerceToString,\n\n    render: function render(context, partials, indent) {\n      return this.ri([context], partials || {}, indent);\n    },\n\n    // render internal -- a hook for overrides that catches partials too\n    ri: function (context, partials, indent) {\n      return this.r(context, partials, indent);\n    },\n\n    // ensurePartial\n    ep: function(symbol, partials) {\n      var partial = this.partials[symbol];\n\n      // check to see that if we've instantiated this partial before\n      var template = partials[partial.name];\n      if (partial.instance && partial.base == template) {\n        return partial.instance;\n      }\n\n      if (typeof template == 'string') {\n        if (!this.c) {\n          throw new Error(\"No compiler available.\");\n        }\n        template = this.c.compile(template, this.options);\n      }\n\n      if (!template) {\n        return null;\n      }\n\n      // We use this to check whether the partials dictionary has changed\n      this.partials[symbol].base = template;\n\n      if (partial.subs) {\n        // Make sure we consider parent template now\n        if (!partials.stackText) partials.stackText = {};\n        for (key in partial.subs) {\n          if (!partials.stackText[key]) {\n            partials.stackText[key] = (this.activeSub !== undefined && partials.stackText[this.activeSub]) ? partials.stackText[this.activeSub] : this.text;\n          }\n        }\n        template = createSpecializedPartial(template, partial.subs, partial.partials,\n          this.stackSubs, this.stackPartials, partials.stackText);\n      }\n      this.partials[symbol].instance = template;\n\n      return template;\n    },\n\n    // tries to find a partial in the current scope and render it\n    rp: function(symbol, context, partials, indent) {\n      var partial = this.ep(symbol, partials);\n      if (!partial) {\n        return '';\n      }\n\n      return partial.ri(context, partials, indent);\n    },\n\n    // render a section\n    rs: function(context, partials, section) {\n      var tail = context[context.length - 1];\n\n      if (!isArray(tail)) {\n        section(context, partials, this);\n        return;\n      }\n\n      for (var i = 0; i < tail.length; i++) {\n        context.push(tail[i]);\n        section(context, partials, this);\n        context.pop();\n      }\n    },\n\n    // maybe start a section\n    s: function(val, ctx, partials, inverted, start, end, tags) {\n      var pass;\n\n      if (isArray(val) && val.length === 0) {\n        return false;\n      }\n\n      if (typeof val == 'function') {\n        val = this.ms(val, ctx, partials, inverted, start, end, tags);\n      }\n\n      pass = !!val;\n\n      if (!inverted && pass && ctx) {\n        ctx.push((typeof val == 'object') ? val : ctx[ctx.length - 1]);\n      }\n\n      return pass;\n    },\n\n    // find values with dotted names\n    d: function(key, ctx, partials, returnFound) {\n      var found,\n          names = key.split('.'),\n          val = this.f(names[0], ctx, partials, returnFound),\n          doModelGet = this.options.modelGet,\n          cx = null;\n\n      if (key === '.' && isArray(ctx[ctx.length - 2])) {\n        val = ctx[ctx.length - 1];\n      } else {\n        for (var i = 1; i < names.length; i++) {\n          found = findInScope(names[i], val, doModelGet);\n          if (found !== undefined) {\n            cx = val;\n            val = found;\n          } else {\n            val = '';\n          }\n        }\n      }\n\n      if (returnFound && !val) {\n        return false;\n      }\n\n      if (!returnFound && typeof val == 'function') {\n        ctx.push(cx);\n        val = this.mv(val, ctx, partials);\n        ctx.pop();\n      }\n\n      return val;\n    },\n\n    // find values with normal names\n    f: function(key, ctx, partials, returnFound) {\n      var val = false,\n          v = null,\n          found = false,\n          doModelGet = this.options.modelGet;\n\n      for (var i = ctx.length - 1; i >= 0; i--) {\n        v = ctx[i];\n        val = findInScope(key, v, doModelGet);\n        if (val !== undefined) {\n          found = true;\n          break;\n        }\n      }\n\n      if (!found) {\n        return (returnFound) ? false : \"\";\n      }\n\n      if (!returnFound && typeof val == 'function') {\n        val = this.mv(val, ctx, partials);\n      }\n\n      return val;\n    },\n\n    // higher order templates\n    ls: function(func, cx, partials, text, tags) {\n      var oldTags = this.options.delimiters;\n\n      this.options.delimiters = tags;\n      this.b(this.ct(coerceToString(func.call(cx, text)), cx, partials));\n      this.options.delimiters = oldTags;\n\n      return false;\n    },\n\n    // compile text\n    ct: function(text, cx, partials) {\n      if (this.options.disableLambda) {\n        throw new Error('Lambda features disabled.');\n      }\n      return this.c.compile(text, this.options).render(cx, partials);\n    },\n\n    // template result buffering\n    b: function(s) { this.buf += s; },\n\n    fl: function() { var r = this.buf; this.buf = ''; return r; },\n\n    // method replace section\n    ms: function(func, ctx, partials, inverted, start, end, tags) {\n      var textSource,\n          cx = ctx[ctx.length - 1],\n          result = func.call(cx);\n\n      if (typeof result == 'function') {\n        if (inverted) {\n          return true;\n        } else {\n          textSource = (this.activeSub && this.subsText && this.subsText[this.activeSub]) ? this.subsText[this.activeSub] : this.text;\n          return this.ls(result, cx, partials, textSource.substring(start, end), tags);\n        }\n      }\n\n      return result;\n    },\n\n    // method replace variable\n    mv: function(func, ctx, partials) {\n      var cx = ctx[ctx.length - 1];\n      var result = func.call(cx);\n\n      if (typeof result == 'function') {\n        return this.ct(coerceToString(result.call(cx)), cx, partials);\n      }\n\n      return result;\n    },\n\n    sub: function(name, context, partials, indent) {\n      var f = this.subs[name];\n      if (f) {\n        this.activeSub = name;\n        f(context, partials, this, indent);\n        this.activeSub = false;\n      }\n    }\n\n  };\n\n  //Find a key in an object\n  function findInScope(key, scope, doModelGet) {\n    var val;\n\n    if (scope && typeof scope == 'object') {\n\n      if (scope[key] !== undefined) {\n        val = scope[key];\n\n      // try lookup with get for backbone or similar model data\n      } else if (doModelGet && scope.get && typeof scope.get == 'function') {\n        val = scope.get(key);\n      }\n    }\n\n    return val;\n  }\n\n  function createSpecializedPartial(instance, subs, partials, stackSubs, stackPartials, stackText) {\n    function PartialTemplate() {};\n    PartialTemplate.prototype = instance;\n    function Substitutions() {};\n    Substitutions.prototype = instance.subs;\n    var key;\n    var partial = new PartialTemplate();\n    partial.subs = new Substitutions();\n    partial.subsText = {};  //hehe. substext.\n    partial.buf = '';\n\n    stackSubs = stackSubs || {};\n    partial.stackSubs = stackSubs;\n    partial.subsText = stackText;\n    for (key in subs) {\n      if (!stackSubs[key]) stackSubs[key] = subs[key];\n    }\n    for (key in stackSubs) {\n      partial.subs[key] = stackSubs[key];\n    }\n\n    stackPartials = stackPartials || {};\n    partial.stackPartials = stackPartials;\n    for (key in partials) {\n      if (!stackPartials[key]) stackPartials[key] = partials[key];\n    }\n    for (key in stackPartials) {\n      partial.partials[key] = stackPartials[key];\n    }\n\n    return partial;\n  }\n\n  var rAmp = /&/g,\n      rLt = /</g,\n      rGt = />/g,\n      rApos = /\\'/g,\n      rQuot = /\\\"/g,\n      hChars = /[&<>\\\"\\']/;\n\n  function coerceToString(val) {\n    return String((val === null || val === undefined) ? '' : val);\n  }\n\n  function hoganEscape(str) {\n    str = coerceToString(str);\n    return hChars.test(str) ?\n      str\n        .replace(rAmp, '&amp;')\n        .replace(rLt, '&lt;')\n        .replace(rGt, '&gt;')\n        .replace(rApos, '&#39;')\n        .replace(rQuot, '&quot;') :\n      str;\n  }\n\n  var isArray = Array.isArray || function(a) {\n    return Object.prototype.toString.call(a) === '[object Array]';\n  };\n\n})( true ? exports : Hogan);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ })
/******/ ])
});
;